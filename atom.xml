<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布衣男儿</title>
  <subtitle>不物喜，不己悲，善假物，易参行！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huos3203.github.io/"/>
  <updated>2017-01-22T10:09:54.000Z</updated>
  <id>https://huos3203.github.io/</id>
  
  <author>
    <name>boyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS面试题大集合[转]</title>
    <link href="https://huos3203.github.io/2017/01/22/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E9%9B%86%E5%90%88/"/>
    <id>https://huos3203.github.io/2017/01/22/iOS面试题大集合/</id>
    <published>2017-01-22T06:20:52.000Z</published>
    <updated>2017-01-22T10:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 align="center">iOS有用的面试题大集合</h1>

<h2 id="面试题从何处得来"><a href="#面试题从何处得来" class="headerlink" title="面试题从何处得来"></a>面试题从何处得来</h2><ul>
<li><a href="http://blog.sunnyxx.com/2015/07/04/ios-interview/" target="_blank" rel="external">招聘一个靠谱的 iOS</a></li>
<li><a href="http://www.zhihu.com/question/19604641" target="_blank" rel="external">知乎－如何面试 iOS 工程师？</a></li>
</ul>
<h2 id="阅读面试题之前"><a href="#阅读面试题之前" class="headerlink" title="阅读面试题之前"></a>阅读面试题之前</h2><p>在正式开始之前，我期望你能对iOS/Mac OS X平台开发有所了解，在iOS开发中已经很少需要自己写复杂的算法了，一般情况下很少会在面试中出现算法的考核，如果你了解一些基础的算法，还是有帮助的。</p>
<p>Now！！请使用ARC</p>
<h3 id="什么是iOS开发"><a href="#什么是iOS开发" class="headerlink" title="什么是iOS开发"></a>什么是iOS开发</h3><p>iOS是iPhone iPad等手持设备的操作系统，所谓的iOS开发就是开发运行在iOS系统上的应用或者游戏，比如支付宝，微信，微博等，当然这也包括了iPad版的应用，iOS开发可以归纳到<strong>移动开发</strong>领域。</p>
<p><strong>有时候面试官是那种’脑残粉’，了解一下Apple的发展历史，可能比较聊的开。</strong></p>
<p><a href="http://digi.tech.qq.com/a/20150127/021898.htm" target="_blank" rel="external">苹果Mac计算机31年发展历程回顾</a></p>
<p><a href="http://baike.baidu.com/link?url=68F4Bl4llkNvdFJ1Md0fkZDDudN-NS46JeZoLrgPeqEbZmm8oBKG92Ocyd983yNQU6FVuDTFZOnjjPjfUHnuoePdfh6zJJ973pXFKYcbIKp5bCnQy_WvUVNJ6P84s8HE1xAlRaGdLVuoCb2p_8uaMa" target="_blank" rel="external">苹果公司</a></p>
<p><a href="http://www.zhihu.com/topic/19551762" target="_blank" rel="external">苹果公司在知乎上的话题</a></p>
<p><a href="http://www.amazon.cn/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0-%E6%B2%83%E5%B0%94%E7%89%B9%C2%B7%E8%89%BE%E8%90%A8%E5%85%8B%E6%A3%AE/dp/B00IM4IFL2/ref=sr_1_1?ie=UTF8&amp;qid=1436592631&amp;sr=8-1&amp;keywords=%E4%B9%94%E5%B8%83%E6%96%AF" target="_blank" rel="external">乔布斯个人传记</a></p>
<h3 id="拼写正确的重要性"><a href="#拼写正确的重要性" class="headerlink" title="拼写正确的重要性"></a>拼写正确的重要性</h3><p>有些面试官可能更注重细节，所以，拼写的单词一定要对，比如iOS，Xcode，iPhone，Objective-C，JSON等，良好的拼写习惯，会让面试官觉得你细心靠谱。</p>
<h3 id="Swift和Objective-C的比较"><a href="#Swift和Objective-C的比较" class="headerlink" title="Swift和Objective-C的比较"></a>Swift和Objective-C的比较</h3><p>仁者见仁智者见智，从个人的使用角度上来看，Swift在某些情况上比Objective-C更加的严谨了，入门非常简单，但是想开发应用，还是需要学习cocoa框架，这玩意路子还是Objective-C的，所以有基础可能更好的理解Swift在iOS/Mac OS X 中的开发和应用。</p>
<p><a href="http://www.zhihu.com/question/24002984" target="_blank" rel="external">知乎原文</a></p>
<h3 id="了解Watch-OS"><a href="#了解Watch-OS" class="headerlink" title="了解Watch OS"></a>了解Watch OS</h3><p><code>Watch OS</code>是苹果公司推出的应用在手表上的一个操作系统，<code>Watch OS 1.0</code>需要跟iPhone相结合才能工作。</p>
<p><a href="https://stratechery.com/2014/apple-watch-asking-saying/" target="_blank" rel="external">Apple Watch</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;mid=208847424&amp;idx=1&amp;sn=fac57c5da8136b07fe9cdf53d1ec9f4c#rd" target="_blank" rel="external">Watch OS 2.0 开发概述</a></p>
<hr>
<h2 id="iOS面试"><a href="#iOS面试" class="headerlink" title="iOS面试"></a>iOS面试</h2><h5>property 后面可以有哪些修饰符</h5>

<ol>
<li><p>读写修饰符 <code>readwrite</code> | <code>readonly</code></p>
<p> <code>readwrite</code> Xcode会帮助我们创建<code>setter</code>，<code>getter</code>方法，<code>readonly</code> Xcode只会帮助我们创建<code>getter</code>方法，不会创建<code>setter</code>方法。</p>
</li>
<li><p><code>setter</code>相关的修饰符 <code>assign</code> | <code>retain</code> | <code>copy</code></p>
<p> 2.1 <code>setter</code>相关的修饰符表明了<code>setter</code>方法该如何实现，<code>assign</code>用于基本数据类型<code>NSInteger</code>，<code>CGFloat</code>，C数据类型<code>int</code>，<code>float</code>，<code>id</code>类型等，这个符号不会涉及内存管理，但是如果是对象类使用了它，可能会导致内存泄漏或者<code>EXC_BAD_ACCESS</code>错误。</p>
<p> 2.2 <code>retain</code>用于对象类的内存管理，如果基本数据类型使用它，<code>Xcode</code>会直接报错。当对象类使用此修饰符时，<code>setter</code>方法的实现是先<code>release</code>一次，然后再对新的对象做一次<code>retain</code>操作。</p>
<p> 2.3 <code>copy</code>主要用于<code>NSString</code>，用于内容复制。</p>
</li>
<li><p>原子性修饰符 <code>atomic</code> | <code>nonatomic</code></p>
<p> <code>atomic</code> 表示线程安全</p>
<p> <code>nonatomic</code> 表示非线程安全，使用此修饰符会提高性能</p>
</li>
<li><p><code>getter</code>，<code>setter</code>修饰符</p>
<p> 这两个修饰符用于设置生成的getter，setter的方法名</p>
</li>
<li><p><code>strong</code>，<code>weak</code>修饰符（ARC）<br>在ARC中内存管理都只需要使用这两个修饰符，而且<code>strong</code>是默认全局的，只要你写了<code>Objective-C</code>的对象，不自己添加<code>weak</code>的话，默认就是<code>strong</code>。<br> 5.1 <code>strong</code>表示这个对象的拥有者<br> 一个对象可以有多个拥有者，<code>strong</code>就是用来表示对这个对象的拥有。比如在往<code>NSMutableArray</code>中添加<code>Objective-C</code>对象，当你从数组中删除时，这个对象并不会释放。需要你手动设置为<code>nil</code>，或者在控制器的生命周期内，由系统来释放。<br> 5.2 <code>weak</code>指针变量仍然可以指向一个对象，但不是这个对象的拥有者<br> <code>weak</code>修饰的指针变量也可以指向对象，但不是这个对象的实际拥有者，也就是说<code>weak</code>修饰的指针变量如果想要释放，需要<code>strong</code>修饰的指针变量设置为<code>nil</code>，<code>weak</code>修饰的指针变量也会是一个<code>nil</code>，它指向的对象已经没有了，还需要设置<code>weak</code>修饰的指针变量为<code>nil</code>。</p>
</li>
<li><code>nonnull</code> <code>nullable</code> <code>null_resettable</code></li>
</ol>
<p>Xcode 6.3推出的<code>nullability annotations</code>，主要是为了更好的Swift与Objective-C混编，在Swift中有可选型的概念<code>!</code>,<code>?</code>，但是Objective-C中木有这玩意，于是Xcode 6.3中才有了这个，<br>从字面可以看出:<br>    <code>nonnull</code> 表示对象不应该为空，如果是这个修饰符对应的就是Swift中已经解包的对象或者<code>!</code><br>    <code>nullable</code>表示可以为<code>nil</code>或者<code>NULL</code>,对应是Swift中的可选<code>?</code><br>    <code>null_resettable</code>则是表达属性的空属性，该属性<code>setter</code>访问器允许将其设置为<code>nil</code>（设置该属性为默认值），但是它的<code>getter</code>访问器不会提供一个<code>nil</code>值（因为它提供了默认值），有一个这样的属性如UIView’s tintColor，如果没有tint颜色指定时它会提供一个默认的tint颜色值，对应的Swift使用是var tintColor:UIColor!</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ol>
<li>使用 <code>weak</code> 关键字，相比 <code>assign</code> 有什么不同<br> 一般情况下使用<code>weak</code>是避免循环引用，因为它不是对象的拥有者。而<code>assign</code>则是用于基本数据类型，或者C类型，而且<code>assign</code>是直接赋值，可能会导致一个问题。比如我想a和b共用一块内存，a是用<code>assign</code>修饰的，<code>a = b</code>，现在a使用的目的已经完成，我想释放这个内存，但是a并不知道b到底用没用完，如果此时a释放内存，而b还在使用，那么会导致应用程序crash，使用<code>weak</code>就能避免这样的问题。</li>
<li>怎么用 copy 关键字<br> <code>copy</code>拷贝的是内容,<code>retain</code>是拷贝的指针<pre><code>* 以`string`为例,如果`string`的属性为`copy`的话,那么传入参数为`NSString`的话,即为不可变`string`,`retain`,`copy`效果一样.
* 如果传入参数是`mutable`的话,那么`copy`拷贝内容,源随意变化不影响该属性的值.`retain`拷贝指针,源变化则属性值着变化,因为属性和源指向如何使用呢,通常在需要拷贝内容,但是副本和源不要互相影响的情况下使用.`*` 同一内存地址.
* 例如`array/dictionary`中,可能会需要一个副本来做一些操作(筛选,排序等),但是并不希望影响原始值,则可以使用`copy`
</code></pre></li>
<li>@property (copy) NSMutableArray *array; 这样写有什么问题吗<br> 因为用了<code>copy</code>, 内部会深拷贝一次, 指针实际指向的是<code>NSArray</code>, 所以如果调用<code>removeObject</code>和<code>addObject</code>方法的话, 会<code>unRecognized selector</code></li>
<li>如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？<br> 当一个对象发生改变时不影响另外一个对象，这里就需要使用<code>copy</code>关键字了，实现<code>NSCopying</code>协议，重写- <code>(id)copyWithZone:(NSZone *)zone</code>方法。<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(_name != name)</div><div class="line">    &#123;</div><div class="line">        _name = [name <span class="keyword">copy</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
<li>@protocol 和 category 中如何使用 @property<br> <code>@protocol</code>可以通过关键字:<code>@synthesize</code>或者在继承的类里面重新定义一次该属性(<code>extension</code>里面定义是不行的)<br> <code>category</code>通过关联:<code>objc_setAssociatedObject</code>/<code>objc_getAssociatedObject</code></li>
<li><code>@property</code> 的本质是什么？<code>ivar</code>、<code>getter</code>、<code>setter</code> 是如何生成并添加到这个类中的<br> <code>@property</code>本质是定义一个<code>objc_property</code>结构体<br><strong>如何生成目前不清楚</strong></li>
<li><code>weak</code>属性需要在<code>dealloc</code>中置<code>nil</code>么<br> 不需要，因为weak会自动设置nil</li>
<li><code>@synthesize</code>和@<code>dynamic</code>分别有什么作用<br> 关于@synthesize（现在已经不需要在写这个属性了，它是用来生成getter和setter方法）<br> <code>@dynamic</code> 就是要告诉编译器<code>getter</code>和<code>setter</code>方法会在程序运行或者用到动态绑定的方式，以便让编译器通过编译，这个主要要在<code>NSManagerObject</code>上。</li>
<li><code>ARC</code>下，不显式指定任何属性关键字时，默认的关键字都有哪些<br> 在默认情况下，所有的实例变量和局部变量都是<code>strong</code>类型的。</li>
<li>用<code>@property</code>声明的<code>NSString</code>（或<code>NSArray</code>，<code>NSDictionary</code>）经常使用<code>copy</code>关键字，为什么？如果改用strong关键字，可能造成什么问题<br>因为不想改变了其中的值后把原来的值也跟着改变了，用了<code>strong</code>后会出现这样的状况。</li>
<li>什么是ARC<br>请阅读，然后随便谈谈你的理解即可。<br>ARC是为了解决下面几个问题<ul>
<li>当我们要释放一个堆内存时，首先要确定指向这个堆空间的指针都被<code>release</code>了。（避免提前释放）</li>
<li>释放指针指向的堆空间，首先要确定哪些指针指向同一个堆，这些指针只能释放一次。（<code>MRC</code>下即谁创建，谁释放，避免重复释放）</li>
<li>模块化操作时，对象可能被多个模块创建和使用，不能确定最后由谁去释放。</li>
<li>多线程操作时，不确定哪个线程最后使用完毕<br><a href="http://onevcat.com/2012/06/arc-hand-by-hand/" target="_blank" rel="external">手把手教你ARC——iOS/Mac开发ARC入门和使用</a><br><a href="http://www.oschina.net/translate/objc-automatic-reference-counting-in-xcode-explained" target="_blank" rel="external">理解 Objective-C 的 ARC</a></li>
</ul>
</li>
<li>请解释以下keywords的区别： <code>assign</code> vs <code>weak</code>, <code>block</code> vs <code>weak</code><br><code>assign</code>适用于基本数据类型，<code>weak</code>是适用于<code>NSObject</code>对象，并且是一个弱引用。<ul>
<li><code>assign</code>其实也可以用来修饰对象，那么我们为什么不用它呢？<br>因为被<code>assign</code>修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为<code>nil</code>。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。</li>
<li><code>weak</code>修饰的对象在释放之后，指针地址会被置为<code>nil</code>。所以现在一般弱引用就是用<code>weak</code>。</li>
<li><code>block</code>是用来修饰一个变量，这个变量就可以在<code>block</code>中被修改，使用<code>block</code>修饰的变量在<code>block</code>代码快中会被<code>retain</code>（<code>ARC</code>下，<code>MRC</code>下不会<code>retain</code>） </li>
<li><code>weak</code>：使用<code>weak</code>修饰的变量不会在<code>block</code>代码块中被<code>retain</code>同时，在ARC下，要避免<code>block</code>出现循环引用 <code>weak typedof(self)weakSelf = self</code></li>
</ul>
</li>
<li><code>__block</code>在<code>arc</code>和<code>非arc</code>下含义一样吗<br>是不一样的，ARC会retain，非ARC不会。</li>
<li>描述一个你遇到过的<code>retain</code> cycle例子<br>在<code>viewController</code>中避免循环引用<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ downloadData:^(<span class="keyword">id</span> responseData)&#123;</div><div class="line">    _data = responseData;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>  
解决办法<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> ViewController *weakSelf = <span class="keyword">self</span>;</div><div class="line">[ downloadData:^(<span class="keyword">id</span> responseData)&#123;</div><div class="line">    weakSelf.data = responseData;</div><div class="line">&#125;];</div></pre></td></tr></table></figure></li>
<li><code>+(void)load;</code> <code>+(void)initialize;</code>有什么用处<br>在Objective-C中，<code>runtime</code>会自动调用每个类的两个方法。<code>+load</code>会在类初始加载时调用，<code>+initialize</code>会在第一次调用类的类方法或实例方法之前被调用。这两个方法是可选的，且只有在实现了它们时才会被调用。<br>共同点：两个方法都只会被调用一次。</li>
<li><code>UIView</code>和<code>CALayer</code>有什么关系<ul>
<li><code>UIView</code>是iOS界面元素的基础，所有的界面元素都继承于它。它本身是由<code>CoreAnimation</code>来实现的，它真正绘图的部分是由一个<code>CALayer</code>的类来管理的，<code>UIView</code>本身更像是一个<code>CALayer</code>的管理器。</li>
<li><code>UIView</code>都存在一个<code>layer</code>属性，可以访问到<code>CALayer</code>的实例。</li>
<li><code>UIView</code>的<code>CALayer</code>类也存在一个<code>view</code>树结构，可以像<code>UIView</code>一样进行添加</li>
<li><code>UIView</code>的<code>layer</code>树在系统内部，由系统来维护，它存在着三棵树，分别是逻辑树，动画树，显示树</li>
</ul>
</li>
<li>如何高性能的给<code>UIImageView</code>加个圆角<ul>
<li>使用贝塞尔曲线来切割图片</li>
<li>使用<code>Quartz2D</code>直接绘制图片</li>
</ul>
</li>
<li>使用<code>drawRect</code>有什么影响<br><code>drawRect</code>方法依赖<code>Core Graphics</code>框架来进行自定义的绘制，但这种方法主要的缺点就是它处理<code>touch</code>事件的方式：每次按钮被点击后，都会用<code>setNeddsDisplay</code>进行强制重绘；而且不止一次，每次单点事件触发两次执行。这样的话从性能的角度来说，对<code>CPU</code>和内存来说都是欠佳的。</li>
<li>SDWebImage里面给UIImageView加载图片的逻辑是什么样的<br>详情看<a href="http://www.cnblogs.com/6duxz/p/4159572.html" target="_blank" rel="external">最新版SDWebImage的使用</a></li>
<li>麻烦你设计个简单的图片内存缓存器<br>图片的内存缓存，可以考虑将图片数据保存到一个数据模型中，所以在程序运行时这个模型都存在内存中，一定要具备移除策略，即释放数据模型。</li>
<li>讲讲你用<code>Instrument</code>优化动画性能的经历<br><a href="http://www.hrchen.com/2013/05/performance-with-instruments/" target="_blank" rel="external">怎么使用instrument</a></li>
<li><code>loadView</code>是干嘛用的<br>当你访问一个<code>ViewController</code>的<code>view</code>属性时，如果此时<code>view</code>的值是<code>nil</code>，那么，<code>ViewController</code>就会自动调用<code>loadView</code>这个方法。这个方法就会加载或者创建一个<code>view</code>对象，赋值给<code>view</code>属性。<br><code>loadView</code>默认做的事情是：如果此<code>ViewController</code>存在一个对应的<code>nib</code>文件，那么就加载这个<code>nib</code>。否则，就创建一个<code>UIView</code>对象。<br>如果你用<code>Interface Builder</code>来创建界面，那么不应该重载这个方法。<br>如果你想自己创建<code>view</code>对象，那么可以重载这个方法。此时你需要自己给<code>view</code>属性赋值。你自定义的方法不应该调用<code>super</code>。如果你需要对<code>view</code>做一些其他的定制操作，在<code>viewDidLoad</code>里面去做。<br><a href="http://www.cnblogs.com/dyllove98/archive/2013/06/06/3123005.html" target="_blank" rel="external">iOS 的loadView 及使用loadView中初始化View注意的问题</a></li>
<li>用过<code>CoreData</code>或者<code>SQLite</code>吗？读写是分线程的吗？遇到过死锁没？咋解决的<br>参考<a href="http://blog.csdn.net/hanangellove/article/details/44966769" target="_blank" rel="external">CoreData与SQLite的线程安全</a></li>
<li><code>GCD</code>里面有哪几种<code>Queue</code>？你自己建立过串行<code>queue</code>吗？背后的线程模型是什么样的<ul>
<li>主队列 <code>dispatch_main_queue();</code> 串行 ，更新UI</li>
<li>全局队列 <code>dispatch_global_queue();</code> 并行，四个优先级：<code>background</code>，<code>low</code>，<code>default</code>，<code>high</code></li>
<li>自定义队列 <code>dispatch_queue_t queue;</code> 可以自定义是并行：<code>DISPATCH_QUEUE_CONCURRENT</code>或者串行<code>DISPATCH_QUEUE_SERIAL</code></li>
</ul>
</li>
<li>为什么其他语言里叫函数调用， <code>Objective-C</code>里则是给对象发消息（或者谈下对<code>runtime</code>的理解）<br>网上关于<code>runtime</code>的资料非常多，其实这方面在平时的开发中使用非常非常之少，底层的黑魔法。<br><a href="http://www.jianshu.com/p/25a319aee33d" target="_blank" rel="external">Objective-C特性：Runtime</a><br><a href="http://tech.glowing.com/cn/objective-c-runtime/" target="_blank" rel="external">Objective-C Runtime</a></li>
<li>什么是<code>method swizzling</code><br>在Objective-C中调用一个方法，其实是向一个对象发送消息，查找消息的唯一依据是<code>selector</code>的名字。利用<code>Objective-C</code>的动态特性，可以实现在运行时偷换<code>selector</code>对应的方法实现，达到给方法挂钩的目的。<br><a href="http://blog.csdn.net/yiyaaixuexi/article/details/9374411" target="_blank" rel="external">详细的案例</a></li>
<li>runtime 如何实现 weak 属性 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">OBJC_ASSOCIATION_ASSIGN</div><div class="line">OBJC_ASSOCIATION_RETAIN_NONATOMIC</div><div class="line">OBJC_ASSOCIATION_COPY_NONATOMIC</div><div class="line">OBJC_ASSOCIATION_RETAIN</div><div class="line">OBJC_ASSOCIATION_COPY</div><div class="line">objc_setAssociatedObject(<span class="keyword">self</span>, &amp;myKey, anObject, OBJC_ASSOCIATION_RETAIN);</div></pre></td></tr></table></figure>
可以自定义<code>weak</code>来实现内存管理，Apple已经为我们准备了常量。<br>参考<br><a href="http://nshipster.cn/associated-objects/" target="_blank" rel="external">Associated Objects</a><br><a href="http://southpeak.github.io/blog/2014/10/30/objective-c-runtime-yun-xing-shi-zhi-er-:cheng-yuan-bian-liang-yu-shu-xing/" target="_blank" rel="external">Objective-C Runtime 运行时之二：成员变量与属性</a></li>
<li><code>objc</code>中向一个<code>nil</code>对象发送消息将会发生什么<br><code>objc</code>的特性是允许对一个 <code>nil</code> 对象发送消息不会 Crash，因为会被忽略掉。</li>
<li>什么时候会报<code>unrecognized selector</code>的异常<br>调用一个不存在的方法</li>
<li><code>objc</code>中向一个对象发送消息<code>[obj foo]</code>和<code>objc_msgSend()</code>函数之间有什么关系<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[obj foo];</div><div class="line"><span class="comment">//编译时会变成</span></div><div class="line">objc_msgSend(obj,<span class="keyword">@selector</span>(foo));</div><div class="line"></div><div class="line">[obj foo:parameter];</div><div class="line"><span class="comment">//编译时会变成</span></div><div class="line">objc_msgSend(obj,<span class="keyword">@selector</span>(foo:),parameter);</div></pre></td></tr></table></figure></li>
<li>一个objc对象如何进行内存布局<br>可参考<a href="http://www.cnblogs.com/csutanyu/archive/2011/12/12/objective-c_memory_layout.html" target="_blank" rel="external">Objective-C内存布局</a></li>
<li>一个objc对象的isa的指针指向什么？有什么作用？<br>isa是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：元类（meteClass）也是类，它也是对象。元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。</li>
<li>下面的代码输出什么<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Son</span> : <span class="title">Father</span></span></div><div class="line">- (<span class="keyword">id</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">super</span> <span class="keyword">class</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
输出Son</li>
<li>runtime如何通过selector找到对应的IMP地址<br>id (*IMP)(id, SEL, …)<br>这个函数使用当前CPU架构实现的标准的C调用约定。第一个参数是指向self的指针(如果是实例方法，则是类实例的内存地址；如果是类方法，则是指向元类的指针)，第二个参数是方法选择器(selector)，接下来是方法的实际参数列表。<br>前面介绍过的SEL就是为了查找方法的最终实现IMP的。由于每个方法对应唯一的SEL，因此我们可以通过SEL方便快速准确地获得它所对应的IMP，查找过程将在下面讨论。取得IMP后，我们就获得了执行这个方法代码的入口点，此时，我们就可以像调用普通的C语言函数一样来使用这个函数指针了。<br>通过取得IMP，我们可以跳过Runtime的消息传递机制，直接执行IMP指向的函数实现，这样省去了Runtime消息传递过程中所做的一系列查找操作，会比直接向对象发送消息高效一些。</li>
</ol>
<h2 id="Hybrid-混合开发"><a href="#Hybrid-混合开发" class="headerlink" title="Hybrid 混合开发"></a>Hybrid 混合开发</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 align=&quot;center&quot;&gt;iOS有用的面试题大集合&lt;/h1&gt;

&lt;h2 id=&quot;面试题从何处得来&quot;&gt;&lt;a href=&quot;#面试题从何处得来&quot; class=&quot;headerlink&quot; title=&quot;面试题从何处得来&quot;&gt;&lt;/a&gt;面试题从何处得来&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a
    
    </summary>
    
      <category term="资源" scheme="https://huos3203.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="汇总" scheme="https://huos3203.github.io/tags/%E6%B1%87%E6%80%BB/"/>
    
      <category term="资源" scheme="https://huos3203.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="面试" scheme="https://huos3203.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Awsome Apple Develop Guide</title>
    <link href="https://huos3203.github.io/2017/01/22/Awsome%20Apple%20Develop%20Guide/"/>
    <id>https://huos3203.github.io/2017/01/22/Awsome Apple Develop Guide/</id>
    <published>2017-01-22T03:03:30.000Z</published>
    <updated>2017-01-22T08:57:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>此文档是Apple平台开发所使用语言的主流学习资源</p>
<h1 id="iOS开发者博客"><a href="#iOS开发者博客" class="headerlink" title="iOS开发者博客"></a>iOS开发者博客</h1><ul>
<li>使用 <a href="https://github.com/tangqiaoboy/iOSBlogCN" target="_blank" rel="external">iOSBlogCN</a>添加或者订阅</li>
</ul>
<h1 id="从社区学习知识"><a href="#从社区学习知识" class="headerlink" title="从社区学习知识"></a>从社区学习知识</h1><ul>
<li><a href="http://weekly.ios-wiki.com/" target="_blank" rel="external">iOS技术周报</a></li>
<li><a href="http://objccn.io/" target="_blank" rel="external">objc中国</a></li>
<li><a href="http://www.cocoachina.com/" target="_blank" rel="external">cocoachina</a></li>
<li><a href="http://swiftist.org/" target="_blank" rel="external">Swift社区</a></li>
</ul>
<h1 id="从iOS面试题总结"><a href="#从iOS面试题总结" class="headerlink" title="从iOS面试题总结"></a>从iOS面试题总结</h1><p><a href="iOS-usefulInterviewquestions-zh_CN">iOS有用的面试题</a></p>
<h1 id="建议－学习iOS之前快速预览一下"><a href="#建议－学习iOS之前快速预览一下" class="headerlink" title="建议－学习iOS之前快速预览一下"></a>建议－学习iOS之前快速预览一下</h1><p><a href="http://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">MAC开发环境配置</a></p>
<p><a href="http://www.zhihu.com/question/24002984" target="_blank" rel="external">什么是Swift，如何评价 Swift 语言？</a></p>
<p><a href="http://zh.wikipedia.org/zh-cn/Objective-C" target="_blank" rel="external">了解一下Objective-C是什么</a></p>
<p><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external">iOS开发60分钟入门</a></p>
<p><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html#//apple_ref/doc/uid/TP40012668-CH2-SW1" target="_blank" rel="external">Start Developing iOS Apps Today</a></p>
<p><a href="http://www.jianshu.com/p/8472ba0f2bb6" target="_blank" rel="external">从零开始学iOS开发的15条建议</a></p>
<p><a href="http://limboy.me/ios/2014/12/31/learning-ios.html" target="_blank" rel="external">自学iOS开发的一些经验</a></p>
<p><a href="http://www.cocoachina.com/special/fornew.html" target="_blank" rel="external">学习路线</a></p>
<h2 id="语言学习"><a href="#语言学习" class="headerlink" title="语言学习"></a>语言学习</h2><p>这里包括了Swift，Objective-C，C，C++</p>
<p><a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese" target="_blank" rel="external">中文版 Apple 官方 Swift 教程《The Swift Programming Language》1.2</a></p>
<p><a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="external">中文版 Apple 官方 Swift 教程《The Swift Programming Language》2.0</a></p>
<p><a href="https://github.com/raywenderlich/swift-style-guide" target="_blank" rel="external">The Official raywenderlich.com Swift Style Guide</a></p>
<p><a href="http://swift.gg/2015/08/11/raywenderlich-swift-style-guide/" target="_blank" rel="external">The Official raywenderlich.com Swift Style Guide 中文版</a></p>
<p><a href="https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/UsingSwiftwithCocoaandObjective-C%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C.md" target="_blank" rel="external">Using Swift with Cocoa and Objective-C中文手册</a></p>
<p><a href="http://c-faq-chn.sourceforge.net/ccfaq/index.html" target="_blank" rel="external">C 语言常见问题集</a></p>
<p><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external">Google Objective-C Style Guide 中文版</a></p>
<p><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external">Google C++ Style Guide 中文版</a></p>
<p><a href="https://github.com/oa414/objc-zen-book-cn" target="_blank" rel="external">禅与 Objective-C 编程艺术 （Zen and the Art of the Objective-C Craftsmanship 中文翻译</a></p>
<h2 id="免费视频资源"><a href="#免费视频资源" class="headerlink" title="免费视频资源"></a>免费视频资源</h2><p><a href="http://www.imooc.com/learn/127" target="_blank" rel="external">玩儿转Swift</a></p>
<p><a href="http://www.imooc.com/learn/218" target="_blank" rel="external">征战Objective-C</a></p>
<p><a href="http://v.163.com/special/opencourse/ios7.html" target="_blank" rel="external">斯坦福大学公开课：iOS 7应用开发</a></p>
<p><a href="https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift" target="_blank" rel="external">斯坦福大学公开课：Swift开发iOS 8应用－中文字幕</a></p>
<p><a href="https://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099" target="_blank" rel="external">斯坦福大学公开课：Swift开发iOS 8应用</a></p>
<p><a href="https://github.com/qiaoxueshi/WWDC_2015_Video_Subtitle" target="_blank" rel="external">WWDC 2015 Video 英文字幕 (共104个)</a></p>
<p><a href="https://github.com/6david9/WWDC2015" target="_blank" rel="external">WWDC2015下载链接</a></p>
<h2 id="精粹"><a href="#精粹" class="headerlink" title="精粹"></a>精粹</h2><p><a href="https://github.com/nixzhu/dev-blog" target="_blank" rel="external">一些 iOS / Web 开发相关的翻译或原创博客文章</a></p>
<p><a href="https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques" target="_blank" rel="external">iOS-Core-Animation-Advanced-Techniques</a></p>
<p><a href="https://github.com/objccn/articles" target="_blank" rel="external">objc.io中文翻译版本</a></p>
<p><a href="https://github.com/ipader/SwiftGuide" target="_blank" rel="external">这份指南汇集了Swift语言主流学习资源，并以开发者的视角整理编排</a></p>
<p><a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="external">A curated list of awesome iOS UI/UX libraries</a></p>
<p><a href="https://github.com/shinobicontrols/iOS8-day-by-day" target="_blank" rel="external">iOS8-Day-by-Day blog series</a></p>
<p><a href="https://github.com/ShinobiControls/iOS9-day-by-day/" target="_blank" rel="external">iOS9 Day-by-Day blog series</a></p>
<p><a href="https://github.com/matteocrippa/awesome-swift" target="_blank" rel="external">matteocrippa/awesome-swift</a></p>
<p><a href="https://github.com/Wolg/awesome-swift" target="_blank" rel="external">Wolg/awesome-swift</a></p>
<p><a href="https://github.com/vsouza/awesome-ios" target="_blank" rel="external">awesome-ios</a></p>
<h2 id="Swift-Objective-C-C-C-设计-资源集合"><a href="#Swift-Objective-C-C-C-设计-资源集合" class="headerlink" title="Swift | Objective-C | C/C++ | 设计 资源集合"></a>Swift | Objective-C | C/C++ | 设计 资源集合</h2><p><a href="http://www.jianshu.com/p/f1208b5e42d9" target="_blank" rel="external">Alamofire网络库基础教程</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxNDI5NzEzNg==&amp;mid=204340894&amp;idx=1&amp;sn=cf7d5b0a9e3a198a39111fb07b0685e5#rd" target="_blank" rel="external">C 语言中的指针和内存泄漏</a></p>
<p><a href="http://www.ideawu.net/blog/archives/878.html" target="_blank" rel="external">C/C++编程的现代习惯</a></p>
<p><a href="http://onevcat.com/2015/01/swift-pointer/" target="_blank" rel="external">Swift指针的使用</a></p>
<p><a href="http://swifter.tips/" target="_blank" rel="external">Swift tips</a></p>
<p><a href="https://github.com/ming1016/study" target="_blank" rel="external">Study</a></p>
<p><a href="https://github.com/100mango/zen" target="_blank" rel="external">iOS心得</a></p>
<p><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="external">A curated list of delightful iOS resources.</a></p>
<p><a href="https://github.com/CocoaChinaTranslationTeam/Excellent-Articles-Translations" target="_blank" rel="external">优秀外文翻译资源集合</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207789673&amp;idx=1&amp;sn=15683e2b9c939f9e21084b4e65df9b92#rd" target="_blank" rel="external">详解Swift中的iOS设计模式</a></p>
<p><a href="http://www.yming9.com/?p=579" target="_blank" rel="external">在iOS8 下用Swift 创建自定义的键盘</a></p>
<p><a href="http://www.devtf.cn/?p=462" target="_blank" rel="external">Swift和自动引用计数(ARC)整理之强，弱和无主引用</a></p>
<p><a href="http://lvwenhan.com/ios/454.html" target="_blank" rel="external">自己动手写一个 iOS 网络请求库（一）—— NSURLSession 初探</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209907200&amp;idx=1&amp;sn=4c3d467cc76980209ed55ae8d08694f5#rd" target="_blank" rel="external">ReactiveCocoa 3.0 初窥</a></p>
<p><a href="http://www.jianshu.com/p/2dc639b2675a" target="_blank" rel="external">Swift 2 有哪些新特性</a></p>
<p><a href="http://www.cocoachina.com/cms/wap.php?action=article&amp;id=12237" target="_blank" rel="external">如何使用Instruments诊断App（Swift版）：起步</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209755668&amp;idx=1&amp;sn=383f306a3cc8cf2463a0a2c951ce17f6#rd" target="_blank" rel="external">理解 ARC 下的循环引用</a></p>
<p><a href="http://www.devtalking.com/articles/what-is-new-in-swift/" target="_blank" rel="external">Swift 2.0初探</a></p>
<p><a href="http://www.cocoachina.com/industry/20140103/7651.html?utm_campaign=ios_wiki_dev_issue_1&amp;utm_source=ios_wiki_com&amp;utm_medium=website" target="_blank" rel="external">2013 CocoaChina微信精选之技术汇</a></p>
<p><a href="http://www.imooc.com/wenda/detail/238393" target="_blank" rel="external">理解 Objective-C 的 ARC</a></p>
<p><a href="http://www.jianshu.com/p/50b63a221f09" target="_blank" rel="external">iOS开发的一些奇巧淫技</a></p>
<p><a href="http://www.jianshu.com/p/2fa080673842" target="_blank" rel="external">我推荐的一些iOS开发书单 叶孤城___</a></p>
<p><a href="http://www.jianshu.com/p/9e1f0b44935c" target="_blank" rel="external">iOS性能优化</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206525720&amp;idx=1&amp;sn=61ad896414bd492f5dee7a46c1753b50#rd" target="_blank" rel="external">iOS 调试核对清单</a></p>
<p><a href="http://www.jianshu.com/p/e28e8f5c7578?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">iOS APP 测试点摘要</a></p>
<p><a href="http://toutiao.io/r/z71jv" target="_blank" rel="external">GCD使用经验与技巧浅谈</a></p>
<p><a href="http://xuexuefeng.com/autolayout/" target="_blank" rel="external">iOS 开发实践之 Auto Layout</a></p>
<p><a href="http://www.jianshu.com/p/9c35432ec7a4?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">I Found You! 正则表达式!</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206617040&amp;idx=1&amp;sn=35c497c91047130c96490b1e7b9a3fa5#rd" target="_blank" rel="external">iOS 开发中的消息传递机制</a></p>
<p><a href="http://www.jianshu.com/p/6b7d54b3f88b?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">iOS扫一扫功能开发</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206668083&amp;idx=1&amp;sn=1661f83ff6d5e1f1b75eba9176e1b640#rd" target="_blank" rel="external">给游戏开发者们的 7 个制作建议</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206705810&amp;idx=1&amp;sn=32beff0e768d167f9a76a2be003d0886#rd" target="_blank" rel="external">iOS另类的内存管理</a></p>
<p><a href="http://www.jianshu.com/p/613916eea37f?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">iOS runloop</a></p>
<p><a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/" target="_blank" rel="external">正确使用Block避免Cycle Retain和Crash</a></p>
<p><a href="http://tutuge.me/2015/03/29/bind-data-to-gcd-queue/" target="_blank" rel="external">为GCD队列绑定NSObject类型上下文数据-利用__bridge_retained(transfer)转移内存管理权</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207272218&amp;idx=1&amp;sn=fe72df0ae11997be7e0dac8cc06115aa#rd" target="_blank" rel="external">iOS事件分发机制（一） hit-Testing</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=207315755&amp;idx=1&amp;sn=3e48dbd35674882b46796ac9bd02ad10#rd" target="_blank" rel="external">iOS事件分发机制（二）：The Responder Chain</a></p>
<p><a href="http://blog.cnbang.net/tech/2729/" target="_blank" rel="external">iOS富文本组件的实现—DTCoreText源码解析 渲染篇</a></p>
<p><a href="http://blog.cnbang.net/tech/2630/" target="_blank" rel="external">iOS富文本组件的实现—DTCoreText源码解析 数据篇</a></p>
<p><a href="https://github.com/bboyfeiyu/iOS-tech-frontier/blob/master/issue-2/GCD%E6%A6%82%E8%BF%B0%E3%80%81%E8%AF%AD%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%A5%BD%E7%9A%84%E7%A4%BA%E4%BE%8B.md" target="_blank" rel="external">GCD概述、语法以及好的示例</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208119666&amp;idx=1&amp;sn=b85d6532b7804cdeb2accb5e8aea3c38#rd" target="_blank" rel="external">通过减少动态派送提升性能</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206285714&amp;idx=5&amp;sn=2048f89ee84149bac671ce8e204ec277#rd" target="_blank" rel="external">NSString属性什么时候用copy，什么时候用strong?</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206321222&amp;idx=8&amp;sn=71171f2298c2ed6d72015b942733f607#rd" target="_blank" rel="external">NSRecursiveLock递归锁的使用</a></p>
<p><a href="http://cubernet.cn/blog/rootdaemon/" target="_blank" rel="external">在iOS上以root身份运行守护进程</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206483177&amp;idx=2&amp;sn=0431f8a7673bf6633643c23e1776fcdd#rd" target="_blank" rel="external">iOS开发中两个常见问题的处理</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206448996&amp;idx=3&amp;sn=895663ec96a8469820b54b6536975340#rd" target="_blank" rel="external">iOS 8增强的自动布局功能</a></p>
<p><a href="http://cubernet.cn/blog/theos1/" target="_blank" rel="external">Theos介绍</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206637839&amp;idx=7&amp;sn=d5719f4c59753143c288de6d6206832b#rd" target="_blank" rel="external">iOS中几种定时器 - 控制了时间，就控制了一切</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=208071791&amp;idx=5&amp;sn=8fd1f5ae65611a4de7ce3885db28dc6f#rd" target="_blank" rel="external">iOS view的frame和bounds之区别（位置和大小）</a></p>
<p><a href="http://www.jianshu.com/p/aa50e5350852?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo" target="_blank" rel="external">iOS应用程序的生命周期</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=207857740&amp;idx=2&amp;sn=95d11ae018381f7b711320f406f800ab#rd" target="_blank" rel="external">2015 Objective-C 三大新特性 | 干货</a></p>
<p><a href="http://www.olinone.com/?p=232" target="_blank" rel="external">“自释放”在iOS开发中的应用</a></p>
<p><a href="http://nshipster.cn/" target="_blank" rel="external">关注被忽略的 Objective-C、Swift 和 Cocoa 特性</a></p>
<p><a href="https://www.bloc.io/tutorials/swiftris-build-your-first-ios-game-with-swift#!/chapters/675" target="_blank" rel="external">Swift开发游戏步骤</a></p>
<p><a href="http://www.jianshu.com/p/d46fb9d72ddb?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">关于iOS编码规范</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206155008&amp;idx=1&amp;sn=360b4f02a9f9aea2cdd21f9253140276#rd" target="_blank" rel="external">Objective-C开发编码规范（一）</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208035695&amp;idx=2&amp;sn=b5069f3429308204dec4dd459bc4652f#rd" target="_blank" rel="external">Objective-C开发编码规范（二）</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206573834&amp;idx=5&amp;sn=b18dc313960fada8e84b76efabd3175c#rd" target="_blank" rel="external">Swift扩展的三个微妙细节</a></p>
<p><a href="http://quotation.github.io/objc/2015/05/21/objc-runtime-ivar-access.html" target="_blank" rel="external">Objective-C类成员变量深度剖析</a></p>
<p><a href="http://cubernet.cn/blog/swift-1/" target="_blank" rel="external">Swift基础(一)</a></p>
<p><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external">iOS7人机界面指南</a></p>
<p><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external">iphone6 屏幕设计揭秘</a></p>
<p><a href="http://www.mobile-patterns.com/" target="_blank" rel="external">mobile设计</a></p>
<p><a href="http://www.jianshu.com/p/e7fc525f342d?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">iOS常用框架</a></p>
<p><a href="http://www.jianshu.com/p/47201e57d21a?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">iOS面试基础知识36题</a></p>
<p><a href="http://www.jianshu.com/p/ca75fa02cf1e" target="_blank" rel="external">GitHub 上排名前 50 的 Objective-C 项目简介</a></p>
<p><a href="http://www.jianshu.com/p/c5b0eb58b878" target="_blank" rel="external">一些知名App用到的第三方库汇总</a></p>
<p><a href="http://foggry.com/blog/2014/04/25/githubyou-xiu-xiang-mu-ios/" target="_blank" rel="external">Github优秀开源项目大全-iOS</a></p>
<p><a href="http://zixun.github.io/blog/2015/04/11/iosdan-yuan-ce-shi-xi-lie-dan-yuan-ce-shi-kuang-jia-xuan-xing/" target="_blank" rel="external">[iOS单元测试系列]单元测试框架选型</a></p>
<p><a href="https://github.com/linqiang/Demo" target="_blank" rel="external">购物商城的Demo</a></p>
<p><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="external">斯坦福大学公开课：iOS 7 应用开发 Demo</a></p>
<p><a href="https://github.com/Lax/iOS-Swift-Demos" target="_blank" rel="external">iOS-Swift-Demos</a></p>
<p><a href="https://github.com/numbbbbb/Accessibility-Programming-Guide-for-iOS" target="_blank" rel="external">iOS 无障碍开发指导</a></p>
<p><a href="https://github.com/CocoaChinaTranslationTeam/TestingWithXcodeDocsCN" target="_blank" rel="external">TestingWithXcode中文文档</a></p>
<p><a href="http://ourcoders.com/thread/show/117/" target="_blank" rel="external">苹果Xcode帮助文档阅读指南</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209849033&amp;idx=2&amp;sn=59b5aa163d0be134afbbe951e55ea708#rd" target="_blank" rel="external">iOS项目的持续集成与管理</a></p>
<p><a href="http://www.coderyi.com/archives/751" target="_blank" rel="external">（译）WebViewJavascriptBridge－Obj-C和JavaScript互通消息的桥梁</a></p>
<p><a href="http://www.jianshu.com/p/6376149a2c4c?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">截获导航控制器系统返回按钮的点击pop及右滑pop事件</a></p>
<p><a href="http://beauty-soft.net/blog/ceiba/Ios/20140102/680.html" target="_blank" rel="external">UITableView常用属性和方法</a></p>
<p><a href="http://www.devtalking.com/articles/swift-access-control/" target="_blank" rel="external">Swift新特性 – 访问控制（Access Control）</a></p>
<p><a href="http://chengway.in/post/ji-zhu/viewcontroller-programming-guide/presenting-a-view-controller" target="_blank" rel="external">ViewController Programming Guide 笔记（一）</a></p>
<p><a href="http://www.cnblogs.com/haibindev/archive/2013/01/30/2880764.html" target="_blank" rel="external">HTTP Live Streaming直播(iOS直播)技术分析与实现</a></p>
<p><a href="http://ourui.github.io/blog/2014/01/22/mantle-use/" target="_blank" rel="external">Mantle 初步使用</a></p>
<p><a href="http://www.jianshu.com/p/76c588893b19?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">使用CAReplicatorLayer创建动画</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206678143&amp;idx=" target="_blank" rel="external">iOS动画——ViewAnimations</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=206718165&amp;idx=6&amp;sn=17c3a363f49df7a90a4e973b9c6d9af6#rd" target="_blank" rel="external">iOS动画——Layer Animations</a></p>
<p><a href="https://github.com/sxyx2008/awesome-ios-animation" target="_blank" rel="external">收集整理了下iOS平台下比较主流炫酷的几款动画框架</a></p>
<p><a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/" target="_blank" rel="external">Masonry介绍与使用实践(快速上手Autolayout)</a></p>
<p><a href="http://vit0.com/blog/2013/12/07/iosxue-xi-zhi-autolayout/" target="_blank" rel="external">iOS学习之Autolayout</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&amp;mid=208000068&amp;idx=2&amp;sn=a4fdbf1858302470cab8b0d4bf3484cd#rd" target="_blank" rel="external">如何实现一个不规则排列的图片布局算法 | 干货</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=209655681&amp;idx=2&amp;sn=9f89d8d1ecb393db58c3e064d713b9b5#rd" target="_blank" rel="external">响应式视图</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=208550104&amp;idx=1&amp;sn=83eca61921efd512c42ec9e68ca6b492#rd" target="_blank" rel="external">微软前员工：开发Apple Watch应用的27个技巧</a></p>
<p><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="external">Apple Watch开发初探</a></p>
<p><a href="http://www.cocoachina.com/applewatch/" target="_blank" rel="external">Apple Watch开发专题</a></p>
<p><a href="http://tech.meituan.com/DiveIntoMethodCache.html" target="_blank" rel="external">深入理解Objective-C：方法缓存</a></p>
<p><a href="http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/" target="_blank" rel="external">优化UITableViewCell高度计算的那些事</a></p>
<p><a href="http://objccn.io/issue-4-2/" target="_blank" rel="external">一个完整的Core Data应用</a></p>
<p><a href="http://oncenote.com/2014/10/21/Security-1-HTTPS/" target="_blank" rel="external">iOS安全系列之一：HTTPS</a></p>
<p><a href="http://www.90159.com/2015/08/10/ios-block-basic-article/" target="_blank" rel="external">block基础篇</a></p>
<p><a href="http://www.90159.com/2015/08/04/ios-block-ultimate/" target="_blank" rel="external">block终极篇</a></p>
<p><a href="http://www.jianshu.com/p/0b0d9b1f1f19" target="_blank" rel="external">关于iOS多线程，你看我就够了</a></p>
<h2 id="Objective-C-Run-time"><a href="#Objective-C-Run-time" class="headerlink" title="Objective-C Run time"></a>Objective-C Run time</h2><p><a href="http://www.jianshu.com/p/425a39d43d16?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo" target="_blank" rel="external">轻松学习之三——IMP指针的作用</a></p>
<p><a href="http://www.jianshu.com/p/d39f7d22db6c?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note" target="_blank" rel="external">轻松学习之二——iOS利用Runtime自定义控制器POP手势动画</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzE2Mjc2Ng==&amp;mid=206641670&amp;idx=1&amp;sn=3fbc0070451d33b4c87d0da616ead22d#rd" target="_blank" rel="external">Cocoa Runtime系统知识整理</a></p>
<p><a href="http://blog.cocoabit.com/2014-10-06-yi-li-jie-objctive-c-runtime/" target="_blank" rel="external">理解 Objective-C Runtime</a></p>
<p><a href="http://www.jianshu.com/p/41735c66dccb" target="_blank" rel="external">Objective-C isa 指针 与 runtime 机制</a></p>
<p><a href="http://tech.glowing.com/cn/objective-c-runtime/" target="_blank" rel="external">Objective-C Runtime</a></p>
<p><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="external">Objective-C Runtime</a></p>
<p><a href="http://www.jianshu.com/p/25a319aee33d" target="_blank" rel="external">Objective-C特性：Runtime</a></p>
<h2 id="项目结构经验"><a href="#项目结构经验" class="headerlink" title="项目结构经验"></a>项目结构经验</h2><p><a href="http://www.jianshu.com/p/77a948bcbc38" target="_blank" rel="external">iOS 项目的目录结构能看出你的开发经验</a></p>
<p><a href="https://github.com/makeLaugh/TWAPP" target="_blank" rel="external">iOS项目架构探索</a></p>
<p><a href="http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html" target="_blank" rel="external">iOS应用架构谈系列</a></p>
<h2 id="学习UI"><a href="#学习UI" class="headerlink" title="学习UI"></a>学习UI</h2><p><a href="http://segmentfault.com/a/1190000002412930" target="_blank" rel="external">iOS组件之UIScrollView详解</a></p>
<p><a href="http://tech.glowing.com/cn/practice-in-uiscrollview/" target="_blank" rel="external">UIScrollView 实践经验</a></p>
<p><a href="https://github.com/icepy/Awsome-Apple-Develop-Guide" target="_blank" rel="external">参考原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文档是Apple平台开发所使用语言的主流学习资源&lt;/p&gt;
&lt;h1 id=&quot;iOS开发者博客&quot;&gt;&lt;a href=&quot;#iOS开发者博客&quot; class=&quot;headerlink&quot; title=&quot;iOS开发者博客&quot;&gt;&lt;/a&gt;iOS开发者博客&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;a h
    
    </summary>
    
      <category term="资源" scheme="https://huos3203.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="iOS" scheme="https://huos3203.github.io/tags/iOS/"/>
    
      <category term="汇总" scheme="https://huos3203.github.io/tags/%E6%B1%87%E6%80%BB/"/>
    
      <category term="资源" scheme="https://huos3203.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>AR 开发资料汇[转]</title>
    <link href="https://huos3203.github.io/2017/01/22/AR%E5%BC%80%E5%8F%91%E8%B5%84%E6%96%99%E6%B1%87/"/>
    <id>https://huos3203.github.io/2017/01/22/AR开发资料汇/</id>
    <published>2017-01-22T02:55:38.000Z</published>
    <updated>2017-01-22T10:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结了AR开发的平台汇总，AR视频经典教程，AR主流资讯网站，Vuforia，EasyAR一些实例教程以及AR精选应用。</p>
<hr>
<h1 id="AR-平台"><a href="#AR-平台" class="headerlink" title="AR 平台"></a>AR 平台</h1><p><a href="https://developer.vuforia.com/" target="_blank" rel="external">Vuforia</a>–不用多说，最流行的AR应用开发引擎。<br><a href="http://www.easyar.cn/" target="_blank" rel="external">EasyAR</a>－－EasyAR是国内最专业的AR引擎,是国内首款投入应用的AR SDK。EasyAR是好用且免费的增强现实(Augmented Reality)开发者引擎。<br><a href="http://www.hiar.com.cn/" target="_blank" rel="external">HiAR</a>–HiAR 增强现实开发平台 HiAR 是亮风台信息科技打造的新一代移动增强现实(AR)开发平台,提供一整套世界领先的增强现实(AR)技术服务。<br><a href="http://www.voidar.net/" target="_blank" rel="external">太虚AR</a>－－成都米有网络科技有限公司自主研发集成于Unity3d实现增强现实的SDK开发包,虚拟现实SDK太虚官方网站。<br><a href="http://www.wikitude.com/" target="_blank" rel="external">Wikitude</a>–Wikitude是一家专门从事智能手机增强现实的应用，分别出品了两款应用Wikitude drive与Wikitude World Browser。<br><a href="http://www.intel.com/content/www/us/en/architecture-and-technology/realsense-overview.html" target="_blank" rel="external">Inter RealSense</a>–RealSense 3D是一套感知计算解决方案,包括世界上最小的3D摄像头,模块比两个硬币摞起来还薄,除了硬件外,英特尔还将提供驱动及软件等全套开发工具<br><a href="https://www.icreator.cn/" target="_blank" rel="external">ICreator</a>–依托于iCreator 3D, VR引擎,模型师可以快速创建交互式3D, VR内容,并支持微信平台传播,也为模型师提供可视化3D模型交易功能。<br><a href="http://www.tianyanar.com/" target="_blank" rel="external">天眼</a>－－天眼AR包括天眼云平台和天眼AR浏览器,用户需在天眼云平台完成“AR内容”制作,然后在天眼AR浏览器查看效果。<br><a href="https://developers.google.com/tango/" target="_blank" rel="external">Google Tango</a>–小编重点推荐。运动追踪(Motion Tracking)，深度感知(Depth Perception)和区域学习(Area Learning)。</p>
<hr>
<h1 id="AR-视频教程"><a href="#AR-视频教程" class="headerlink" title="AR 视频教程"></a>AR 视频教程</h1><p><a href="http://edu.manew.com/course/204" target="_blank" rel="external">Hololens 开发教程</a><br><a href="http://edu.manew.com/course/154" target="_blank" rel="external">增强现实技术分享</a><br><a href="http://edu.manew.com/course/172" target="_blank" rel="external">AR房地产</a><br><a href="http://edu.manew.com/course/175" target="_blank" rel="external">AR - 双卡互动</a><br><a href="http://edu.manew.com/course/162" target="_blank" rel="external">AR涂涂乐</a><br><a href="http://www.taikr.com/course/378" target="_blank" rel="external">Hololens 开发</a><br><a href="http://www.arinchina.com/video/list/149/" target="_blank" rel="external">Vuforia 公开课</a><br><a href="http://www.arinchina.com/video/show-1946.html" target="_blank" rel="external">Intel realSense制作面部捕捉小游戏</a><br><a href="http://www.arinchina.com/video/show-1972.html" target="_blank" rel="external">HiAR 视频播放</a><br><a href="http://www.arinchina.com/video/show-1965.html" target="_blank" rel="external">HiAR 水晶球</a><br><a href="http://www.arinchina.com/video/show-1982.html" target="_blank" rel="external">HiAR 瞬间拥有Apple Watch</a><br><a href="http://www.arvrschool.com/read.php?tid=325&amp;fid=21" target="_blank" rel="external">Vuforia 入门－基础－进阶</a></p>
<hr>
<h1 id="AR-网站"><a href="#AR-网站" class="headerlink" title="AR 网站"></a>AR 网站</h1><p><a href="http://arjiang.com/" target="_blank" rel="external">AR酱</a>–发现闪闪发光的AR从业者|增强现实|混合现实|虚拟现实<br><a href="http://www.arinchina.com/" target="_blank" rel="external">增强现实</a>－－增强现实中国ARinChina 是中国最大的专注于AR增强现实技术行业的门户网站。<br><a href="http://www.arvrschool.com/" target="_blank" rel="external">AR 学院</a>－－增强现实|虚拟现实技术交流社区、综合门户<br><a href="http://www.arcun.cn/" target="_blank" rel="external">AR 村</a>－－提供最新最快的AR增强现实信息,最权威的AR增强现实解读与产品发布.<br><a href="http://www.youziar.com/" target="_blank" rel="external">柚子AR</a>－－柚子AR打造专业的增强现实技术领域门户网站,提供AR资讯、AR技术、AR视频、AR游戏、AR设备等相关知识教程,柚子AR,打造增强现实行业交流聚集地。<br><a href="http://www.chinaar.com/" target="_blank" rel="external">ChinaAR</a>－－中国AR网,是国内第一家打造增强现实技术交流的一个自媒体平台!意在打造中国AR爱好者对AR技术的交流与学习的一个平台<br><a href="http://www.archina.org/" target="_blank" rel="external">AR 中国</a>－－AR中国是专注于增强现实技术的新闻门户网站<br><a href="http://www.arjishu.com/" target="_blank" rel="external">AR 技术网</a><br><a href="http://www.arcompetition.com/Default.aspx" target="_blank" rel="external">Realseer</a></p>
<hr>
<h1 id="增强现实视频合辑"><a href="#增强现实视频合辑" class="headerlink" title="增强现实视频合辑"></a>增强现实视频合辑</h1><p><a href="http://www.arcun.cn/thread-2111-1-1.html" target="_blank" rel="external">增强现实技术1-31篇技术视频教程合集</a></p>
<hr>
<h1 id="Vuforai-教程精选"><a href="#Vuforai-教程精选" class="headerlink" title="Vuforai 教程精选"></a>Vuforai 教程精选</h1><p><a href="http://www.arinchina.com/video/list/149/" target="_blank" rel="external">Vuforia 公开课</a>－－包括Vuforia 环境搭建，多图识别，单页翻页效果，模型自动旋转…<br><a href="http://www.arvrschool.com/read.php?tid=325&amp;fid=21" target="_blank" rel="external">VUforia 视频合辑</a><br><a href="http://www.chinaar.com/Vuforia/" target="_blank" rel="external">Vuforia 官方教程</a><br><a href="http://www.arvrschool.com/index.php?c=thread&amp;fid=36" target="_blank" rel="external">Vuforia 论坛</a><br><a href="http://dev.arinchina.com/qualcomm/1" target="_blank" rel="external">Vuforia 论坛</a><br><a href="http://www.manew.com/thread-92723-1-1.html?_dsign=51711fb9" target="_blank" rel="external">Vufoira 涂涂乐文章教程</a>－－讲解详细<br><a href="http://mec0825.net/blog/?p=126" target="_blank" rel="external">Vuforia 实现物体阴影特效</a><br><a href="http://www.th7.cn/Program/Android/201502/394666.shtml" target="_blank" rel="external">Vuforia 多图识别</a><br><a href="http://www.arinchina.com/video/show-1956.html" target="_blank" rel="external">Vuforia 脱卡</a><br><a href="http://lib.csdn.net/article/vr/20346" target="_blank" rel="external">Vuforia SDK—- AR开发vuforia实现拍照截屏功能</a></p>
<hr>
<h1 id="EasyAR教程精选"><a href="#EasyAR教程精选" class="headerlink" title="EasyAR教程精选"></a>EasyAR教程精选</h1><p><a href="http://www.manew.com/thread-98569-1-1.html" target="_blank" rel="external">Leap Motion+EasyAR AR手势开发教程</a><br><a href="http://www.manew.com/thread-98708-1-1.html" target="_blank" rel="external">AR从入门到精通开发系列教程(1)—搭建开发环境</a><br><a href="http://www.manew.com/thread-98992-1-1.html" target="_blank" rel="external">AR从入门到精通开发系列教程(2)–创建模型并互动</a><br><a href="http://www.arinchina.com/video/list/151/" target="_blank" rel="external">EasyAR 公开课</a><br><a href="http://www.easyar.cn/view/documentapi.html" target="_blank" rel="external">EasyAR 文档</a><br><a href="http://bbs.sightp.com/thread-249-1-1.html" target="_blank" rel="external">EasyAR官方Sample之涂涂乐</a><br><a href="http://www.arvrschool.com/index.php?c=thread&amp;fid=86" target="_blank" rel="external">EasyAR 论坛</a><br><a href="http://www.taidous.com/bbs/thread-42793-1-1.html" target="_blank" rel="external">带你开发类似Pokemon Go的AR游戏(1)</a><br><a href="http://www.taidous.com/bbs/thread-42825-1-1.html" target="_blank" rel="external">带你开发类似Pokemon Go的AR游戏(2)</a></p>
<hr>
<h1 id="HiAR-教程"><a href="#HiAR-教程" class="headerlink" title="HiAR 教程"></a>HiAR 教程</h1><p><a href="http://www.hiar.com.cn/doc-v1/main/home/" target="_blank" rel="external">HiAR 官方文档</a>－－看完之后就掌握的大概了，官方文档很详细了。<br><a href="http://www.arvrschool.com/index.php?c=thread&amp;fid=98" target="_blank" rel="external">HiAR 论坛</a><br><a href="http://dev.arinchina.com/hiar/1" target="_blank" rel="external">HiAR 论坛</a><br><a href="http://edu.51cto.com/course/course_id-5565.html" target="_blank" rel="external">HiAR SDK 教学视频</a></p>
<hr>
<h1 id="其他平台教程"><a href="#其他平台教程" class="headerlink" title="其他平台教程"></a>其他平台教程</h1><p><a href="http://www.arvrschool.com/index.php?c=thread&amp;fid=87" target="_blank" rel="external">太虚AR教程</a><br><a href="http://dev.arinchina.com/143/1" target="_blank" rel="external">太虚AR学习</a><br><a href="http://dev.arinchina.com/metaio/1" target="_blank" rel="external">Metaio 学习</a><br><a href="http://www.arinchina.com/video/list/150/" target="_blank" rel="external">Wikitude 公开课</a><br><a href="http://www.arinchina.com/video/list/154/" target="_blank" rel="external">太虚AR公开课</a></p>
<hr>
<h1 id="Google-tango教程"><a href="#Google-tango教程" class="headerlink" title="Google tango教程"></a>Google tango教程</h1><p><a href="https://pan.baidu.com/s/1i44Fpat" target="_blank" rel="external">Tango SDK 下载</a>（提取码：sh18）<br><a href="http://www.aiweibang.com/yuedu/147339646.html" target="_blank" rel="external">跟着Shrek Team学tango</a><br><a href="https://www.zhihu.com/question/37920173" target="_blank" rel="external">Project Tango 知识原理</a><br><a href="http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=308" target="_blank" rel="external">Google Tango 项目</a></p>
<hr>
<h1 id="AR-技术文章"><a href="#AR-技术文章" class="headerlink" title="AR 技术文章"></a>AR 技术文章</h1><p><a href="http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=344" target="_blank" rel="external">两家AR专利大厂在AR硬件方面的探索</a><br><a href="http://www.doc88.com/p-5661286681360.html" target="_blank" rel="external">增强现实技术及其应用</a><br><a href="http://www.vrguancha.net/a/start/baogaoku/2016/1102/2026.html" target="_blank" rel="external">全球首份VR/AR医疗健康产业应用创新报告</a></p>
<hr>
<h1 id="AR-精选论文"><a href="#AR-精选论文" class="headerlink" title="AR 精选论文"></a>AR 精选论文</h1><p><a href="http://www.docin.com/p-62167994.html" target="_blank" rel="external">基于ARM和OpenCV的增强现实平台研究</a><br><a href="http://www.docin.com/p-890798256.html" target="_blank" rel="external">基于Android的增强现实技术研究与实现</a><br><a href="http://www.docin.com/p-123294670.html" target="_blank" rel="external">增强现实应用技术研究</a><br><a href="http://www.docin.com/p-220443601.html" target="_blank" rel="external">基于ARTOOLKIT的增强现实技术在恐龙博物馆中的应用研究</a><br><a href="http://www.docin.com/p-983104432.html" target="_blank" rel="external">基于增强现实技术的虚拟留言墙系统的设计与实现</a><br><a href="http://www.docin.com/p-880664177.html" target="_blank" rel="external">基于智能移动终端的移动增强现实应用研究与实现 </a><br><a href="http://www.docin.com/p-1404596806.html" target="_blank" rel="external">基于unity3d的移动增强现实技术与应用研究分析</a><br><a href="http://www.docin.com/p-129257030.html" target="_blank" rel="external">增强现实中标记设计与识别方法研究</a><br><a href="http://www.docin.com/p-1124496600.html" target="_blank" rel="external">户外增强现实gis的应用研究</a><br><a href="http://www.docin.com/p-1701043105.html" target="_blank" rel="external">手持式增强现实神经导航关键技术研究及其系统建立</a><br><a href="http://www.docin.com/p-118637060.html" target="_blank" rel="external">基于ARToolKit平台的增强现实人机交互系统的若干问题研究</a><br><a href="http://www.docin.com/p-427198314.html" target="_blank" rel="external">基于ARToolkit的汉字识别系统的设计与实现</a><br><a href="http://www.docin.com/p-1609057674.html" target="_blank" rel="external">基于ARToolKit的增强现实技术在恐龙博物馆中的应用研究</a></p>
<hr>
<h1 id="AR应用精选"><a href="#AR应用精选" class="headerlink" title="AR应用精选"></a>AR应用精选</h1><p><a href="http://www.anzhi.com/soft_2519240.html" target="_blank" rel="external">视+AR</a>－－搭载独立开发的EasyAR引擎，全新视+2.0强势来袭！包罗丰富ar内容的增强现实浏览器，等你来体验！<br><a href="http://www.anzhi.com/soft_2699705.html" target="_blank" rel="external">AR</a>–这是一款增强现实AR的应用，主要分为三部分：LOL人物展示（带有经典音效），太空大战，手势交互（可以旋转与缩放）。突破现在AR格局，给玩家带来更多的乐趣。你只需一张个人身份证的反面，便会通过AR得到一个精彩的世界！<br><a href="http://neobear.com/index.php/home/product/product/" target="_blank" rel="external">小熊尼奥产品</a><br><a href="http://mec0825.net/blog/?p=107" target="_blank" rel="external">增强现实优秀应用</a>－－大部分是国外的。<br><a href="http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=298" target="_blank" rel="external">十一用12个案例SoLoMo，AR+LBS</a><br><a href="http://digi.163.com/15/0312/14/AKGVTR86001668IL.html" target="_blank" rel="external">让你脑洞大开的AR技术应用</a><br><a href="http://www.leiphone.com/news/201406/the-best-augmented-reality-apps.html" target="_blank" rel="external">13款最叫绝的增强现实应用</a><br><a href="http://www.arinchina.com/news/show-2573.html" target="_blank" rel="external">9款超赞的AR教育APP</a><br><a href="https://github.com/GeekLiB/AR-Source" target="_blank" rel="external">参考原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结了AR开发的平台汇总，AR视频经典教程，AR主流资讯网站，Vuforia，EasyAR一些实例教程以及AR精选应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;AR-平台&quot;&gt;&lt;a href=&quot;#AR-平台&quot; class=&quot;headerlink&quot; title=&quot;AR 平台&quot;&gt;&lt;/
    
    </summary>
    
      <category term="资源" scheme="https://huos3203.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="AR" scheme="https://huos3203.github.io/tags/AR/"/>
    
      <category term="LBS+AR" scheme="https://huos3203.github.io/tags/LBS-AR/"/>
    
      <category term="QQ红包" scheme="https://huos3203.github.io/tags/QQ%E7%BA%A2%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云之小直播开发</title>
    <link href="https://huos3203.github.io/2017/01/19/%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B9%8B%E5%B0%8F%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/"/>
    <id>https://huos3203.github.io/2017/01/19/腾讯云之小直播开发/</id>
    <published>2017-01-19T04:30:09.000Z</published>
    <updated>2017-01-22T10:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频服务"><a href="#视频服务" class="headerlink" title="视频服务"></a>视频服务</h1><ol>
<li><p><a href="https://www.qcloud.com/product/LVB" target="_blank" rel="external">直播LVB</a> </p>
<ol>
<li><a href="https://www.qcloud.com/document/product/267/7964" target="_blank" rel="external">开发指南</a></li>
</ol>
</li>
<li><p><a href="https://www.qcloud.com/product/mlvb" target="_blank" rel="external">移动直播MLVB</a></p>
<ol>
<li><a href="https://www.qcloud.com/document/product/454/7876" target="_blank" rel="external">开发指南</a><br>移动直播是一套移动终端直播解决方案的<code>集合</code>，它以免费源码的形式向您展示：如何利用腾讯云直播(LVB)、点播(VOD)、云通信(IM) 和 对象存储(COS)等几项服务组合构建出适合您的直播解决方案。</li>
</ol>
</li>
</ol>
<h2 id="快速集成方案"><a href="#快速集成方案" class="headerlink" title="快速集成方案"></a>快速集成方案</h2><img src="https://mc.qcloudimg.com/static/img/92a464fc26bbe52fea8816f8e6061ef3/image.jpg" class="导图" title="100% 200 集成导图 图片">
<p>如果您想要在自己的 APP 里集成直播推流和播放功能，下面三步就能达成目标：</p>
<ol>
<li>开通直播服务<br><a href="https://console.qcloud.com/live" target="_blank" rel="external">文档</a></li>
<li>集成 RTMP SDK<br><a href="https://www.qcloud.com/document/product/454/7880" target="_blank" rel="external">RTMP SDK - iOS 平台播放</a></li>
<li>对接直播流管理<ol>
<li><a href="https://www.qcloud.com/document/product/454/7915" target="_blank" rel="external">云端API - 如何获取推流URL？</a></li>
<li><a href="https://www.qcloud.com/document/product/454/7916" target="_blank" rel="external">云端API - 如何构建房间列表？</a></li>
<li><a href="https://www.qcloud.com/document/product/454/7920" target="_blank" rel="external">云端API - 如何管理直播流？</a><br>小直播是有腾讯云研发团队提供的一套开源源码集，致力于以 DEMO 的形式向您展示：如何利用腾讯云直播(LVB)、点播(VOD)、云通信(IM) 和 对象存储(COS)等几项服务组合构建出适合您的直播解决方案。</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视频服务&quot;&gt;&lt;a href=&quot;#视频服务&quot; class=&quot;headerlink&quot; title=&quot;视频服务&quot;&gt;&lt;/a&gt;视频服务&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.qcloud.com/product/LVB&quot; target=&quot;
    
    </summary>
    
      <category term="直播" scheme="https://huos3203.github.io/categories/%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="搭建" scheme="https://huos3203.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="直播" scheme="https://huos3203.github.io/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="腾讯云" scheme="https://huos3203.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="集成" scheme="https://huos3203.github.io/tags/%E9%9B%86%E6%88%90/"/>
    
      <category term="SDK" scheme="https://huos3203.github.io/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>迁移SVN库到git库保留branchs和tags</title>
    <link href="https://huos3203.github.io/2017/01/18/%E8%BF%81%E7%A7%BBSVN%E5%BA%93%E5%88%B0git%E5%BA%93%E4%BF%9D%E7%95%99branchs%E5%92%8Ctags/"/>
    <id>https://huos3203.github.io/2017/01/18/迁移SVN库到git库保留branchs和tags/</id>
    <published>2017-01-18T04:21:46.000Z</published>
    <updated>2017-01-19T07:18:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>SVN was a great advance in its day, but it’s now clear that distributed version control systems are the way forward and that Git is the de facto standard. Having helped many clients migrate from SVN to Git, here are my notes for a pain-free transition that will preserve the tags and branches in your SVN repository.</p>
<h1 id="First-import-to-a-local-staging-repo"><a href="#First-import-to-a-local-staging-repo" class="headerlink" title="First import to a local staging repo"></a>First import to a local staging repo</h1><h1 id="首先导入一个本地存储库"><a href="#首先导入一个本地存储库" class="headerlink" title="首先导入一个本地存储库"></a>首先导入一个本地存储库</h1><h2 id="在本地创建一个存储库的目录"><a href="#在本地创建一个存储库的目录" class="headerlink" title="在本地创建一个存储库的目录"></a>在本地创建一个存储库的目录</h2><figure class="highlight bash"><figcaption><span>新建目录</span><a href="http://www.sailmaker.co.uk/blog/2013/05/05/migrating-from-svn-to-git-preserving-branches-and-tags-3/#import-staging" target="_blank" rel="external">Create a local staging directory</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">mkdir staging</div><div class="line"><span class="built_in">cd</span> staging</div></pre></td></tr></table></figure>
<blockquote>
<p>注：staging 可以用任何你喜欢的字符串命名，也可以放在本地的任何目录中。</p>
</blockquote>
<h2 id="初始化git-svn"><a href="#初始化git-svn" class="headerlink" title="初始化git svn"></a>初始化git svn</h2><h3 id="For-a-standard-SVN-layout"><a href="#For-a-standard-SVN-layout" class="headerlink" title="For a standard SVN layout"></a>For a standard SVN layout</h3><figure class="highlight bash"><figcaption><span>标准初始化</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git svn init SVNRepo_ROOT_URL --stdlayout --prefix=svn/</div></pre></td></tr></table></figure>
<p><code>SVNRepo_ROOT_URL</code>: 这里svn_url是完全限定的URL下的标准目录，其目录下包括三个目录：<code>trunk</code>，<code>branches</code>， <code>tags</code>。<br><code>--prefix</code>: 强烈建议使用<code>svn/</code>作为分支和标签的前缀：设置为 <code>--prefix=svn/</code>. 这样有助于防止Git用户混淆原声的Git分支和标签。</p>
<h3 id="For-a-non-standard-SVN-layout"><a href="#For-a-non-standard-SVN-layout" class="headerlink" title="For a non-standard SVN layout"></a>For a non-standard SVN layout</h3><p>使用非标准的svn layout 来新建svn库，即可以根据自己喜好来自定义分支，标签目录：<br><figure class="highlight bash"><figcaption><span>非标准化</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git svn init SVN_URL -T Trunk -b Branches -t Tags --prefix=svn/</div></pre></td></tr></table></figure></p>
<h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><figure class="highlight bash"><figcaption><span>review</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">review the config</div></pre></td></tr></table></figure>
<p>会有以下信息输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn-remote.svn.url=svn://svn.example.com</div><div class="line">svn-remote.svn.fetch=some/path/trunk:refs/remotes/svn/trunk</div><div class="line">svn-remote.svn.tags=some/path/tags/*:refs/remotes/svn/tags/*</div></pre></td></tr></table></figure><br>高级用户可以在执行之前，修改相关配置。</p>
<h2 id="从远程SVN服务器拉取代码到新建的本地存储库"><a href="#从远程SVN服务器拉取代码到新建的本地存储库" class="headerlink" title="从远程SVN服务器拉取代码到新建的本地存储库"></a>从远程SVN服务器拉取代码到新建的本地存储库</h2><figure class="highlight bash"><figcaption><span>拉取</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git svn fetch</div></pre></td></tr></table></figure>
<h1 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h1><h2 id="status"><a href="#status" class="headerlink" title="status"></a>status</h2><figure class="highlight bash"><figcaption><span>status</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight bash"><figcaption><span>内容</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># On branch master</span></div><div class="line">nothing to commit (working directory clean)</div></pre></td></tr></table></figure></p>
<h2 id="查看分支信息"><a href="#查看分支信息" class="headerlink" title="查看分支信息"></a>查看分支信息</h2><figure class="highlight bash"><figcaption><span>branch</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch <span class="_">-a</span></div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">* master</div><div class="line">remotes/svn/tags/0.1.0</div><div class="line">remotes/svn/tags/0.2.0</div><div class="line">remotes/svn/tags/0.3.0</div><div class="line">remotes/svn/tags/0.4.0</div><div class="line">remotes/svn/trunk</div></pre></td></tr></table></figure><br>注意：SVN标记和分支（在这种情况下，没有任何分支机构）仅作为远程引用存在。</p>
<h2 id="SVN分支和标签转为本地git仓库中的标签和分支"><a href="#SVN分支和标签转为本地git仓库中的标签和分支" class="headerlink" title="SVN分支和标签转为本地git仓库中的标签和分支"></a>SVN分支和标签转为本地git仓库中的标签和分支</h2><h3 id="SVN-branches"><a href="#SVN-branches" class="headerlink" title="SVN branches"></a>SVN branches</h3><p>把远程svn分支转换为本地git仓库中的分支：<br><figure class="highlight bash"><figcaption><span>分支转分支</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> branch <span class="keyword">in</span> `git branch -r | grep <span class="string">"branches/"</span> | sed <span class="string">'s/ branches\///'</span>`; <span class="keyword">do</span></div><div class="line">git branch <span class="variable">$branch</span> refs/remotes/<span class="variable">$branch</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<h3 id="SVN-tags"><a href="#SVN-tags" class="headerlink" title="SVN tags"></a>SVN tags</h3><ol>
<li><p>把远程svn标签转换为本地git仓库中的标签 :</p>
<figure class="highlight bash"><figcaption><span>tags转换tags</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> `git branch -r | grep <span class="string">"tags/"</span> | sed <span class="string">'s/ tags\///'</span>`; <span class="keyword">do</span></div><div class="line">git tag <span class="_">-a</span> -m<span class="string">"Converting SVN tags"</span> <span class="variable">$tag</span> refs/remotes/<span class="variable">$tag</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
</li>
<li><p>把远程svn标签转换为本地git仓库中的分支:</p>
<figure class="highlight bash"><figcaption><span>标签转分支</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> `git branch -r | grep <span class="string">"tags/"</span> | sed <span class="string">'s/ tags\///'</span>`; <span class="keyword">do</span></div><div class="line">git branch <span class="variable">$tag</span> refs/remotes/<span class="variable">$tag</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Test-pushing-and-cloning-locally"><a href="#Test-pushing-and-cloning-locally" class="headerlink" title="Test pushing and cloning locally"></a>Test pushing and cloning locally</h1><p>Before pushing to the real host, it would be wise to test things by pushing to a local Git repo and then cloning the result.<br>在推送到正式远程库之前，可以通过向本地git库中推送测试信息。</p>
<h2 id="Make-a-local-bare-Git-repo"><a href="#Make-a-local-bare-Git-repo" class="headerlink" title="Make a local bare Git repo"></a>Make a local bare Git repo</h2><p>在git中的说法，<code>bare</code>库是一个不存在工作空间备份的库。<br><figure class="highlight bash"><figcaption><span>bare创建</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">mkdir <span class="built_in">test</span></div><div class="line"><span class="built_in">cd</span> <span class="built_in">test</span></div><div class="line">git init --bare</div></pre></td></tr></table></figure><br>这样，在<code>~/test</code>就生成了一个<code>bare</code>git库。</p>
<h2 id="Push-to-the-test-Git-repo"><a href="#Push-to-the-test-Git-repo" class="headerlink" title="Push to the test Git repo"></a>Push to the test Git repo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/staging</div><div class="line">git remote add <span class="built_in">test</span> `~/<span class="built_in">test</span>`</div><div class="line">git push --all <span class="built_in">test</span></div><div class="line">git push --tags <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>把<code>~/test</code>的放在反引号中，反引号在命令行中会<code>~</code>自动补全为一个绝对路径。如果你给一个绝对路径或URL，可以省略反引号。<br>尽管它的名字，<code>--all</code>选项不推送<code>tags</code>，所以需要对标签单独push操作。</p>
<h2 id="Clone-from-the-test-Git-repo"><a href="#Clone-from-the-test-Git-repo" class="headerlink" title="Clone from the test Git repo"></a>Clone from the test Git repo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">mkdir aclone</div><div class="line"><span class="built_in">cd</span> aclone</div><div class="line">git <span class="built_in">clone</span> ~/<span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>There should now be a clone with a working copy in ~/aclone/test.<br>在<code>~/aclone/test</code>目录中将会clone出一个工作空间备份，检查确保一切OK，这样就可以向正式服务器上推送。</p>
<h2 id="Push-your-staging-repo-to-the-real-host"><a href="#Push-your-staging-repo-to-the-real-host" class="headerlink" title="Push your staging repo to the real host"></a>Push your staging repo to the real host</h2><p>如果你是正式库服务器（github，coding）的管理员，为本地git库设置一个空的git库。<br>以<code>Unfuddle</code>为例,路径如下：<br><code>git@example.unfuddle.com:example/blah.git</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/staging</div><div class="line">git remote add unfuddle REAL_HOST_URL</div><div class="line">git push --all unfuddle</div><div class="line">git push --tags unfuddle</div></pre></td></tr></table></figure><br>在上面的例子中，制定了远程名：<code>unfuddle</code>而不是默认的<code>origin</code>。当然，你可以使用任何你喜欢的名字。</p>
<h1 id="Cleanup"><a href="#Cleanup" class="headerlink" title="Cleanup"></a>Cleanup</h1><h2 id="Remove-the-test-remote"><a href="#Remove-the-test-remote" class="headerlink" title="Remove the test remote"></a>Remove the test remote</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/staging</div><div class="line">git remote rm <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p><code>staging</code>库忽略<code>test</code>远程仓库.</p>
<h2 id="Discard-the-test-and-clone-repos"><a href="#Discard-the-test-and-clone-repos" class="headerlink" title="Discard the test and clone repos"></a>Discard the test and clone repos</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">rm -rf aclone</div><div class="line">rm -rf <span class="built_in">test</span></div></pre></td></tr></table></figure>
<h2 id="Either-keep-or-delete-the-staging-repo"><a href="#Either-keep-or-delete-the-staging-repo" class="headerlink" title="Either keep or delete the staging repo"></a>Either keep or delete the staging repo</h2><ol>
<li>如果需要Git和SVN之间频繁交互，建议保留<code>staging</code>库这会节省你非常耗时的初始化：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git svn fetch</div></pre></td></tr></table></figure></li>
<li>另一方面如果你确信svn是报废的，你可以删除分期回购：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~</div><div class="line">rm -rf staging</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="题外小贴士"><a href="#题外小贴士" class="headerlink" title="题外小贴士"></a>题外小贴士</h1><p>在局域网内访问server搭建服务器提供的git服务：<br><figure class="highlight bash"><figcaption><span>小贴士</span><a href="https://confluence.atlassian.com/fishkb/unable-to-clone-git-repository-due-to-self-signed-certificate-376838977.html" target="_blank" rel="external">SSL证书问题</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://.../git/mupdf.git</div><div class="line">错误：fatal: unable to access <span class="string">'https://..../git/mupdf.git/'</span>: SSL certificate problem: Invalid certificate chain</div></pre></td></tr></table></figure><br>解决：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global http.sslVerify <span class="literal">false</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SVN was a great advance in its day, but it’s now clear that distributed version control systems are the way forward and that Git is the d
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
      <category term="svn" scheme="https://huos3203.github.io/tags/svn/"/>
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="git" scheme="https://huos3203.github.io/tags/git/"/>
    
      <category term="git-svn" scheme="https://huos3203.github.io/tags/git-svn/"/>
    
  </entry>
  
  <entry>
    <title>Error Handling for Swift</title>
    <link href="https://huos3203.github.io/2017/01/11/ErrorHandlingForSwift/"/>
    <id>https://huos3203.github.io/2017/01/11/ErrorHandlingForSwift/</id>
    <published>2017-01-11T09:04:21.000Z</published>
    <updated>2017-01-12T03:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime.<br>Some operations aren’t guaranteed to always complete execution or produce a useful output. Optionals are used to represent the absence of a value, but when an operation fails, it’s often useful to understand what caused the failure, so that your code can respond accordingly.<br>As an example, consider the task of reading and processing data from a file on disk. There are a number of ways this task can fail, including the file not existing at the specified path, the file not having read permissions, or the file not being encoded in a compatible format. Distinguishing among these different situations allows a program to resolve some errors and to communicate to the user any errors it can’t resolve.<br>举例，在读取和处理磁盘上的一个文件的数据时，会有有许多方法失败，包括指定的文件路径找不到，没有文件的读取权限，或文件编码格式不兼容。在这些不同情况下，就可以让程序提示用户导致程序无法执行的具体原因。</p>
<h1 id="Representing-and-Throwing-Errors"><a href="#Representing-and-Throwing-Errors" class="headerlink" title="Representing and Throwing Errors"></a>Representing and Throwing Errors</h1><p>In Swift, errors are represented by values of types that conform to the Error protocol. This empty protocol indicates that a type can be used for error handling.<br>在swift中，错误类型是遵循Error 协议。</p>
<p>Swift enumerations are particularly well suited to modeling a group of related error conditions, with associated values allowing for additional information about the nature of an error to be communicated. For example, here’s how you might represent the error conditions of operating a vending machine inside a game:<br>swift枚举类型特别适合为一组错误条件建模，用来关联导致错误的真正原因的相关信息。例如：<br>一个在操作一台游戏机时的会出现的错误枚举类：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">VendingMachineError</span>: <span class="title">Error</span> </span>&#123;</div><div class="line"><span class="keyword">case</span> invalidSelection</div><div class="line"><span class="keyword">case</span> insufficientFunds(coinsNeeded: <span class="type">Int</span>)</div><div class="line"><span class="keyword">case</span> outOfStock</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Throwing an error lets you indicate that something unexpected happened and the normal flow of execution can’t continue. You use a throw statement to throw an error. For example, the following code throws an error to indicate that five additional coins are needed by the vending machine:<br>抛出错误说明游戏出现异常，导致其他操作无法进行。这是需要通过Throw语句来抛出这个错误。例如，以下代码抛出了一个错误表明需要five：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="type">VendingMachineError</span>.insufficientFunds(coinsNeeded: <span class="number">5</span>)</div></pre></td></tr></table></figure></p>
<h1 id="Handling-Errors"><a href="#Handling-Errors" class="headerlink" title="Handling Errors"></a>Handling Errors</h1><p>When an error is thrown, some surrounding piece of code must be responsible for handling the error—for example, by correcting the problem, trying an alternative approach, or informing the user of the failure.<br>当错误抛出后，这段代码必须来处理这个错误。例如：通过纠正问题，尝试其他方式实现，或通知用户的失败。</p>
<p>There are four ways to handle errors in Swift. You can propagate the error from a function to the code that calls that function, handle the error using a do-catch statement, handle the error as an optional value, or assert that the error will not occur. Each approach is described in a section below.<br>在swift中有四种处理错误机制:</p>
<pre><code>1. 向调用方法中传递这个错误
2. 使用do-catch语句处理
3. 把错误设置为可选型
4.断言不会出现异常的情况下，使用try!禁止异常抛出
</code></pre><p>When a function throws an error, it changes the flow of your program, so it’s important that you can quickly identify places in your code that can throw errors. To identify these places in your code, write the try keyword—or the try? or try! variation—before a piece of code that calls a function, method, or initializer that can throw an error. These keywords are described in the sections below.<br>当一个方法抛出错误时，会打断程序正常的工作流，必须快速定位到可能抛出错误的代码。可以使用关键字<code>try</code> 要注意 <code>try?</code>或<code>try!</code>之间的差异。在调用一个函数，方法或者构造器之前，来抛出异常。</p>
<h2 id="Propagating-Errors-Using-Throwing-Functions"><a href="#Propagating-Errors-Using-Throwing-Functions" class="headerlink" title="Propagating Errors Using Throwing Functions"></a>Propagating Errors Using Throwing Functions</h2><p>To indicate that a function, method, or initializer can throw an error, you write the throws keyword in the function’s declaration after its parameters. A function marked with throws is called a throwing function. If the function specifies a return type, you write the throwskeyword before the return arrow (-&gt;).<br>函数，方法或构造器都可以抛出异常，只需要在声明它们时添加关键字：<code>throws</code>即可，这种方法被称为<code>throws</code>函数，<code>throws</code>关键字位置在参数之后，返回值(-&gt;)之前</p>
<p>A throwing function propagates errors that are thrown inside of it to the scope from which it’s called.<br>抛出函数会把错误抛给调用它的函数周期中去。</p>
<a id="more"></a>
<p>Only throwing functions can propagate errors. Any errors thrown inside a nonthrowing function must be handled inside the function.<br>只有抛出函数能传递错误，如果不是抛出函数，它自己必须处理掉任何抛进来的错误。</p>
<p>In the example below, the VendingMachine class has a <code>vend(itemNamed:)</code> method that throws an appropriate VendingMachineError if the requested item is not available, is out of stock, or has a cost that exceeds the current deposited amount:<br>在下面的例子中，对某个请求内容不可用时，自动售货机会通过<code>vend(itemNamed:)</code>方法抛出一个对应的<code>VendingMachineError</code>错误，缺货或超过目前的存款金额成本：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> price: <span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VendingMachine</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> inventory = [</div><div class="line">        <span class="string">"Candy Bar"</span>: <span class="type">Item</span>(price: <span class="number">12</span>, <span class="built_in">count</span>: <span class="number">7</span>),</div><div class="line">        <span class="string">"Chips"</span>: <span class="type">Item</span>(price: <span class="number">10</span>, <span class="built_in">count</span>: <span class="number">4</span>),</div><div class="line">        <span class="string">"Pretzels"</span>: <span class="type">Item</span>(price: <span class="number">7</span>, <span class="built_in">count</span>: <span class="number">11</span>)</div><div class="line">    ]</div><div class="line">    <span class="keyword">var</span> coinsDeposited = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">vend</span><span class="params">(itemNamed name: String)</span></span> <span class="keyword">throws</span> </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> item = inventory[name] <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.invalidSelection</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> item.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.outOfStock</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> item.price &lt;= coinsDeposited <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.insufficientFunds(coinsNeeded: item.price - coinsDeposited)</div><div class="line">        &#125;</div><div class="line">        coinsDeposited -= item.price</div><div class="line">        <span class="keyword">var</span> newItem = item</div><div class="line">        newItem.<span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">        inventory[name] = newItem</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Dispensing \(name)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The implementation of the <code>vend(itemNamed:)</code> method uses guard statements to exit the method early and throw appropriate errors if any of the requirements for purchasing a snack aren’t met. Because a throw statement immediately transfers program control, an item will be vended only if all of these requirements are met.<br><code>vend(itemNamed:)</code>方法的实现中使用 <code>guard语句</code>来判断，当在购买操作不符合相应条件会直接抛出相应的错误，来打断该方法的其他操作。因为<code>throw语句</code>会立即转移程序控制权，保证了机器仅出售满足所有条件的物品。</p>
<p>Because the <code>vend(itemNamed:)</code> method propagates any errors it throws, any code that calls this method must either handle the errors—using a <code>do-catch</code> statement, <code>try?</code>, or <code>try!</code>—or continue to propagate them. For example, the <code>buyFavoriteSnack(person:vendingMachine:)</code> in the example below is also a throwing function, and any errors that the <code>vend(itemNamed:)</code> method throws will propagate up to the point where the <code>buyFavoriteSnack(person:vendingMachine:)</code>function is called.<br>因为vend(itemNamed:)的方法抛出所有错误，所以调用该方法的函数必须处理错误（ <code>do-catch, try?, or try!</code>处理，或使用<code>try</code>向上抛出）。</p>
<p>例如，<code>buyFavoriteSnack(person:vendingMachine:)</code>也是一个抛出函数，从<code>vend(itemNamed:)</code>方法接受到的所有错误，都会被会<code>buyFavoriteSnack(person:vendingMachine:)</code>继续抛给调用它的函数中。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> favoriteSnacks = [</div><div class="line">    <span class="string">"Alice"</span>: <span class="string">"Chips"</span>,</div><div class="line">    <span class="string">"Bob"</span>: <span class="string">"Licorice"</span>,</div><div class="line">    <span class="string">"Eve"</span>: <span class="string">"Pretzels"</span>,</div><div class="line">]</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">buyFavoriteSnack</span><span class="params">(person: String, vendingMachine: VendingMachine)</span></span> <span class="keyword">throws</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> snackName = favoriteSnacks[person] ?? <span class="string">"Candy Bar"</span></div><div class="line">    <span class="keyword">try</span> vendingMachine.vend(itemNamed: snackName)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In this example, the <code>buyFavoriteSnack(person: vendingMachine:)</code> function looks up a given person’s favorite snack and tries to buy it for them by calling the <code>vend(itemNamed:)</code> method. Because the <code>vend(itemNamed:)</code> method can throw an error, it’s called with the trykeyword in front of it.<br><code>buyFavoriteSnack(person: vendingMachine:)</code> 函数查找买家中意的snake，并<code>vend(itemNamed:)</code>调用尝试购买。使用在方法前使用<code>try</code>关键字来抛出异常，并向上传递。</p>
<p>Throwing initializers can propagate errors in the same way as throwing functions. For example, the initializer for the <code>PurchasedSnackstructure</code> in the listing below calls a throwing function as part of the initialization process, and it handles any errors that it encounters by propagating them to its caller.<br>抛出构造器也能向抛出函数一样传递错误，例如：<code>PurchasedSnackstructure</code>的构造器中调用了抛出函数：<code>vend(itemNamed:)</code>，抛出构造器可以通过向上传递来处理这些错误。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PurchasedSnack</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, vendingMachine: <span class="type">VendingMachine</span>) <span class="keyword">throws</span> </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span> vendingMachine.vend(itemNamed: name)</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Handling-Errors-Using-Do-Catch"><a href="#Handling-Errors-Using-Do-Catch" class="headerlink" title="Handling Errors Using Do-Catch"></a>Handling Errors Using Do-Catch</h2><p>You use a do-catch statement to handle errors by running a block of code. If an error is thrown by the code in the <code>do</code> clause, it is matched against the <code>catch</code>clauses to determine which one of them can handle the error.<br>使用<code>do-catch</code>语句通过运行代码块来处理错误。在<code>do</code>分句中如果抛出了一个错误，那么就可以在<code>catch</code>分句中进行处理的匹配到错误<br>Here is the general form of a <code>do-catch</code>statement:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> expression</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">catch</span> pattern <span class="number">1</span> &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">catch</span> pattern <span class="number">2</span> <span class="keyword">where</span> condition &#123;</div><div class="line">    statements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You write a pattern after catch to indicate what errors that clause can handle. If a <code>catch</code> clause doesn’t have a pattern, the clause matches any <code>error</code> and binds the <code>error</code> to a local constant named error. For more information about pattern matching, see Patterns.<br>在关键字catch后边跟随匹配模式，这个<code>catch分句</code>就会处理匹配到的错误，如果关键字<code>catch分句</code>没有任何匹配模式，那么这个分句将会匹配到所有错误，并把这些错误信息赋值给系统常量<code>error</code>。</p>
<p>The <code>catch</code>clauses don’t have to handle every possible error that the code in its <code>do</code> clause can throw. If none of the catch clauses handle the error, the error propagates to the surrounding scope. However, the error must be handled by some surrounding scope—either by an enclosing <code>do-catch</code> clause that handles the error or by being inside a throwing function. For example, the following code handles all three cases of the <code>VendingMachineError</code>enumeration, but all other errors have to be handled by its surrounding scope:<br><code>catch分句</code>不必对<code>do分句</code>中的代码可能抛出每一个的错误，如果某个错误没有被<code>catch分句</code>匹配到处理，这个错误将会传递到调用它的函数周期中，这个错误必须在这个函数周期中处理，或通过<code>do-catch语句</code>来处理，或通过内部的抛出函数处理。</p>
<p>例如，下面的代码处理<code>VendingMachineError</code>枚举类中的三个错误<code>cases</code>，但其他的错误都是由其周边范围处理：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vendingMachine = <span class="type">VendingMachine</span>()</div><div class="line">vendingMachine.coinsDeposited = <span class="number">8</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> buyFavoriteSnack(person: <span class="string">"Alice"</span>, vendingMachine: vendingMachine)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">VendingMachineError</span>.invalidSelection &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Invalid Selection."</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">VendingMachineError</span>.outOfStock &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Out of Stock."</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">VendingMachineError</span>.insufficientFunds(<span class="keyword">let</span> coinsNeeded) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Insufficient funds. Please insert an additional \(coinsNeeded) coins."</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Prints "Insufficient funds. Please insert an additional 2 coins."</span></div></pre></td></tr></table></figure></p>
<p>In the above example, the <code>buyFavoriteSnack(person:vendingMachine:)</code> function is called in a try expression, because it can throw an error. If an error is thrown, execution immediately transfers to the <code>catch</code> clauses, which decide whether to allow propagation to continue. If no error is thrown, the remaining statements in the do statement are executed.<br>在上述代码中因为<code>buyFavoriteSnack(person:vendingMachine:)</code>函数会抛出错误异常，所以要在try表达式中调用。如果抛出异常就会立马执行是否继续传递的catch分句，如果没有抛出异常，会保持do分句中的代码正常进行。</p>
<h2 id="Converting-Errors-to-Optional-Values"><a href="#Converting-Errors-to-Optional-Values" class="headerlink" title="Converting Errors to Optional Values"></a>Converting Errors to Optional Values</h2><p>You use try? to handle an error by converting it to an optional value. If an error is thrown while evaluating the <code>try?</code> expression, the value of the expression is nil. For example, in the following code x and y have the same value and behavior:<br>使用<code>try?表达式</code>处理错误，是通过把错误转换为<code>可选值(?)类型</code>处理。在<code>try?</code>表达式中出现抛出错误时，这个表达式的值<code>=nil</code>。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">someThrowingFunction</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> x = <span class="keyword">try</span>? someThrowingFunction()</div><div class="line"><span class="keyword">let</span> y: <span class="type">Int</span>?</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    y = <span class="keyword">try</span> someThrowingFunction()</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    y = <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If someThrowingFunction() throws an error, the value of x and y is nil. Otherwise, the value of x and y is the value that the function returned. Note that x and y are an optional of whatever type someThrowingFunction() returns. Here the function returns an integer, so xand y are optional integers.<br>如果函数<code>someThrowingFunction()</code>抛出异常，<code>x,y = nil</code>，否则:<code>x,y</code>就时函数<code>return</code>的值。</p>
<blockquote>
<p>注意：<code>x,y</code>是一个可选的someThrowingFunction()返回类型。在这里函数返回integer，那么x,y是可选的integer类型。</p>
</blockquote>
<p>Using <code>try?</code> lets you write concise error handling code when you want to handle all errors in the same way. For example, the following code uses several approaches to fetch data, or returns nil if all of the approaches fail.<br>当用这种方式来处理所有错误时，使用<code>try?</code>表达式能写更简洁的错误处理代码，例如：下面的代码使用几种方法来获取数据，如果这些方法失败就会返回nil。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchData</span><span class="params">()</span></span> -&gt; <span class="type">Data</span>? &#123;</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> data = <span class="keyword">try</span>? fetchDataFromDisk() &#123; <span class="keyword">return</span> data &#125;</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> data = <span class="keyword">try</span>? fetchDataFromServer() &#123; <span class="keyword">return</span> data &#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Disabling-Error-Propagation"><a href="#Disabling-Error-Propagation" class="headerlink" title="Disabling Error Propagation"></a>Disabling Error Propagation</h2><p>Sometimes you know a throwing function or method won’t, in fact, throw an error at runtime. On those occasions, you can write <code>try!</code> before the expression to disable error propagation and wrap the call in a runtime assertion that no error will be thrown. If an error actually is thrown, you’ll get a runtime error.<br>有时你认为不会出现异常的抛出函数或方法，但事实上，却在运行时抛出异常了。在其他情况下，可以使用<code>try!</code>表达式来禁止错误传递，并且十分肯定断言在运行时不会有异常抛出。如果有异常抛出，就会得到一个运行时错误。</p>
<p>For example, the following code uses a <code>loadImage(atPath:)</code> function, which loads the image resource at a given path or throws an error if the image can’t be loaded. In this case, because the image is shipped with the application, no error will be thrown at runtime, so it is appropriate to disable error propagation.<br>例如：使用<code>loadImage(atPath:)</code>函数要么通过这个路径加载image，要么image加载失败抛出一个错误。在这种情况下，因为<code>image</code>在app资源目录<code>resources</code>中，所以在运行时肯定不会有异常抛出。因此可以使用<code>try!</code>禁止错误传递。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> photo = <span class="keyword">try</span>! loadImage(atPath: <span class="string">"./Resources/John Appleseed.jpg"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="Specifying-Cleanup-Actions"><a href="#Specifying-Cleanup-Actions" class="headerlink" title="Specifying Cleanup Actions"></a>Specifying Cleanup Actions</h2><p>You use a defer statement to execute a set of statements just before code execution leaves the current block of code. This statement lets you do any necessary cleanup that should be performed regardless of how execution leaves the current block of code—whether it leaves because an error was thrown or because of a statement such as return or break. For example, you can use a defer statement to ensure that file descriptors are closed and manually allocated memory is freed.<br>在代码执行离开当前代码块之前，使用一个“defer语句”来执行一组语句。defer语句让做一些必要的清理操作，在执行如何离开当前代码块：因为抛出异常或者因为<code>return，break语句</code>导致。例如：使用<code>defer语句</code>执行关闭文件和内存的释放操作，来确保清理操作完成。</p>
<p>A defer statement defers execution until the current scope is exited. This statement consists of the defer keyword and the statements to be executed later. The deferred statements may not contain any code that would transfer control out of the statements, such as a break or a return statement, or by throwing an error. Deferred actions are executed in reverse order of how they are specified—that is, the code in the first defer statement executes after code in the second, and so on.<br><code>defer语句</code>推迟在直到当前作用域推出时，再执行。<code>defer语句</code>由<code>defer</code>关键字和一些清理操作语句组成。<code>defer语句</code>不包含transfer control out of the statements例如<code>（return，break，throw）</code>等。</p>
<p><code>defer</code>延迟操作是按照指定的顺序执行的，就是先执行最后一个<code>defer语句</code>中的代码之后，再执行第倒数第二个<code>defer语句</code>的代码，以此类推，倒叙清理退场。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">processFile</span><span class="params">(filename: String)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">if</span> exists(filename) &#123;</div><div class="line">        <span class="keyword">let</span> file = open(filename)</div><div class="line">        <span class="keyword">defer</span> &#123;</div><div class="line">            close(file)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> <span class="keyword">let</span> line = <span class="keyword">try</span> file.readline() </div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Work with the file.</span></div><div class="line">        &#125;</div><div class="line">            <span class="comment">// close(file) is called here, at the end of the scope.</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The above example uses a defer statement to ensure that the <code>open(_:)</code> function has a corresponding call to <code>close(_:)</code>.<br>使用defer语句，确保了在open的同时与之相关的还有close。</p>
<p>You can use a defer statement even when no error handling code is involved.<br>即使在没有涉及错误处理代码的时候，也可以使用“延迟”语句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime.&lt;br&gt;Some operations aren’t guaranteed to always complete execution or produce a useful output. Optionals are used to represent the absence of a value, but when an operation fails, it’s often useful to understand what caused the failure, so that your code can respond accordingly.&lt;br&gt;As an example, consider the task of reading and processing data from a file on disk. There are a number of ways this task can fail, including the file not existing at the specified path, the file not having read permissions, or the file not being encoded in a compatible format. Distinguishing among these different situations allows a program to resolve some errors and to communicate to the user any errors it can’t resolve.&lt;br&gt;举例，在读取和处理磁盘上的一个文件的数据时，会有有许多方法失败，包括指定的文件路径找不到，没有文件的读取权限，或文件编码格式不兼容。在这些不同情况下，就可以让程序提示用户导致程序无法执行的具体原因。&lt;/p&gt;
&lt;h1 id=&quot;Representing-and-Throwing-Errors&quot;&gt;&lt;a href=&quot;#Representing-and-Throwing-Errors&quot; class=&quot;headerlink&quot; title=&quot;Representing and Throwing Errors&quot;&gt;&lt;/a&gt;Representing and Throwing Errors&lt;/h1&gt;&lt;p&gt;In Swift, errors are represented by values of types that conform to the Error protocol. This empty protocol indicates that a type can be used for error handling.&lt;br&gt;在swift中，错误类型是遵循Error 协议。&lt;/p&gt;
&lt;p&gt;Swift enumerations are particularly well suited to modeling a group of related error conditions, with associated values allowing for additional information about the nature of an error to be communicated. For example, here’s how you might represent the error conditions of operating a vending machine inside a game:&lt;br&gt;swift枚举类型特别适合为一组错误条件建模，用来关联导致错误的真正原因的相关信息。例如：&lt;br&gt;一个在操作一台游戏机时的会出现的错误枚举类：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;VendingMachineError&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Error&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; invalidSelection&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; insufficientFunds(coinsNeeded: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; outOfStock&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Throwing an error lets you indicate that something unexpected happened and the normal flow of execution can’t continue. You use a throw statement to throw an error. For example, the following code throws an error to indicate that five additional coins are needed by the vending machine:&lt;br&gt;抛出错误说明游戏出现异常，导致其他操作无法进行。这是需要通过Throw语句来抛出这个错误。例如，以下代码抛出了一个错误表明需要five：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;VendingMachineError&lt;/span&gt;.insufficientFunds(coinsNeeded: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Handling-Errors&quot;&gt;&lt;a href=&quot;#Handling-Errors&quot; class=&quot;headerlink&quot; title=&quot;Handling Errors&quot;&gt;&lt;/a&gt;Handling Errors&lt;/h1&gt;&lt;p&gt;When an error is thrown, some surrounding piece of code must be responsible for handling the error—for example, by correcting the problem, trying an alternative approach, or informing the user of the failure.&lt;br&gt;当错误抛出后，这段代码必须来处理这个错误。例如：通过纠正问题，尝试其他方式实现，或通知用户的失败。&lt;/p&gt;
&lt;p&gt;There are four ways to handle errors in Swift. You can propagate the error from a function to the code that calls that function, handle the error using a do-catch statement, handle the error as an optional value, or assert that the error will not occur. Each approach is described in a section below.&lt;br&gt;在swift中有四种处理错误机制:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 向调用方法中传递这个错误
2. 使用do-catch语句处理
3. 把错误设置为可选型
4.断言不会出现异常的情况下，使用try!禁止异常抛出
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When a function throws an error, it changes the flow of your program, so it’s important that you can quickly identify places in your code that can throw errors. To identify these places in your code, write the try keyword—or the try? or try! variation—before a piece of code that calls a function, method, or initializer that can throw an error. These keywords are described in the sections below.&lt;br&gt;当一个方法抛出错误时，会打断程序正常的工作流，必须快速定位到可能抛出错误的代码。可以使用关键字&lt;code&gt;try&lt;/code&gt; 要注意 &lt;code&gt;try?&lt;/code&gt;或&lt;code&gt;try!&lt;/code&gt;之间的差异。在调用一个函数，方法或者构造器之前，来抛出异常。&lt;/p&gt;
&lt;h2 id=&quot;Propagating-Errors-Using-Throwing-Functions&quot;&gt;&lt;a href=&quot;#Propagating-Errors-Using-Throwing-Functions&quot; class=&quot;headerlink&quot; title=&quot;Propagating Errors Using Throwing Functions&quot;&gt;&lt;/a&gt;Propagating Errors Using Throwing Functions&lt;/h2&gt;&lt;p&gt;To indicate that a function, method, or initializer can throw an error, you write the throws keyword in the function’s declaration after its parameters. A function marked with throws is called a throwing function. If the function specifies a return type, you write the throwskeyword before the return arrow (-&amp;gt;).&lt;br&gt;函数，方法或构造器都可以抛出异常，只需要在声明它们时添加关键字：&lt;code&gt;throws&lt;/code&gt;即可，这种方法被称为&lt;code&gt;throws&lt;/code&gt;函数，&lt;code&gt;throws&lt;/code&gt;关键字位置在参数之后，返回值(-&amp;gt;)之前&lt;/p&gt;
&lt;p&gt;A throwing function propagates errors that are thrown inside of it to the scope from which it’s called.&lt;br&gt;抛出函数会把错误抛给调用它的函数周期中去。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="安全" scheme="https://huos3203.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>在OC和swift中区分多个targets</title>
    <link href="https://huos3203.github.io/2017/01/11/%E5%9C%A8OC%E5%92%8Cswift%E4%B8%AD%E5%8C%BA%E5%88%86%E5%A4%9A%E4%B8%AAtargets/"/>
    <id>https://huos3203.github.io/2017/01/11/在OC和swift中区分多个targets/</id>
    <published>2017-01-11T05:49:33.000Z</published>
    <updated>2017-01-12T03:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="build-setting预编译位置"><a href="#build-setting预编译位置" class="headerlink" title="build setting预编译位置"></a>build setting预编译位置</h2><ol>
<li>Preprocessor Macros</li>
<li>Other Swift Flags</li>
</ol>
<p>为生产和开发target配置预处理宏/编译器标识。之后我们就可以使用该标识在我们的代码来检测应用程序正在运行的版本。</p>
<h3 id="Objective-C项目中Preprocessor-Macros"><a href="#Objective-C项目中Preprocessor-Macros" class="headerlink" title="Objective-C项目中Preprocessor Macros"></a>Objective-C项目中Preprocessor Macros</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><hr>
<p>添加位置：选择项目中对应的target名-&gt;在<code>Build Settings</code>下<code>Apple LLVM 7.0 - Preprocessing</code>-&gt;<code>Preprocessor Macros</code>。<br>添加变量：在Rebug和Release区域添加一个变量<code>DEVELOPMENT</code><br>    对应target1: 设<code>DEVELOPMENT=1</code>表示开发版<br>    对应target2: 设<code>DEVELOPMENT=0</code>表示生产版</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><hr>
<p>根据已配置的宏DEV_VERSION，我们可以在代码中利用它动态地编译项目。下面是一个简单的例子：<br>Objective-C中使用<code>＃if</code>检查<code>DEVELOPMENT</code>的环境，并相应的设置URLs/ API密钥。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if DEVELOPMENT</span></div><div class="line">     <span class="meta">#define SERVER_URL @<span class="meta-string">"http://dev.server.com/api/"</span></span></div><div class="line">     <span class="meta">#define API_TOKEN @<span class="meta-string">"DI2023409jf90ew"</span></span></div><div class="line"><span class="meta">#else</span></div><div class="line">     <span class="meta">#define SERVER_URL @<span class="meta-string">"http://prod.server.com/api/"</span></span></div><div class="line">     <span class="meta">#define API_TOKEN @<span class="meta-string">"71a629j0f090232"</span></span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<h3 id="Swift中Other-Swift-Flags"><a href="#Swift中Other-Swift-Flags" class="headerlink" title="Swift中Other Swift Flags"></a>Swift中Other Swift Flags</h3><p>对于swift的项目，编译器不再支持预处理指令。作为替代，它使用编译时的属性和build配置。</p>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><hr>
<p>选中开发target，添加一个标识表示开发版本<br>选中<code>target</code> -&gt; <code>Build Setting</code>-&gt;<code>Swift Compiler - Custom Flags</code>-&gt;将值设为<code>-DDEVELOPMENT</code>表示这个target作为开发版本。</p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><hr>
<p>Swift中你仍然可以使用<code>#if</code>判定build的参数动态编译。然而，除了使用<code>#define</code>定义基本常量，在swift中我们也可以用<code>let</code>定义一个全局常量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#<span class="keyword">if</span> <span class="type">DEVELOPMENT</span></div><div class="line"><span class="keyword">let</span> <span class="type">SERVER_URL</span> = <span class="string">"http://dev.server.com/api/"</span></div><div class="line"><span class="keyword">let</span> <span class="type">API_TOKEN</span> = <span class="string">"DI2023409jf90ew"</span></div><div class="line">#<span class="keyword">else</span></div><div class="line"><span class="keyword">let</span> <span class="type">SERVER_URL</span> = <span class="string">"http://prod.server.com/api/"</span></div><div class="line"><span class="keyword">let</span> <span class="type">API_TOKEN</span> = <span class="string">"71a629j0f090232"</span></div><div class="line">#endif</div></pre></td></tr></table></figure>
<p><a href="http://www.cocoachina.com/ios/20160331/15832.html" target="_blank" rel="external">参照</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;build-setting预编译位置&quot;&gt;&lt;a href=&quot;#build-setting预编译位置&quot; class=&quot;headerlink&quot; title=&quot;build setting预编译位置&quot;&gt;&lt;/a&gt;build setting预编译位置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="targets" scheme="https://huos3203.github.io/tags/targets/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装使用</title>
    <link href="https://huos3203.github.io/2016/12/21/Docker%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2016/12/21/Docker使用/</id>
    <published>2016-12-21T13:25:29.000Z</published>
    <updated>2017-01-12T08:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Docker-for-Mac"><a href="#安装Docker-for-Mac" class="headerlink" title="安装Docker for Mac"></a>安装<a href="https://www.docker.com/products/docker#/mac" target="_blank" rel="external">Docker for Mac</a></h2><p>在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">echo '下载dmg...'</div><div class="line">curl -o Docker.dmg https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</div><div class="line">#安装Docker.dmg</div><div class="line">MOUNTDIR=$(echo `hdiutil mount Docker.dmg | tail -1 \</div><div class="line">| awk '&#123;$1=$2=""; print $0&#125;'` | xargs -0 echo) \</div><div class="line">&amp;&amp; cd $&#123;MOUNTDIR&#125; &amp;&amp; cp -R Docker.app /Applications/ \</div><div class="line">&amp;&amp; open /Applications/Docker.app</div></pre></td></tr></table></figure></p>
<h3 id="配置-Docker-加速器镜像源"><a href="#配置-Docker-加速器镜像源" class="headerlink" title="配置 Docker 加速器镜像源"></a>配置 Docker 加速器镜像源</h3><p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://142*****.m.daocloud.io</div></pre></td></tr></table></figure></p>
<p>点击 Apply &amp; Restart 按钮使设置生效。</p>
<h3 id="安装主机监控程序加速器"><a href="#安装主机监控程序加速器" class="headerlink" title="安装主机监控程序加速器"></a>安装主机监控程序加速器</h3><hr>
<ol>
<li>登录到 <code>DaoCloud 控制台</code>，点击「我的集群」按钮，在「接入自有主机」界面，点击 Mac 按钮。</li>
<li>安装<a href="https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg" target="_blank" rel="external">DockerToolbox</a>，是一个完整的开发组件，通过安装和配置<code>DaoCloud加速器 v2</code>，提升下载 <code>Docker Hub 镜像</code>的速度。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//下载pkg</div><div class="line">curl -o DockerToolbox.pkg https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg</div><div class="line">//安装pkg</div><div class="line">sudo installer -pkg DockerToolbox.pkg -target /</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li>安装Toolbox好了，下一步：<br><img src="http://docs.daocloud.io/user/pages/03.faq/08.install-docker-daocloud/DashboardDaoCloudInstall.png" alt=""></li>
<li><code>$ docker-machine start default</code>启动 Docker.<br>当执行后提示：<code>Host does not exist: &quot;default&quot;</code><figure class="highlight plain"><figcaption><span>docker-machine create</span><a href="http://stackoverflow.com/a/38602630" target="_blank" rel="external">stackoverflow</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-machine create -d virtualbox default</div></pre></td></tr></table></figure></li>
<li><p>在 <code>Docker 主机</code> DaoCloud 加速器的组件包：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL <span class="symbol">https:</span>/<span class="regexp">/get.daocloud.io/daomonit</span><span class="regexp">/install.sh | sh -s d0312f829e9807ee0bf157******</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动组件包,会在「安装主机监控程序」的 DaoCloud 控制台页面下方显示一台已经接入的主机。<br><img src="/images/daoshell.png" alt=""></p>
</li>
<li>执行<code>Dao Pull</code>命令,高速下载<code>Docker Hub</code>镜像文件<br>这台 Docker 主机已经被接入 DaoCloud 平台，用户可以在 DaoCloud 控制台的「我的集群」页面发现这台主机，可以执行管理和部署应用的操作。</li>
</ol>
<h3 id="从Docker-Hub-仓库中获取一个镜像"><a href="#从Docker-Hub-仓库中获取一个镜像" class="headerlink" title="从Docker Hub 仓库中获取一个镜像"></a>从Docker Hub 仓库中获取一个镜像</h3><hr>
<p>Docker 使用类似 git 的方式管理镜像。通过基本的镜像可以定制创建出来不同种应用的 Docker 镜像。Docker Hub 是 Docker 官方提供的镜像中心。在这里可以很方便地找到各类应用、环境的镜像。由于 Docker 使用联合文件系统，所以镜像就像是夹心饼干一样一层层构成，相同底层的镜像可以共享。所以 Docker 还是相当节约磁盘空间的。要使用一 个镜像，需要先从远程的镜像注册中心拉取，这点非常类似 git。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull ubuntu</div></pre></td></tr></table></figure></p>
<h2 id="Docker-命令创建管理容器"><a href="#Docker-命令创建管理容器" class="headerlink" title="Docker 命令创建管理容器"></a>Docker 命令创建管理容器</h2><hr>
<h3 id="获取镜像的两种方式"><a href="#获取镜像的两种方式" class="headerlink" title="获取镜像的两种方式"></a>获取镜像的两种方式</h3><hr>
<h4 id="1-docker-pull命令"><a href="#1-docker-pull命令" class="headerlink" title="1. docker pull命令"></a>1. <code>docker pull</code>命令</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker search perfectlysoft/ubuntu</div><div class="line">docker pull perfectlysoft/ubuntu</div></pre></td></tr></table></figure>
<h4 id="2-docker-import命令"><a href="#2-docker-import命令" class="headerlink" title="2. docker import命令"></a>2. <code>docker import</code>命令</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker import myubuntu.tar.gz</div></pre></td></tr></table></figure>
<h3 id="通过镜像创建容器"><a href="#通过镜像创建容器" class="headerlink" title="通过镜像创建容器"></a>通过镜像创建容器</h3><hr>
<p>创建一个容器有两种方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker create 镜像名</div><div class="line">docker run   镜像名   /<span class="regexp">/立即启动容器 等价于：create + start 命令组合</span></div></pre></td></tr></table></figure></p>
<p>进入容器终端控制台如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ec72dc76502e:/# ls</div><div class="line">app  boot  etc   lib    media  opt   root  sbin  sys  usr</div><div class="line">bin  dev   home  lib64  mnt    proc  run   srv   tmp  var</div></pre></td></tr></table></figure></p>
<h4 id="docker-run-images命令"><a href="#docker-run-images命令" class="headerlink" title="docker run images命令"></a><code>docker run images</code>命令</h4><ol>
<li><p>样例1<br>执行<code>run images</code>，并将 Ubuntu 的 Shell 作为入口，进入Docker容器环境操作</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it <span class="symbol">ubuntu:</span>latest sh -c <span class="string">'/bin/bash'</span></div></pre></td></tr></table></figure>
</li>
<li><p>样例2<br>执行<code>docker start -i 容器</code>命令进入容器环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start -i 容器ID/容器名</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="从KitematicGUI进入容器环境"><a href="#从KitematicGUI进入容器环境" class="headerlink" title="从KitematicGUI进入容器环境"></a>从<code>Kitematic</code>GUI进入容器环境</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -c <span class="string">"clear &amp;&amp; docker exec -it perfectswift sh"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参数<br>-i 表示这是一个交互容器，会把当前标准输入重定向到容器的标准输入中，而不是终止程序运行<br>-t 指为这个容器分配一个终端</p>
</blockquote>
<p>这时候我们成功创建了一个 Ubuntu 的容器，并将当前终端连接为这个 Ubuntu 的 bash shell。这时候就可以愉快地使用 Ubuntu 的相关命令了。</p>
<h3 id="ps-查看容器状态"><a href="#ps-查看容器状态" class="headerlink" title="ps 查看容器状态"></a>ps 查看容器状态</h3><hr>
<p>在容器运行期间，我们可以通过 <code>docker ps</code> 命令看到所有当前正在运行的容器。<br>添加-a参数可以看到所有创建的容器：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure></p>
<h3 id="容器ID标识"><a href="#容器ID标识" class="headerlink" title="容器ID标识"></a>容器ID标识</h3><hr>
<p>每个容器都有一个唯一的 ID 标识，通过 ID 可以对这个容器进行管理和操作。在创建容器时，我们可以通过 –name 参数指定一个容器名称，如果没有指定系统将会分配一个，就像这里的「trusting_morse」。</p>
<h3 id="启动-退出-移除容器"><a href="#启动-退出-移除容器" class="headerlink" title="启动/退出/移除容器"></a>启动/退出/移除容器</h3><hr>
<p>启动：<code>start</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start -i trusting_morse</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：每次执行 docker run 命令都会创建新的容器，建议一次创建后，使用 docker start/stop 来启动和停用容器。</p>
</blockquote>
<p>退出：<br>按 <code>Ctrl+D</code> 退出</p>
<p>移除：<code>rm</code>ID/name<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm [CONTAINER ID/NAMES]</div></pre></td></tr></table></figure></p>
<p>重命名：<code>rename</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rename 容器ID newName</div></pre></td></tr></table></figure></p>
<h2 id="创建管理镜像"><a href="#创建管理镜像" class="headerlink" title="创建管理镜像"></a>创建管理镜像</h2><hr>
<p>Docker 强大的威力在于可以把自己开发的应用随同各种依赖环境一起打包、分发、运行。要创建一个新的 Docker 镜像，通常基于一个已有的 Docker 镜像来创建。<br>Docker 提供了两种方式来创建镜像：</p>
<ol>
<li>把容器创建为一个新的镜像</li>
<li>使用 Dockerfile 创建镜像。</li>
</ol>
<h3 id="将容器创建为镜像"><a href="#将容器创建为镜像" class="headerlink" title="将容器创建为镜像"></a>将容器创建为镜像</h3><hr>
<ol>
<li><p>为了创建一个新的镜像，我们先创建一个新的容器作为基底：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it <span class="symbol">ubuntu:</span>latest sh -c <span class="string">'/bin/bash'</span></div></pre></td></tr></table></figure>
</li>
<li><p>定制这个容器，例如我们可以配置 PHP 环境、将我们的项目代码部署在里面等：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install php</div><div class="line"><span class="comment"># some other opreations ...</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>当执行完操作之后，我们按 Ctrl+D 退出容器.</p>
<ol>
<li><p>获取定制后的容器ID</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div><div class="line">[root@localhost ~]# docker ps -a</div><div class="line"></div><div class="line">CONTAINER ID        IMAGE                        COMMAND                    CREATED             STATUS                      PORTS               NAMES</div><div class="line">cb2b06c83a50        ubuntu:latest                &quot;sh -c /bin/bash&quot;          7 minutes ago       Exited (0) 7 seconds ago                       trusting_morse</div></pre></td></tr></table></figure>
</li>
<li><p>执行<code>docker commit</code> 把这个容器变为一个镜像：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit cb2b06c83a50 ubuntu:myubuntu</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这时候 docker 容器会被创建为一个新的 Ubuntu 镜像，版本名称为 myubuntu。以后我们可以随时使用这个镜像来创建容器了，新的容器将自动包含上面对容器的操作。    </p>
<ol>
<li><p>打包/发布镜像</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker save -o myubuntu.tar.gz <span class="symbol">ubuntu:</span>myubuntu</div></pre></td></tr></table></figure>
</li>
<li><p>导入打包镜像</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker import myubuntu.tar.gz</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><hr>
<h4 id="通过Dockerfile创建镜像"><a href="#通过Dockerfile创建镜像" class="headerlink" title="通过Dockerfile创建镜像"></a>通过<code>Dockerfile</code>创建镜像</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build yourDir/Dockerfile</div></pre></td></tr></table></figure>
<blockquote>
<p>确保Dockerfile文件在一个目录中，否则会提示错误</p>
</blockquote>
<p>Docker Hub 提供了类似 GitHub 的镜像存管服务。一个镜像发布到 Docker Hub 不仅可以供更多人使用，而且便于镜像的版本管理。在一个企业内部可以通过自建 Docker Registry 的方式来统一管理和发布镜像。将 Docker Registry 集成到版本管理和上线发布的工作流之中，还有许多工作要做，在我整理出最佳实践后会第一时间分享。<br>使用命令行的方式创建 Docker 镜像通常难以自动化操作。在更多的时候，我们使用 Dockerfile 来创建 Docker 镜像。Dockerfile 是一个纯文本文件，它记载了从一个镜像创建另一个新镜像的步骤。撰写好 Dockerfile 文件之后，我们就可以轻而易举的使用 docker build 命令来创建镜像了。<br>Dockerfile 非常简单，仅有以下命令在 Dockerfile 中常被使用：</p>
<table>
<thead>
<tr>
<th style="text-align:right">命令</th>
<th style="text-align:right">参数</th>
<th style="text-align:right">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">#</td>
<td style="text-align:right">-</td>
<td style="text-align:right">注释说明</td>
</tr>
<tr>
<td style="text-align:right">FROM</td>
<td style="text-align:right"><image>[:<tag>]</tag></image></td>
<td style="text-align:right">从一个已有镜像创建，例如ubuntu:latest</td>
</tr>
<tr>
<td style="text-align:right">MAINTAINER</td>
<td style="text-align:right">Author <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#115;&#x6f;&#109;&#101;&#45;&#x6f;&#110;&#101;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;">&#115;&#x6f;&#109;&#101;&#45;&#x6f;&#110;&#101;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#109;</a></td>
<td style="text-align:right">镜像作者名字，如Max Liu <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#115;&#x6f;&#x6d;&#101;&#45;&#111;&#110;&#x65;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;">&#115;&#x6f;&#x6d;&#101;&#45;&#111;&#110;&#x65;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;</a></td>
</tr>
<tr>
<td style="text-align:right">RUN</td>
<td style="text-align:right"><cmd>或者[‘cmd1’, ‘cmd2’…]</cmd></td>
<td style="text-align:right">在镜像创建用的临时容器里执行单行命令</td>
</tr>
<tr>
<td style="text-align:right">ADD</td>
<td style="text-align:right"><src> <dest></dest></src></td>
<td style="text-align:right">将本地的<src>添加到镜像容器中的<dest>位置</dest></src></td>
</tr>
<tr>
<td style="text-align:right">VOLUME</td>
<td style="text-align:right"><path></path>或者[‘/var’, ‘home’]</td>
<td style="text-align:right">将指定的路径挂载为数据卷</td>
</tr>
<tr>
<td style="text-align:right">EXPOSE</td>
<td style="text-align:right"><port> [<port>…]</port></port></td>
<td style="text-align:right">将指定的端口暴露给主机</td>
</tr>
<tr>
<td style="text-align:right">ENV</td>
<td style="text-align:right"><key> <value> 或者 <key> = <value></value></key></value></key></td>
<td style="text-align:right">指定环境变量值</td>
</tr>
<tr>
<td style="text-align:right">CMD</td>
<td style="text-align:right">[“executable”,”param1”,”param2”]</td>
<td style="text-align:right">容器启动时默认执行的命令。注意一个Dockerfile中只有最后一个CMD生效。</td>
</tr>
<tr>
<td style="text-align:right">ENTRYPOINT</td>
<td style="text-align:right">[“executable”, “param1”, “param2”]</td>
<td style="text-align:right">容器的进入点</td>
</tr>
</tbody>
</table>
<h4 id="配置Dockerfile"><a href="#配置Dockerfile" class="headerlink" title="配置Dockerfile"></a>配置Dockerfile</h4><hr>
<p>下面是一个 Dockerfile 的例子：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is a comment</span></div><div class="line">FROM <span class="symbol">ubuntu:</span><span class="number">14.04</span></div><div class="line">MAINTAINER Kate Smith &lt;ksmith@example.com&gt;</div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y ruby ruby-dev</div><div class="line">RUN gem install sinatra</div></pre></td></tr></table></figure></p>
<h5 id="CMD命令"><a href="#CMD命令" class="headerlink" title="CMD命令"></a><code>CMD</code>命令</h5><hr>
<p><code>CMD</code>: 命令可用指定 Docker 容器启动时默认的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it ubuntu:latest sh -c &apos;/bin/bash&apos;</div></pre></td></tr></table></figure></p>
<p>其中 <code>sh -c &#39;/bin/bash&#39;</code> 就是手工指定的<code>CMD</code>,否则容器将会使用默认 <code>CMD</code> 指定的命令启动。</p>
<h5 id="ENTRYPOINT命令"><a href="#ENTRYPOINT命令" class="headerlink" title="ENTRYPOINT命令"></a><code>ENTRYPOINT</code>命令</h5><hr>
<p>用来指定可执行文件、Shell 脚本，同时会并把启动参数或 CMD 指定的默认值，当作附加参数传递给 执行文件、Shell 脚本。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ENTRYPOINT [<span class="string">'/usr/bin/mysql'</span>]</div><div class="line">CMD [<span class="string">'-h 192.168.100.128'</span>, <span class="string">'-p'</span>]</div></pre></td></tr></table></figure></p>
<p>执行mysql启动程序，连接<code>192.168.100.128</code> 主机,也可以通过指定参数，来连接别的主机。</p>
<p>因此，我们在使用 Dockerfile 创建文件的时候，可以创建一个 entrypoint.sh 脚本，作为系统入口。在这个文件里面，我们可以进行一些基础性的自举操作，比如检查环境变量，根据需要初始化数据库等等。下面两个文件是我在日常工作的项目中添加的 Dockerfile 和 entrypoint.sh，仅供参考：<br><a href="https://github.com/starlight36/SimpleOA/blob/master/Dockerfile" target="_blank" rel="external">https://github.com/starlight36/SimpleOA/blob/master/Dockerfile</a><br><a href="https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh" target="_blank" rel="external">https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh</a><br>在准备好 Dockerfile 之后，我们就可以创建镜像了：</p>
<h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t starlight36/simpleoa .</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Docker-for-Mac&quot;&gt;&lt;a href=&quot;#安装Docker-for-Mac&quot; class=&quot;headerlink&quot; title=&quot;安装Docker for Mac&quot;&gt;&lt;/a&gt;安装&lt;a href=&quot;https://www.docker.com/products/docker#/mac&quot;&gt;Docker for Mac&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;echo &#39;下载dmg...&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;curl -o Docker.dmg https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#安装Docker.dmg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MOUNTDIR=$(echo `hdiutil mount Docker.dmg | tail -1 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| awk &#39;&amp;#123;$1=$2=&quot;&quot;; print $0&amp;#125;&#39;` | xargs -0 echo) \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;&amp;amp; cd $&amp;#123;MOUNTDIR&amp;#125; &amp;amp;&amp;amp; cp -R Docker.app /Applications/ \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;&amp;amp; open /Applications/Docker.app&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置-Docker-加速器镜像源&quot;&gt;&lt;a href=&quot;#配置-Docker-加速器镜像源&quot; class=&quot;headerlink&quot; title=&quot;配置 Docker 加速器镜像源&quot;&gt;&lt;/a&gt;配置 Docker 加速器镜像源&lt;/h3&gt;&lt;p&gt;右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://142*****.m.daocloud.io&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击 Apply &amp;amp; Restart 按钮使设置生效。&lt;/p&gt;
&lt;h3 id=&quot;安装主机监控程序加速器&quot;&gt;&lt;a href=&quot;#安装主机监控程序加速器&quot; class=&quot;headerlink&quot; title=&quot;安装主机监控程序加速器&quot;&gt;&lt;/a&gt;安装主机监控程序加速器&lt;/h3&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;登录到 &lt;code&gt;DaoCloud 控制台&lt;/code&gt;，点击「我的集群」按钮，在「接入自有主机」界面，点击 Mac 按钮。&lt;/li&gt;
&lt;li&gt;安装&lt;a href=&quot;https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg&quot;&gt;DockerToolbox&lt;/a&gt;，是一个完整的开发组件，通过安装和配置&lt;code&gt;DaoCloud加速器 v2&lt;/code&gt;，提升下载 &lt;code&gt;Docker Hub 镜像&lt;/code&gt;的速度。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//下载pkg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;curl -o DockerToolbox.pkg https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//安装pkg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo installer -pkg DockerToolbox.pkg -target /&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="dockerer" scheme="https://huos3203.github.io/categories/dockerer/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="搭建" scheme="https://huos3203.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hackmd使用</title>
    <link href="https://huos3203.github.io/2016/12/21/hackmd%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2016/12/21/hackmd使用/</id>
    <published>2016-12-21T02:49:32.000Z</published>
    <updated>2017-01-12T08:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="編輯"><a href="#編輯" class="headerlink" title="編輯"></a>編輯</h1><h2 id="快速鍵"><a href="#快速鍵" class="headerlink" title="快速鍵"></a>快速鍵</h2><p>跟又快又方便的Sublime text很像</p>
<blockquote>
<p>更多訊息請至 <a href="https://codemirror.net/demo/sublime.html" target="_blank" rel="external">這裡</a></p>
</blockquote>
<h2 id="自動完成"><a href="#自動完成" class="headerlink" title="自動完成"></a>自動完成</h2><p>提供完整的 Markdown 自動完成與提示</p>
<ul>
<li>表情符號：輸入 <code>:</code> 顯示提示</li>
<li>程式碼區塊：輸入 <code>3个</code> ` 加上一個字元 顯示提示 </li>
<li>標頭：輸入 <code>#</code> 顯示提示</li>
<li>參考：輸入 <code>[]</code> 顯示提示</li>
<li>外部：輸入 <code>{}</code> 顯示提示</li>
<li>圖片：輸入 <code>!</code> 顯示提示</li>
</ul>
<h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><p>會使用 <strong>第一個第一級標頭</strong> 作為筆記標題</p>
<h2 id="標籤"><a href="#標籤" class="headerlink" title="標籤"></a>標籤</h2><p>如同以下方式來使用標籤，它們會顯示在您的 <strong>歷史紀錄</strong></p>
<h6 id="tags-功能-酷-更新"><a href="#tags-功能-酷-更新" class="headerlink" title="tags: 功能 酷 更新"></a>tags: <code>功能</code> <code>酷</code> <code>更新</code></h6><h2 id="YAML-metadata"><a href="#YAML-metadata" class="headerlink" title="YAML metadata"></a><a href="./yaml-metadata">YAML metadata</a></h2><p>提供描述筆記的資訊，以進階設定瀏覽行為，詳細請至上連結</p>
<ul>
<li>robots: 設定網路機器人 meta</li>
<li>lang: 設定瀏覽器顯示語言</li>
<li>dir: 設定文字方向</li>
<li>breaks: 設定是否使用分行</li>
<li>mathjax: 設定是否使用 mathjax</li>
</ul>
<h2 id="表情符號"><a href="#表情符號" class="headerlink" title="表情符號"></a>表情符號</h2><p>您可以像是這樣使用表情符號 :smile: :smiley: :cry: :wink:</p>
<blockquote>
<p>完整的表情符號列表 <a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">在這裡</a></p>
</blockquote>
<h2 id="待辦清單"><a href="#待辦清單" class="headerlink" title="待辦清單"></a>待辦清單</h2><ul>
<li>[ ] 待辦<ul>
<li>[x] 買些沙拉</li>
<li>[x] 刷牙</li>
<li>[ ] 喝水<a id="more"></a>
<h2 id="程式碼區塊"><a href="#程式碼區塊" class="headerlink" title="程式碼區塊"></a>程式碼區塊</h2>我們支援非常多程式語言，使用自動完成來看看有些什麼<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var s = &quot;JavaScript syntax highlighting&quot;;</div><div class="line">alert(s);</div><div class="line">function $initHighlight(block, cls) &#123;</div><div class="line">  try &#123;</div><div class="line">    if (cls.search(/\bno\-highlight\b/) != -1)</div><div class="line">      return process(block, true, 0x0F) + </div><div class="line">             &apos; class=&quot;&quot;&apos;;</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    /* handle exception */</div><div class="line">  &#125;</div><div class="line">  for (var i = 0 / 2; i &lt; classes.length; i++) &#123;</div><div class="line">    if (checkCondition(classes[i]) === undefined)</div><div class="line">      return /\d+[\s/]/g;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>如果想要 <strong>行號</strong>，在表明程式語言之後輸入 <code>=</code><br>您也可以指定開始行號，如下所示，行號從101開始</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var s = &quot;JavaScript syntax highlighting&quot;;</div><div class="line">alert(s);</div><div class="line">function $initHighlight(block, cls) &#123;</div><div class="line">  try &#123;</div><div class="line">    if (cls.search(/\bno\-highlight\b/) != -1)</div><div class="line">      return process(block, true, 0x0F) + </div><div class="line">             &apos; class=&quot;&quot;&apos;;</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    /* handle exception */</div><div class="line">  &#125;</div><div class="line">  for (var i = 0 / 2; i &lt; classes.length; i++) &#123;</div><div class="line">    if (checkCondition(classes[i]) === undefined)</div><div class="line">      return /\d+[\s/]/g;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>或是可以接續上一個程式碼區塊的行號，使用 <code>=+</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s = &quot;JavaScript syntax highlighting&quot;;</div><div class="line">alert(s);</div></pre></td></tr></table></figure>
<h2 id="引用區塊標籤"><a href="#引用區塊標籤" class="headerlink" title="引用區塊標籤"></a>引用區塊標籤</h2><blockquote>
<p>您可以使用以下語法，表明自己的 <strong>姓名、時間與顏色</strong> 並與其他的引用區塊做區別<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 9:59 PM] [color=#907bf7]</p>
<blockquote>
<p>也支援巢狀引用區塊喔！<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 10:00 PM] [color=red]</p>
</blockquote>
</blockquote>
<h2 id="外部"><a href="#外部" class="headerlink" title="外部"></a>外部</h2><h3 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h3><div class="video-container"><iframe src="//www.youtube.com/embed/1G4isv_Fylg" frameborder="0" allowfullscreen></iframe></div>
<h3 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h3><div class="video-container"><iframe src="//player.vimeo.com/video/124148255" frameborder="0" allowfullscreen></iframe></div>
<h3 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h3><script src="//gist.github.com/schacon/4277.js"></script>
<h3 id="SlideShare"><a href="#SlideShare" class="headerlink" title="SlideShare"></a>SlideShare</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;%slideshare briansolis/<span class="number">26</span>-disruptive-technology-trends<span class="number">-2016</span><span class="number">-2018</span><span class="number">-56796196</span> %&#125;</div></pre></td></tr></table></figure>
<h3 id="Speakerdeck"><a href="#Speakerdeck" class="headerlink" title="Speakerdeck"></a>Speakerdeck</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;%speakerdeck sugarenia/xxlcss-how-to-scale-css-and-keep-your-sanity %&#125;</div></pre></td></tr></table></figure>
<h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p><strong>注意：請使用 https 的網址，否則可能會被您的瀏覽器阻擋載入</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;%pdf https:<span class="comment">//papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf %&#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>您可以使用 <strong>MathJax</strong> 語法 來產生 <em>LaTeX</em> 數學表達式，如同 <a href="http://math.stackexchange.com/" target="_blank" rel="external">math.stackexchange.com</a>：</p>
<p>The <em>Gamma function</em> satisfying $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$ is via the Euler integral</p>
<p>$$<br>x = {-b \pm \sqrt{b^2-4ac} \over 2a}.<br>$$</p>
<p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.<br>$$</p>
<blockquote>
<p>更多關於 <strong>LaTeX</strong> 數學表達式 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">請至這裡</a></p>
</blockquote>
<h2 id="UML-圖表"><a href="#UML-圖表" class="headerlink" title="UML 圖表"></a>UML 圖表</h2><h3 id="循序圖"><a href="#循序圖" class="headerlink" title="循序圖"></a>循序圖</h3><p>您可以像是以下使用循序圖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">艾莉絲-&gt;包柏: 哈摟，你好嗎？</div><div class="line">Note right of 包柏: 包柏思考中</div><div class="line">包柏--&gt;艾莉絲: 我很好，謝謝！</div><div class="line">Note left of 艾莉絲: 艾莉絲回應</div><div class="line">艾莉絲-&gt;包柏: 最近過得怎樣？</div></pre></td></tr></table></figure>
<h3 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h3><p>您可以像是以下使用流程圖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 開始</div><div class="line">e=&gt;end: 結束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">op2=&gt;operation: 啦啦啦</div><div class="line">cond=&gt;condition: 是或否？</div><div class="line"></div><div class="line">st-&gt;op-&gt;op2-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op2</div></pre></td></tr></table></figure></p>
<h3 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">digraph hierarchy &#123;</div><div class="line"></div><div class="line">                nodesep=1.0 // increases the separation between nodes</div><div class="line">                </div><div class="line">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</div><div class="line">                edge [color=Blue, style=dashed] //All the lines look like this</div><div class="line"></div><div class="line">                Headteacher-&gt;&#123;Deputy1 Deputy2 BusinessManager&#125;</div><div class="line">                Deputy1-&gt;&#123;Teacher1 Teacher2&#125;</div><div class="line">                BusinessManager-&gt;ITManager</div><div class="line">                &#123;rank=same;ITManager Teacher1 Teacher2&#125;  // Put them on the same level</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gantt</div><div class="line">    title A Gantt Diagram</div><div class="line"></div><div class="line">    section Section</div><div class="line">    A task           :a1, 2014-01-01, 30d</div><div class="line">    Another task     :after a1  , 20d</div><div class="line">    section Another</div><div class="line">    Task in sec      :2014-01-12  , 12d</div><div class="line">    anther task      : 24d</div></pre></td></tr></table></figure>
<blockquote>
<p>更多關於 <strong>循序圖</strong> 語法 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">在這裡</a>.<br>更多關於 <strong>流程圖</strong> 語法 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">在這裡</a>.<br>更多關於 <strong>Graphviz</strong> 語法 <a href="http://www.tonyballantyne.com/graphs.html" target="_blank" rel="external">在這裡</a><br>更多關於 <strong>Mermaid</strong> 語法 <a href="http://knsv.github.io/mermaid" target="_blank" rel="external">在這裡</a></p>
</blockquote>
<h2 id="警告區塊"><a href="#警告區塊" class="headerlink" title="警告區塊"></a>警告區塊</h2><p>:::success<br>耶 :tada:<br>:::</p>
<p>:::info<br>這是訊息 :mega:<br>:::</p>
<p>:::warning<br>注意 :zap:<br>:::</p>
<p>:::danger<br>喔不 :fire:<br>:::</p>
<h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h3 id="標頭"><a href="#標頭" class="headerlink" title="標頭"></a>標頭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># h1 標頭</div><div class="line">## h2 標頭</div><div class="line">### h3 標頭</div><div class="line">#### h4 標頭</div><div class="line">##### h5 標頭</div><div class="line">###### h6 標頭</div></pre></td></tr></table></figure>
<h3 id="水平分隔線"><a href="#水平分隔線" class="headerlink" title="水平分隔線"></a>水平分隔線</h3><hr>
<hr>
<hr>
<h3 id="字形替換"><a href="#字形替換" class="headerlink" title="字形替換"></a>字形替換</h3><p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p>
<p>測試.. 測試… 測試….. 測試?….. 測試!….</p>
<p>!!!!!! ???? ,,</p>
<p>Remarkable – awesome</p>
<p>“Smartypants, 雙引號”</p>
<p>‘Smartypants, 單引號’</p>
<h3 id="強調"><a href="#強調" class="headerlink" title="強調"></a>強調</h3><p><strong>這是粗體文字</strong></p>
<p><strong>這是粗體文字</strong></p>
<p><em>這是斜體文字</em></p>
<p><em>這是斜體文字</em></p>
<p><del>這是刪除文字</del></p>
<p>上標： 19^th^</p>
<p>下標： H~2~O</p>
<p>++這是底線文字++</p>
<p>==這是標記文字==</p>
<h3 id="引用區塊"><a href="#引用區塊" class="headerlink" title="引用區塊"></a>引用區塊</h3><blockquote>
<p>引用區塊也可以是巢狀的喔…</p>
<blockquote>
<p>…可以多層次的使用…</p>
<blockquote>
<p>…或是用空白隔開 </p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h3><h4 id="項目"><a href="#項目" class="headerlink" title="項目"></a>項目</h4><ul>
<li>在行開頭使用 <code>+</code> <code>-</code> 或是 <code>*</code> 來建立清單</li>
<li>空兩個空白就可以產生子清單<ul>
<li>當清單標記使用的字元不同，會強制建立新的清單<ul>
<li>Ac tristique libero volutpat at</li>
</ul>
<ul>
<li>Facilisis in pretium nisl aliquet</li>
</ul>
<ul>
<li>Nulla volutpat aliquam velit</li>
</ul>
</li>
</ul>
</li>
<li>非常簡單！</li>
</ul>
<h4 id="編號"><a href="#編號" class="headerlink" title="編號"></a>編號</h4><ol>
<li>Lorem ipsum dolor sit amet</li>
<li>Consectetur adipiscing elit</li>
<li>Integer molestie lorem at massa</li>
</ol>
<ol>
<li>您可以逐次增加項目數字…</li>
<li>…或是全部都使用 <code>1.</code></li>
<li>feafw</li>
<li>332</li>
<li>242</li>
<li>2552</li>
<li>e2</li>
</ol>
<p>從其他範圍開始編號清單</p>
<ol>
<li>foo</li>
<li>bar</li>
</ol>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>行內 <code>程式碼</code></p>
<p>縮排程式碼</p>
<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre><p>程式碼區塊</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sample text here...</div></pre></td></tr></table></figure>
<p>語法標色</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">bar</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> bar++;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">5</span>));</div></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th>選項</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>向右對齊</p>
<table>
<thead>
<tr>
<th style="text-align:right">選項</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">data</td>
<td style="text-align:right">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:right">engine</td>
<td style="text-align:right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:right">ext</td>
<td style="text-align:right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>向左對齊</p>
<table>
<thead>
<tr>
<th style="text-align:left">選項</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">data</td>
<td style="text-align:left">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:left">engine</td>
<td style="text-align:left">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:left">ext</td>
<td style="text-align:left">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>置中對齊</p>
<table>
<thead>
<tr>
<th style="text-align:center">選項</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">data</td>
<td style="text-align:center">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:center">engine</td>
<td style="text-align:center">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:center">ext</td>
<td style="text-align:center">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h3 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h3><p><a href="http://dev.nodeca.com" target="_blank" rel="external">連結文字</a><br><a href="http://nodeca.github.io/pica/demo/" title="標題文字！" target="_blank" rel="external">加上標題的連結文字</a><br>自動轉換連結 <a href="https://github.com/nodeca/pica" target="_blank" rel="external">https://github.com/nodeca/pica</a></p>
<h3 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h3><p><img src="https://octodex.github.com/images/minion.png" alt="Minion"><br><img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat"><br>如同連結一般，圖片也可以用註腳語法<br><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat"><br>使用參考，可以在稍後的文件中再定義圖片網址</p>
<p><img src="https://octodex.github.com/images/minion.png =200x200" alt="Minion"><br>使用指定的大小顯示圖片</p>
<h3 id="註腳"><a href="#註腳" class="headerlink" title="註腳"></a>註腳</h3><p>註腳 1 連結[^first].<br>註腳 2 連結[^second].<br>行內註腳^[行內註腳的文字] 定義<br>重複的註腳參考[^second].</p>
<p>[^first]: 註腳 <strong>也可以標記</strong><br>    還可以有很多段落<br>[^second]: 註腳 文字</p>
<h3 id="定義清單"><a href="#定義清單" class="headerlink" title="定義清單"></a>定義清單</h3><p>名詞 1</p>
<p>:   定義 1 快速連續項目</p>
<p>名詞 2 加上 <em>行內標記</em></p>
<p>:   定義 2</p>
<pre><code>    { 這些程式碼屬於 定義 2 的一部分 }

定義 2 的第三段落
</code></pre><p><em>緊密樣式：</em></p>
<p>名詞 1<br>  ~ 定義 1</p>
<p>名詞 2<br>  ~ 定義 2a<br>  ~ 定義 2b</p>
<h3 id="縮寫"><a href="#縮寫" class="headerlink" title="縮寫"></a>縮寫</h3><p>這是 HTML 的縮寫範例<br>它會轉換 “HTML”，但是縮寫旁邊其他的部分，例如：”xxxHTMLyyy”，不受影響</p>
<p>*[HTML]: Hyper Text Markup Language</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;編輯&quot;&gt;&lt;a href=&quot;#編輯&quot; class=&quot;headerlink&quot; title=&quot;編輯&quot;&gt;&lt;/a&gt;編輯&lt;/h1&gt;&lt;h2 id=&quot;快速鍵&quot;&gt;&lt;a href=&quot;#快速鍵&quot; class=&quot;headerlink&quot; title=&quot;快速鍵&quot;&gt;&lt;/a&gt;快速鍵&lt;/h2&gt;&lt;p&gt;跟又快又方便的Sublime text很像&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更多訊息請至 &lt;a href=&quot;https://codemirror.net/demo/sublime.html&quot;&gt;這裡&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;自動完成&quot;&gt;&lt;a href=&quot;#自動完成&quot; class=&quot;headerlink&quot; title=&quot;自動完成&quot;&gt;&lt;/a&gt;自動完成&lt;/h2&gt;&lt;p&gt;提供完整的 Markdown 自動完成與提示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表情符號：輸入 &lt;code&gt;:&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;li&gt;程式碼區塊：輸入 &lt;code&gt;3个&lt;/code&gt; ` 加上一個字元 顯示提示 &lt;/li&gt;
&lt;li&gt;標頭：輸入 &lt;code&gt;#&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;li&gt;參考：輸入 &lt;code&gt;[]&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;li&gt;外部：輸入 &lt;code&gt;{}&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;li&gt;圖片：輸入 &lt;code&gt;!&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;標題&quot;&gt;&lt;a href=&quot;#標題&quot; class=&quot;headerlink&quot; title=&quot;標題&quot;&gt;&lt;/a&gt;標題&lt;/h2&gt;&lt;p&gt;會使用 &lt;strong&gt;第一個第一級標頭&lt;/strong&gt; 作為筆記標題&lt;/p&gt;
&lt;h2 id=&quot;標籤&quot;&gt;&lt;a href=&quot;#標籤&quot; class=&quot;headerlink&quot; title=&quot;標籤&quot;&gt;&lt;/a&gt;標籤&lt;/h2&gt;&lt;p&gt;如同以下方式來使用標籤，它們會顯示在您的 &lt;strong&gt;歷史紀錄&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&quot;tags-功能-酷-更新&quot;&gt;&lt;a href=&quot;#tags-功能-酷-更新&quot; class=&quot;headerlink&quot; title=&quot;tags: 功能 酷 更新&quot;&gt;&lt;/a&gt;tags: &lt;code&gt;功能&lt;/code&gt; &lt;code&gt;酷&lt;/code&gt; &lt;code&gt;更新&lt;/code&gt;&lt;/h6&gt;&lt;h2 id=&quot;YAML-metadata&quot;&gt;&lt;a href=&quot;#YAML-metadata&quot; class=&quot;headerlink&quot; title=&quot;YAML metadata&quot;&gt;&lt;/a&gt;&lt;a href=&quot;./yaml-metadata&quot;&gt;YAML metadata&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;提供描述筆記的資訊，以進階設定瀏覽行為，詳細請至上連結&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;robots: 設定網路機器人 meta&lt;/li&gt;
&lt;li&gt;lang: 設定瀏覽器顯示語言&lt;/li&gt;
&lt;li&gt;dir: 設定文字方向&lt;/li&gt;
&lt;li&gt;breaks: 設定是否使用分行&lt;/li&gt;
&lt;li&gt;mathjax: 設定是否使用 mathjax&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;表情符號&quot;&gt;&lt;a href=&quot;#表情符號&quot; class=&quot;headerlink&quot; title=&quot;表情符號&quot;&gt;&lt;/a&gt;表情符號&lt;/h2&gt;&lt;p&gt;您可以像是這樣使用表情符號 :smile: :smiley: :cry: :wink:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完整的表情符號列表 &lt;a href=&quot;http://www.emoji-cheat-sheet.com/&quot;&gt;在這裡&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;待辦清單&quot;&gt;&lt;a href=&quot;#待辦清單&quot; class=&quot;headerlink&quot; title=&quot;待辦清單&quot;&gt;&lt;/a&gt;待辦清單&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[ ] 待辦&lt;ul&gt;
&lt;li&gt;[x] 買些沙拉&lt;/li&gt;
&lt;li&gt;[x] 刷牙&lt;/li&gt;
&lt;li&gt;[ ] 喝水
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Hello World</title>
    <link href="https://huos3203.github.io/2016/12/20/Hexo-hello-world/"/>
    <id>https://huos3203.github.io/2016/12/20/Hexo-hello-world/</id>
    <published>2016-12-20T10:02:13.000Z</published>
    <updated>2017-01-13T08:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft <span class="string">"草稿名"</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish <span class="string">"草稿名"</span>  <span class="comment">#Moves a draft post from _drafts to _posts folder.</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>在我们开始之前,你必须在 <code>_config.yml</code> 修改设置。一个有效的部署设置必须有 <code>type</code> 字段。例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    <span class="built_in">type</span>: git</div></pre></td></tr></table></figure></p>
<p>你可用同时部署到多个type，Hexo将依次执行每个部署。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    - <span class="built_in">type</span>: git</div><div class="line">      repo:</div><div class="line">    - <span class="built_in">type</span>: heroku</div><div class="line">      repo:</div></pre></td></tr></table></figure></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><h4 id="安装同步到git-插件"><a href="#安装同步到git-插件" class="headerlink" title="安装同步到git 插件"></a>安装同步到git 插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>编辑<code>_config.yml</code>设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    <span class="built_in">type</span>: git</div><div class="line">    repo: &lt;repository url&gt;</div><div class="line">    branch: [branch]</div><div class="line">    message: [message]</div></pre></td></tr></table></figure></p>
<h4 id="安装生成RSS支持插件"><a href="#安装生成RSS支持插件" class="headerlink" title="安装生成RSS支持插件"></a>安装生成RSS支持插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install  hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>编辑<code>_config.yml</code>设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">    <span class="built_in">type</span>: atom</div><div class="line">    path: atom.xml</div><div class="line">    <span class="built_in">limit</span>: 20</div><div class="line">    hub:</div></pre></td></tr></table></figure></p>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo标签插件</title>
    <link href="https://huos3203.github.io/2016/12/20/Hexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/"/>
    <id>https://huos3203.github.io/2016/12/20/Hexo标签插件/</id>
    <published>2016-12-20T10:01:13.000Z</published>
    <updated>2017-01-19T04:39:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>
<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><hr>
<p>在文章中插入引言，可包含作者、来源和标题。</p>
<h3 id="别号：-quote"><a href="#别号：-quote" class="headerlink" title="别号： quote"></a>别号： quote</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class="line">content</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><hr>
<h5 id="无参普通blockquote"><a href="#无参普通blockquote" class="headerlink" title="无参普通blockquote"></a>无参普通blockquote</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote %&#125;</div><div class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<a id="more"></a>
<h5 id="引用书上的句子"><a href="#引用书上的句子" class="headerlink" title="引用书上的句子"></a>引用书上的句子</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</div><div class="line">Do not just seek happiness <span class="keyword">for</span> yourself. Seek happiness <span class="keyword">for</span> all. Through kindness. Through mercy.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>boyer huo </strong><cite>Wide Awake</cite></footer></blockquote>
<h5 id="引用-Twitter"><a href="#引用-Twitter" class="headerlink" title="引用 Twitter"></a>引用 Twitter</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote @DevDocs https:<span class="comment">//twitter.com/devdocs/status/356095192085962752 %&#125;</span></div><div class="line">NEW: DevDocs now comes <span class="keyword">with</span> syntax highlighting. http:<span class="comment">//devdocs.io</span></div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="external">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<h5 id="引用网络上的文章"><a href="#引用网络上的文章" class="headerlink" title="引用网络上的文章"></a>引用网络上的文章</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote Seth Godin http:<span class="comment">//sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span></div><div class="line">Every interaction is both precious and an opportunity to delight.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><hr>
<p>在文章中插入代码。</p>
<h3 id="别名-code"><a href="#别名-code" class="headerlink" title="别名:code"></a>别名:code</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><hr>
<h5 id="普通的代码块"><a href="#普通的代码块" class="headerlink" title="普通的代码块"></a>普通的代码块</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock %&#125;</div><div class="line">alert(<span class="string">'Hello World!'</span>);</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure>
<h5 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock lang:objc %&#125;</div><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div></pre></td></tr></table></figure>
<h5 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock <span class="built_in">Array</span>.map %&#125;</div><div class="line">array.map(callback[, thisArg])</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Array.map</div><div class="line">array.map(callback[, thisArg])</div></pre></td></tr></table></figure>
<h5 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a>附加说明和网址</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock _.compact http:<span class="comment">//underscorejs.org/#compact Underscore.js %&#125;</span></div><div class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);</div><div class="line">=&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="external">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.compactUnderscore.js</div><div class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class="line">=&gt; [1, 2, 3]</div></pre></td></tr></table></figure>
<h2 id="反引号代码块-MD语法"><a href="#反引号代码块-MD语法" class="headerlink" title="反引号代码块 (MD语法)"></a>反引号代码块 (MD语法)</h2><hr>
<h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="行内代码块"><a href="#行内代码块" class="headerlink" title="行内代码块"></a>行内代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">行内 <span class="code">`code 块 `</span></div></pre></td></tr></table></figure>
<h4 id="缩进代码块"><a href="#缩进代码块" class="headerlink" title="缩进代码块"></a>缩进代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Some comments</div><div class="line">line 1 of code</div><div class="line">line 2 of code</div><div class="line">line 3 of code</div></pre></td></tr></table></figure>
<h4 id="多行代码块"><a href="#多行代码块" class="headerlink" title="多行代码块"></a>多行代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="code">``` [language] [title] [url] [link text] </span></div><div class="line"></div><div class="line">    代码块</div><div class="line"></div><div class="line"> `` `</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><hr>
<h3 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="默认左对齐"><a href="#默认左对齐" class="headerlink" title="默认左对齐"></a>默认左对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|-------|-------|----------|</div><div class="line">|文本内容 |文本内容| 文本内容  |</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>layout</td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td>comments</td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td>tags</td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>categories</td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网址</td>
</tr>
</tbody>
</table>
<h4 id="向右对齐"><a href="#向右对齐" class="headerlink" title="向右对齐"></a>向右对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|-------:|-------:|-------:|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:right">三种布局</th>
<th style="text-align:right">路径:(储存到路径文件夹)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">post</td>
<td style="text-align:right">source/_posts</td>
</tr>
<tr>
<td style="text-align:right">page</td>
<td style="text-align:right">source</td>
</tr>
<tr>
<td style="text-align:right">draft</td>
<td style="text-align:right">source/_drafts</td>
</tr>
</tbody>
</table>
<h4 id="向左对齐"><a href="#向左对齐" class="headerlink" title="向左对齐"></a>向左对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|:------|:------|:------|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">日期变量</th>
<th style="text-align:left">描述:（可以通过日期来管理文章）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:title</td>
<td style="text-align:left">标题（小写，空格将会被替换为短杠）</td>
</tr>
<tr>
<td style="text-align:left">:year</td>
<td style="text-align:left">建立的年份，比如， 2015</td>
</tr>
<tr>
<td style="text-align:left">:month</td>
<td style="text-align:left">建立的月份（有前导零），比如， 04</td>
</tr>
<tr>
<td style="text-align:left">:i_month</td>
<td style="text-align:left">建立的月份（无前导零），比如， 4</td>
</tr>
<tr>
<td style="text-align:left">:day</td>
<td style="text-align:left">建立的日期（有前导零），比如， 07</td>
</tr>
<tr>
<td style="text-align:left">:i_day</td>
<td style="text-align:left">建立的日期（无前导零），比如， 7</td>
</tr>
</tbody>
</table>
<h4 id="居中对齐"><a href="#居中对齐" class="headerlink" title="居中对齐"></a>居中对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|:------:|:------:|:------:|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout</td>
<td style="text-align:center">布局当:false不加任何布局样式</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">文件建立日期</td>
</tr>
</tbody>
</table>
<h2 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h2><hr>
<p>在文章中插入 Pull quote。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% pullquote [class] %&#125;</div><div class="line">content</div><div class="line">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><hr>
<p>在文章中嵌入 jsFiddle。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><hr>
<p>在文章中嵌入 Gist。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% gist gist_id [filename] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><hr>
<p>在文章中插入 iframe。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe url [width] [height] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><hr>
<h3 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="Hexo语法"><a href="#Hexo语法" class="headerlink" title="Hexo语法"></a>Hexo语法</h4><hr>
<p>在文章中插入指定大小的图片。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="MD语法"><a href="#MD语法" class="headerlink" title="MD语法"></a>MD语法</h4><hr>
<h5 id="原图-toolTip"><a href="#原图-toolTip" class="headerlink" title="原图+toolTip"></a>原图+toolTip</h5><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![boyer logo](http://boyers.coding.me/img/logo.png &quot;这是我的logo图片&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://boyers.coding.me/img/logo.png" alt="boyer logo" title="这是我的logo图片"></p>
<h5 id="注脚语法"><a href="#注脚语法" class="headerlink" title="注脚语法"></a>注脚语法</h5><hr>
<p>可以在稍後的文件中再定义图片地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![boyer logo][logo]</div><div class="line">[logo]: http://boyers.coding.me/img/logo.png  &quot;这是我的logo图片&quot;</div></pre></td></tr></table></figure></p>
<p><img src="http://boyers.coding.me/img/logo.png" alt="boyer logo" title="这是我的logo图片"></p>
<h5 id="指定图片大小"><a href="#指定图片大小" class="headerlink" title="指定图片大小"></a>指定图片大小</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![boyer logo](http://boyers.coding.me/img/logo.png [200] [200] &quot;这是我的logo图片&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://boyers.coding.me/img/logo.png [200] [200]" alt="boyer logo" title="这是我的logo图片"></p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><hr>
<h3 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="Hexo语法-1"><a href="#Hexo语法-1" class="headerlink" title="Hexo语法"></a>Hexo语法</h4><hr>
<p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% link text url [external] [title] %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="MD语法-1"><a href="#MD语法-1" class="headerlink" title="MD语法"></a>MD语法</h4><hr>
<h5 id="智能识别超链接"><a href="#智能识别超链接" class="headerlink" title="智能识别超链接"></a>智能识别超链接</h5><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://boyers.coding.me</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" target="_blank" rel="external">http://boyers.coding.me</a></p>
<h5 id="文本式"><a href="#文本式" class="headerlink" title="文本式"></a>文本式</h5><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">boyer Blog</span>](<span class="link">http://boyers.coding.me</span>)</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" target="_blank" rel="external">boyer Blog</a></p>
<h5 id="toolTip式"><a href="#toolTip式" class="headerlink" title="toolTip式"></a>toolTip式</h5><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">boyer Blog</span>](<span class="link">http://boyers.coding.me "这是我的博客首页"</span>)</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" title="这是我的博客首页" target="_blank" rel="external">boyer Blog</a></p>
<h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><hr>
<p>插入 source 文件夹内的代码文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><hr>
<p>在文章中插入 Youtube 视频。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% youtube video_id %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><hr>
<p>在文章中插入 Vimeo 视频。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% vimeo video_id %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><hr>
<p>引用其他文章的链接。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% post_path slug %&#125;</div><div class="line">&#123;% post_link slug [title] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><hr>
<p>引用文章的资源。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_path slug %&#125;</div><div class="line">&#123;% asset_img slug [title] %&#125;</div><div class="line">&#123;% asset_link slug [title] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><hr>
<p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">content</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。&lt;/p&gt;
&lt;h2 id=&quot;引用块&quot;&gt;&lt;a href=&quot;#引用块&quot; class=&quot;headerlink&quot; title=&quot;引用块&quot;&gt;&lt;/a&gt;引用块&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在文章中插入引言，可包含作者、来源和标题。&lt;/p&gt;
&lt;h3 id=&quot;别号：-quote&quot;&gt;&lt;a href=&quot;#别号：-quote&quot; class=&quot;headerlink&quot; title=&quot;别号： quote&quot;&gt;&lt;/a&gt;别号： quote&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% blockquote [author[, source]] [link] [source_link_title] %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblockquote %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;样例&quot;&gt;&lt;a href=&quot;#样例&quot; class=&quot;headerlink&quot; title=&quot;样例&quot;&gt;&lt;/a&gt;样例&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id=&quot;无参普通blockquote&quot;&gt;&lt;a href=&quot;#无参普通blockquote&quot; class=&quot;headerlink&quot; title=&quot;无参普通blockquote&quot;&gt;&lt;/a&gt;无参普通blockquote&lt;/h5&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% blockquote %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblockquote %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发(一)</title>
    <link href="https://huos3203.github.io/2016/12/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91-%E4%B8%80/"/>
    <id>https://huos3203.github.io/2016/12/19/微信小程序开发-一/</id>
    <published>2016-12-19T14:59:10.000Z</published>
    <updated>2017-01-19T04:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>我们需要通过<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=20161122" target="_blank" rel="external">开发者工具</a>，来完成小程序创建和代码编辑。</p>
<p>开发者工具安装完成后，打开并使用微信扫码登录。选择创建“项目”，填入上文获取到的 AppID ，设置一个本地项目的名称（非小程序名称），比如“我的第一个项目”，并选择一个本地的文件夹作为代码存储的目录，点击“新建项目”就可以了。</p>
<p>为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择“是”，开发者工具会帮助我们在开发目录里生成一个简单的 demo。</p>
<p>项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在“编辑”里可以查看和编辑我们的代码，在“调试”里可以测试代码并模拟小程序在微信客户端效果，在“项目”里可以发送到手机里预览实际效果。</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>点击开发者工具左侧导航的“编辑”，看到这个项目文件结构。</p>
<p>三个必不可少的<code>app.js、app.json、app.wxss</code>:</p>
<ul>
<li><code>.js</code>后缀的是脚本文件</li>
<li><code>.json</code>后缀的文件是配置文件</li>
<li><code>.wxss</code>后缀的是样式表文件</li>
</ul>
<p>微信小程序会读取这些文件，并生成小程序实例。<br><a id="more"></a></p>
<h4 id="app-js脚本代码"><a href="#app-js脚本代码" class="headerlink" title="app.js脚本代码"></a>app.js脚本代码</h4><p>app.json 是对整个小程序的全局配置。 可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。</p>
<blockquote>
<p>调用框架提供的丰富的 API，如本例的同步存储及同步读取本地数据。想了解更多可用 API，可参考 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/?t=20161122" target="_blank" rel="external">API 文档</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.js</span></div><div class="line">App(&#123;</div><div class="line">  <span class="attr">onLaunch</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//调用API从本地缓存中获取数据</span></div><div class="line">    <span class="keyword">var</span> logs = wx.getStorageSync(<span class="string">'logs'</span>) || []</div><div class="line">    logs.unshift(<span class="built_in">Date</span>.now())</div><div class="line">    wx.setStorageSync(<span class="string">'logs'</span>, logs)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">getUserInfo</span>:<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.globalData.userInfo)&#123;</div><div class="line">      <span class="keyword">typeof</span> cb == <span class="string">"function"</span> &amp;&amp; cb(<span class="keyword">this</span>.globalData.userInfo)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="comment">//调用登录接口</span></div><div class="line">      wx.login(&#123;</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          wx.getUserInfo(&#123;</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">              that.globalData.userInfo = res.userInfo;</div><div class="line">              <span class="keyword">typeof</span> cb == <span class="string">"function"</span> &amp;&amp; cb(that.globalData.userInfo)</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">globalData</span>:&#123;</div><div class="line">    <span class="attr">userInfo</span>:<span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="app-json-全局配置"><a href="#app-json-全局配置" class="headerlink" title="app.json 全局配置"></a>app.json 全局配置</h4><p>可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"pages"</span>:[</div><div class="line">    <span class="string">"pages/index/index"</span>,</div><div class="line">    <span class="string">"pages/logs/logs"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"window"</span>:&#123;</div><div class="line">    <span class="string">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</div><div class="line">    <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</div><div class="line">    <span class="string">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</div><div class="line">    <span class="string">"navigationBarTextStyle"</span>:<span class="string">"black"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意该文件不可添加任何注释。更多配置可参考<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html?t=20161122" target="_blank" rel="external">配置详解</a></p>
</blockquote>
<h4 id="app-wxss-公共样式表"><a href="#app-wxss-公共样式表" class="headerlink" title="app.wxss 公共样式表"></a>app.wxss 公共样式表</h4><p>我们可以在页面组件的 class 属性上直接使用 app.wxss 中声明的样式规则<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**app.wxss**/</span></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">200</span>rpx <span class="number">0</span>;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>在这个教程里，我们有两个页面，index 欢迎页和 logs 小程序启动日志的展示页，他们都在 pages 目录下。</p>
<p>微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页。</p>
<p>每一个小程序页面是由同路径下同名的四个不同后缀文件的组成:</p>
<ul>
<li>.js后缀的文件是脚本文件</li>
<li>.json后缀的文件是配置文件（非必须）</li>
<li>.wxss后缀的是样式表文件（非必须）</li>
<li>.wxml后缀的文件是页面结构文件  </li>
</ul>
<h4 id="index-wxml页面结构："><a href="#index-wxml页面结构：" class="headerlink" title="index.wxml页面结构："></a>index.wxml页面结构：</h4><p>使用了<code>&lt;view/&gt;、&lt;image/&gt;、&lt;text/&gt;</code>来搭建页面结构(container)，绑定数据(userInfo)和交互处理函数(bindViewTap)。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!--index.wxml--&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">view</span>  <span class="attr">bindtap</span>=<span class="string">"bindViewTap"</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span></div><div class="line"><span class="code">    &lt;image class="userinfo-avatar" src="&#123;&#123;userInfo.avatarUrl&#125;&#125;" background-size="cover"&gt;&lt;/image&gt;</span></div><div class="line"><span class="code">    &lt;text class="userinfo-nickname"&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;/text&gt;</span></div><div class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span>&gt;</span></span></div><div class="line"><span class="code">    &lt;text class="user-motto"&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt;</span></div><div class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h4 id="index-js脚本文件"><a href="#index-js脚本文件" class="headerlink" title="index.js脚本文件"></a>index.js脚本文件</h4><p>在这个文件中我们可以监听并处理页面的生命周期函数、获取小程序实例，声明并处理数据，响应页面交互事件等。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="comment">//获取应用实例</span></div><div class="line"><span class="keyword">var</span> app = getApp()</div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">motto</span>: <span class="string">'Hello World'</span>,</div><div class="line">    <span class="attr">userInfo</span>: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//事件处理函数</span></div><div class="line">  bindViewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    wx.navigateTo(&#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'../logs/logs'</span></div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'onLoad'</span>)</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">    <span class="comment">//调用应用实例的方法获取全局数据</span></div><div class="line">    app.getUserInfo(<span class="function"><span class="keyword">function</span>(<span class="params">userInfo</span>)</span>&#123;</div><div class="line">      <span class="comment">//更新数据</span></div><div class="line">      that.setData(&#123;</div><div class="line">        <span class="attr">userInfo</span>:userInfo</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="index-wxss样式表"><a href="#index-wxss样式表" class="headerlink" title="index.wxss样式表"></a>index.wxss样式表</h4><ol>
<li>页面的样式表是非必要的,该样式表中的样式规则会层叠覆盖 app.wxss 中的样式规则。</li>
<li>页面的结构文件中可以直接使用 app.wxss 中指定的样式规则。</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**index.wxss**/</span></div><div class="line"><span class="selector-class">.userinfo</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.userinfo-avatar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">128</span>rpx;</div><div class="line">  <span class="attribute">height</span>: <span class="number">128</span>rpx;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">20</span>rpx;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.userinfo-nickname</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#aaa</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.usermotto</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="index-json配置文件"><a href="#index-json配置文件" class="headerlink" title="index.json配置文件"></a>index.json配置文件</h4><p>页面的配置文件是非必要的。当有页面的配置文件时，配置项在该页面会覆盖 app.json 的 window 中相同的配置项。如果没有指定的页面配置文件，则在该页面直接使用 app.json 中的默认配置。</p>
<h3 id="logs-的页面"><a href="#logs-的页面" class="headerlink" title="logs 的页面"></a>logs 的页面</h3><h4 id="logs-wxml页面结构"><a href="#logs-wxml页面结构" class="headerlink" title="logs.wxml页面结构"></a>logs.wxml页面结构</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!--logs.wxml--&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container log-list"</span>&gt;</span></span></div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;logs&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"log"</span>&gt;</span></span></div><div class="line"><span class="code">    &lt;text class="log-item"&gt;&#123;&#123;index + 1&#125;&#125;. &#123;&#123;log&#125;&#125;&lt;/text&gt;</span></div><div class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="logs-js脚本文件"><a href="#logs-js脚本文件" class="headerlink" title="logs.js脚本文件"></a>logs.js脚本文件</h4><p>logs 页面使用 <code>&lt;block/&gt;</code> 控制标签来组织代码，在 <code>&lt;block/&gt;</code> 上使用 <code>wx:for</code> 绑定 logs 数据，并将 logs 数据循环展开节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//logs.js</span></div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'../../utils/util.js'</span>)</div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">logs</span>: []</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      <span class="attr">logs</span>: (wx.getStorageSync(<span class="string">'logs'</span>) || []).map(<span class="function"><span class="keyword">function</span> (<span class="params">log</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> util.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>(log))</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">运行结果如下：</div></pre></td></tr></table></figure></p>
<h3 id="运行结果如下："><a href="#运行结果如下：" class="headerlink" title="运行结果如下："></a>运行结果如下：</h3><p><img src="https://mp.weixin.qq.com/debug/wxadoc/dev/image/start_result.png?t=20161122" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h3&gt;&lt;p&gt;我们需要通过&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=20161122&quot;&gt;开发者工具&lt;/a&gt;，来完成小程序创建和代码编辑。&lt;/p&gt;
&lt;p&gt;开发者工具安装完成后，打开并使用微信扫码登录。选择创建“项目”，填入上文获取到的 AppID ，设置一个本地项目的名称（非小程序名称），比如“我的第一个项目”，并选择一个本地的文件夹作为代码存储的目录，点击“新建项目”就可以了。&lt;/p&gt;
&lt;p&gt;为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择“是”，开发者工具会帮助我们在开发目录里生成一个简单的 demo。&lt;/p&gt;
&lt;p&gt;项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在“编辑”里可以查看和编辑我们的代码，在“调试”里可以测试代码并模拟小程序在微信客户端效果，在“项目”里可以发送到手机里预览实际效果。&lt;/p&gt;
&lt;h3 id=&quot;编写代码&quot;&gt;&lt;a href=&quot;#编写代码&quot; class=&quot;headerlink&quot; title=&quot;编写代码&quot;&gt;&lt;/a&gt;编写代码&lt;/h3&gt;&lt;p&gt;点击开发者工具左侧导航的“编辑”，看到这个项目文件结构。&lt;/p&gt;
&lt;p&gt;三个必不可少的&lt;code&gt;app.js、app.json、app.wxss&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.js&lt;/code&gt;后缀的是脚本文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.json&lt;/code&gt;后缀的文件是配置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.wxss&lt;/code&gt;后缀的是样式表文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微信小程序会读取这些文件，并生成小程序实例。&lt;br&gt;
    
    </summary>
    
      <category term="小程序" scheme="https://huos3203.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://huos3203.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>gitbook+Hexo命令行</title>
    <link href="https://huos3203.github.io/2016/12/19/gitbook+Hexo/"/>
    <id>https://huos3203.github.io/2016/12/19/gitbook+Hexo/</id>
    <published>2016-12-19T07:35:20.000Z</published>
    <updated>2017-01-12T08:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>集成：</p>
<ol>
<li>在hexo 的source目录下gitbook init</li>
<li>使用gitbook editor 工具 选择open 方式打开source 目录</li>
<li>在boyers目录中： hexo new postName</li>
<li>在gitbook editor中：手动配置summary.md关联 postName</li>
</ol>
<p>发布：<br>hexo：hexo g  ，hexo d<br>gitbook：直接点击同步，把source资源同步到github中，在通知gitbook编译出书本格式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在hexo 的source目录下gitbook init&lt;/li&gt;
&lt;li&gt;使用gitbook editor 工具 选择open 方式打开source 目录&lt;/li&gt;
&lt;li&gt;在boyers目录中： hexo new postName&lt;/l
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>猿题库架构学习</title>
    <link href="https://huos3203.github.io/2016/01/13/2016-01-13-yuan-ti-ku-jia-gou-xue-xi/"/>
    <id>https://huos3203.github.io/2016/01/13/2016-01-13-yuan-ti-ku-jia-gou-xue-xi/</id>
    <published>2016-01-13T08:41:36.000Z</published>
    <updated>2016-12-19T07:15:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GTD入门</title>
    <link href="https://huos3203.github.io/2016/01/07/2016-01-07-gtdru-men/"/>
    <id>https://huos3203.github.io/2016/01/07/2016-01-07-gtdru-men/</id>
    <published>2016-01-07T08:00:53.000Z</published>
    <updated>2017-01-12T02:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>####什么是GTD？<br>GTD 的基本理论是把一个人所要要完成的任务和事件全部从大脑中移出来，记录到纸上。这样，大脑便会不被多余的事情打搅而集中于现在所需完成的事情上面。<br>GTD 的创始人：David Allen，提倡建立一个详细的To-Do列表，比如说：列出要打的电话，去市区要完成的任务。他还提出一个“二分钟法则”：如果任何一件可以在二分钟内完成的事情，那么就必须得现在马上完成。</p>
<p>####GTD守则：<br>        收集任务  设置每天最重要的任务<br>        （把所有你需要做的和需要完成的事情全部记录下来，放在一个“收集箱”里）<br>        ↓<br>        过程<br>        （每次按照顺序，一次只做一件事）<br>        ↓<br>        管理任务<br>        （列出有详细内容的to-do列表）<br>        ↓<br>        复习任务<br>        （复习你所有完成的任务，计划方案和等待完成的事情。确保每一件新进入的任务都有很好的安排）<br>        ↓<br>        开始行动！  </p>
<p>####建立有强行动性的任务清单<br>任务清单（To-do List）的重要性毋庸置疑，建立有强行动性的任务清单可以让你更清楚地明白自己需要完成的任务，同时还保持了你去完成任务的激情和动力。</p>
<ol>
<li>分解任务：就像走远路时，以每一段路程为目标，让人更有动力去追求一样。如果你要阅读一本书，便可以将任务分成“读完第一章”，“读完第二章”等等。</li>
<li>使用有力的动词：比如说联系某个人，就要写上“给某某打电话”或者“发邮件给某某”而不是写“联系某某”。</li>
<li>有限的清单：谁都不希望有一张写满几大页的任务清单，你需要找出那些有强动力的行动。</li>
<li>清理已完成的任务：已完成的任务要及时清理，否者会阻碍你的下一步行动任务。</li>
</ol>
<p>####工具类：<br><img src="/images/IFTTT.jpg" alt=""></p>
<p>####微信推出应用号的处境：</p>
<p><img src="/images/QQ20160114-1.png" alt=""></p>
<p>####写文章：把想到的先列出来，慢慢整理调整，梳理出写作思路。<br>演变过程：<br><img src="/images/QbMJNrM.png!web.png" alt=""></p>
<p><img src="/images/vIfAjiY.png!web.png" alt=""></p>
<p>####学习时间技巧图：<br><img src="/images/QQ20160114-0.png" alt=""></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NjA3OTM0MA==&amp;mid=403475231&amp;idx=1&amp;sn=bbf21f2e37e91fc10d1a48285e8abefd&amp;scene=23&amp;srcid=0115194ziliaGGBscdYC3N0d#rd" target="_blank" rel="external"><img src="/images/IMG_0028.JPG =400x400" alt="用更短的时间达到更佳效果和更好成绩" title="用更短的时间达到更佳效果和更好成绩"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####什么是GTD？&lt;br&gt;GTD 的基本理论是把一个人所要要完成的任务和事件全部从大脑中移出来，记录到纸上。这样，大脑便会不被多余的事情打搅而集中于现在所需完成的事情上面。&lt;br&gt;GTD 的创始人：David Allen，提倡建立一个详细的To-Do列表，比如说：列出要
    
    </summary>
    
      <category term="CI" scheme="https://huos3203.github.io/categories/CI/"/>
    
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>git svn桥接命令的基础</title>
    <link href="https://huos3203.github.io/2016/01/05/2016-01-05-git-svnqiao-jie-ming-ling-de-ji-chu/"/>
    <id>https://huos3203.github.io/2016/01/05/2016-01-05-git-svnqiao-jie-ming-ling-de-ji-chu/</id>
    <published>2016-01-05T06:18:00.000Z</published>
    <updated>2017-01-12T08:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/book/zh/v1/Git-与其他系统-Git-与-Subversion#git-svn" target="_blank" rel="external">git svn</a></p>
<p>通过几个简单的工作流程了解到<code>git svn</code>常见命令：<br>值得警戒的是，在使用 git svn 的时候，你实际是在与 Subversion 交互，Git 比它要高级复杂的多。尽管可以在本地随意的进行分支和合并，最好还是通过衍合保持线性的提交历史，</p>
<ol>
<li>尽量避免类似与远程 Git 仓库动态交互这样的操作。</li>
<li>避免修改历史再重新推送的做法，也不要同时推送到并行的 Git 仓库来试图与其他 Git 用户合作。</li>
<li>Subersion 只能保存单一的线性提交历史，一不小心就会被搞糊涂。</li>
<li>合作团队中同时有人用 SVN 和 Git，一定要确保所有人都使用 SVN 服务来协作——这会让生活轻松很多。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://git-scm.com/book/zh/v1/Git-与其他系统-Git-与-Subversion#git-svn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git svn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过几个简单的工作流程了
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
      <category term="命令" scheme="https://huos3203.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>2015年12月22日冬至-圣诞节最新中关村骗术</title>
    <link href="https://huos3203.github.io/2015/12/25/2015-12-25-zui-xin-zhong-guan-cun-can-tong-jing-li/"/>
    <id>https://huos3203.github.io/2015/12/25/2015-12-25-zui-xin-zhong-guan-cun-can-tong-jing-li/</id>
    <published>2015-12-25T12:46:23.000Z</published>
    <updated>2016-12-19T07:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>被骗经过:<br>12月22号，本人午饭后拿着64G苹果6去中关村解锁，维修师傅说因为是日版内置卡贴机，加上系统已经升级ios9.2，就算拆机去除卡贴，再配上市面上的卡贴卡托也只能使用移动2G网络而且网络很不稳定的说法，再检测我手机质量后，开始让我以旧换新，并承诺加五百元就换一台他们店售卖的全新64G国行苹果6，我信以为真，在他们带领下，仅仅看到他们提供的白色包装盒，她们只说是国行全新机，其他没做任何说明，便刷去我500元整，并写下小条让我签字，我当时要求当场拆封查看真机，他们推辞说还需办理其它手续，就差人把白色包装盒拿走了，让我耐心等候便带我到另一间休息室里，她说需要我手机卡去帮我激活他们所说的全新苹果6，让我拔卡给她，没有争取我的同意，就要伸手帮我拔卡，只能拔卡给她，接着安排了一人陪我，拿着我的卡离开了休息室。</p>
<p>和这人闲聊一会便要看我刚才换机的小票，当他看到“专网”字样，起初对我说只能用4G网络，没有4G信号的话手机会自动进入休眠状态，无法接打电话，必须用他们所说的4G卡否则手机就无法开机使用。听到这，我就要求取消交易，在他打了一通电话百般为难的说，工作人员在排队等待办理激活手续了，已经无法取消，只能等。一番焦急等待后，仍不见人拿手机过来，已经意识到被骗，本想报案，手机卡已经被他们拿走，一个人没底没落完全崩溃，后来又听他说在专网手机上下载应用还必须绑定银行账号，每下载一个APP就要收取高额费用，一个QQ就要扣除70多元，估算一年下来最低消费就要达万元，我追问到如果办理不使用这部手机会怎么样，他说和服务商绑定后，达不到最低消费，手机号就会被锁定，火车票都买不到，我完全慌了，只能央求他任何条件帮忙。</p>
<p>他就让购买他的苹果5s，否则不会打电话让他们取消上一个被蒙骗的交易，拿不到我的手机卡，并承诺说购买他提供的机型是国行全新iPhone5s，支持全网，系统随便升级，下载APP不收任何费用，如果发现有任何问题，全额退款。当场就在先前的小票背面写了字据作保证。换购就让我把日版苹果6抵算1500元再加1900元，换购他所说的全新国行iPhone5s，当时心理已经感受到威胁恐吓，急于脱身，只想早点拿回手机卡，不得不任他们摆布，威逼利诱再次被刷走1900元整。</p>
<p>当拿到他拿到我的日版苹果6之后，又私自拆卸说我手机为翻新机，机壳和主板完全不是一套，非得让我再加200元，才肯归还手机卡和全新iPhone5s。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;被骗经过:&lt;br&gt;12月22号，本人午饭后拿着64G苹果6去中关村解锁，维修师傅说因为是日版内置卡贴机，加上系统已经升级ios9.2，就算拆机去除卡贴，再配上市面上的卡贴卡托也只能使用移动2G网络而且网络很不稳定的说法，再检测我手机质量后，开始让我以旧换新，并承诺加五百元就
    
    </summary>
    
      <category term="骗局" scheme="https://huos3203.github.io/categories/%E9%AA%97%E5%B1%80/"/>
    
    
      <category term="中关村" scheme="https://huos3203.github.io/tags/%E4%B8%AD%E5%85%B3%E6%9D%91/"/>
    
      <category term="被骗" scheme="https://huos3203.github.io/tags/%E8%A2%AB%E9%AA%97/"/>
    
      <category term="iPhone6" scheme="https://huos3203.github.io/tags/iPhone6/"/>
    
      <category term="iPhone5s" scheme="https://huos3203.github.io/tags/iPhone5s/"/>
    
  </entry>
  
  <entry>
    <title>Realm数据库引擎-swift</title>
    <link href="https://huos3203.github.io/2015/12/16/2015-12-16-realmshu-ju-ku-yin-qing-swift/"/>
    <id>https://huos3203.github.io/2015/12/16/2015-12-16-realmshu-ju-ku-yin-qing-swift/</id>
    <published>2015-12-15T21:56:15.000Z</published>
    <updated>2017-01-12T02:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>中心思想：<br>继承RLMObject新建数据模型，添加相应属性，即可使用realm数据库引擎，对用户数据创建持久化，更新，删除等操作。</p>
<p>####简介：<br><a href="http://realm.io/" target="_blank" rel="external">Realm</a> 是一个跨平台的移动数据库引擎，于 2014 年 7 月发布，准确来说，它是专门为移动应用所设计的数据持久化解决方案之一。</p>
<ul>
<li>特点：它拥有自己的数据库存储引擎<br>  Realm 并不是对 Core Data 的简单封装，相反地， Realm 并不是基于 Core Data ，也不是基于 SQLite 所构建的。它拥有自己的数据库存储引擎，可以高效且快速地完成数据库的构建操作。</li>
<li>Realm 支持 Swift 、 Objective-C 以及 Java 语言来编写（ Android 平台和 iOS 平台使用不同的 SDK ）。</li>
<li>Realm 比使用 SQLite 以及 Core Data 要快很多。</li>
<li>可视化工具<a href="https://itunes.apple.com/cn/app/realm-browser/id1007457278?mt=12" target="_blank" rel="external">Realm Browser</a> ：可以让您轻松地读写 Realm 数据库的逻辑结构以及其中的数据（以 .realm 结尾），虽然 Realm Browser 的功能还十分简陋，真的只能读写而已。</li>
<li>RealmPlugin：是 Xcode 建模插件，通过 <a href="http://alcatraz.io/" target="_blank" rel="external">Alcatraz</a>安装“RealmPlugin”<br>####目的：<br>学习如何导入 Realm 框架、创建数据模型，实现 Swift 执行查询以及插入、更新和删除记录，以及使用既有的数据库。<br>####实例学习：<br>测试APP<a href="https://github.com/SemperIdem/SISpeciesNotes/tree/master" target="_blank" rel="external">物种监测</a><br>用于记录这个 “ 动植物王国 ” 当中所发现物种的相关信息，包括种群数量、发现区域、年龄结构等等。</li>
</ul>
<p>在 Xcode 当中打开我们的起始项目。此时， <a href="http://www.raywenderlich.com/81615/www.raywenderlich.com/21365/introduction-to-mapkit-in-ios-6-tutorial" target="_blank" rel="external">MapKit</a><br>已经在项目当中建立好了，而且项目已经拥有了一些简单的创建、更新和删除物种信息的功能.</p>
<p>####cocoapods安装（Swift 2.1）：<br>在项目中创建Podfile配置文件，添加RealmSwift支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use_frameworks!   //</div><div class="line">pod &apos;RealmSwift&apos;</div></pre></td></tr></table></figure></p>
<p>执行 <code>pod install</code>下载realmSwift框架，生成<strong>.xcworkspace</strong>文件，自动重启原始项目。<br>设置Xcode项目在git版本控制中的忽略配置：详见<a href="http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects" target="_blank" rel="external">.gitignore</a></p>
<p><a href="http://blog.csdn.net/remote_roamer/article/details/47835347" target="_blank" rel="external">use_frameworks!</a>   </p>
<pre><code>如果在cocoapods 里面不使用 use_frameworks!,则是通过static libraries 这个方式来管理pod的代码。这样就需要在app-Bridging-Header.h 文件里面去import相应的.h 文件。而如果使用了use_frameworks!,则cocoapods 使用了frameworks 来取代static libraries 方式。 
</code></pre><p>####开始使用：<br>编译并运行这个应用，然后尝试定位到某个您感兴趣的位置（使用模拟器的位置模拟），然后点击右上角的 “+” 按钮创建一个新的标记点。点选地图上的这个标记点，然后点击其弹出来的气泡，接下来会弹出这个标记点的详细信息。随后，点击类别文本框，就可以看到如下图所示的类别列表了:<br><img src="http://cc.cocimg.com/api/uploads/20150505/1430807925718367.jpg" alt=""></p>
<ol>
<li><p>使用Realm数据库将类别列表持久化</p>
<ul>
<li><p>打开<strong>CategoriesTableViewController.swift </strong>文件添加方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">populateDefaultCategories</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">self</span>.results = <span class="type">CategoryModel</span>.allObjects() <span class="comment">// 1 查询数据返回包含类别对象的RLMResults数组</span></div><div class="line"><span class="keyword">if</span> results.<span class="built_in">count</span> == <span class="number">0</span> &#123; <span class="comment">// 2   通过返回结果的个数，初始化本地realm数据库</span></div><div class="line"><span class="keyword">let</span> realm = <span class="type">RLMRealm</span>.defaultRealm() <span class="comment">// 3 访问默认的 realm 单例对象</span></div><div class="line">realm.beginWriteTransaction() <span class="comment">// 4   在默认 realm 数据库中启动一个事务</span></div><div class="line"><span class="keyword">let</span> defaultCategories = <span class="type">Categories</span>.allValues <span class="comment">// 5 使用Categories 枚举来创建一个含有全部默认类别的数组</span></div><div class="line"><span class="keyword">for</span> category <span class="keyword">in</span> defaultCategories &#123;</div><div class="line"><span class="comment">// 6 初始化类别实例对象，设置其 name 属性，加入realm中</span></div><div class="line"><span class="keyword">let</span> newCategory = <span class="type">CategoryModel</span>()</div><div class="line">newCategory.name = category</div><div class="line">realm.addObject(newCategory)</div><div class="line">&#125;</div><div class="line">realm.commitWriteTransaction() <span class="comment">// 7    调用 commitWriteTransaction() 方法来关闭事务，并且向数据库提交数据</span></div><div class="line"><span class="keyword">self</span>.results = <span class="type">CategoryModel</span>.allObjects()</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 viewDidLoad() 方法的底部加入以下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">populateDefaultCategories()</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中心思想：&lt;br&gt;继承RLMObject新建数据模型，添加相应属性，即可使用realm数据库引擎，对用户数据创建持久化，更新，删除等操作。&lt;/p&gt;
&lt;p&gt;####简介：&lt;br&gt;&lt;a href=&quot;http://realm.io/&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="数据库" scheme="https://huos3203.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="realm" scheme="https://huos3203.github.io/tags/realm/"/>
    
  </entry>
  
  <entry>
    <title>总结</title>
    <link href="https://huos3203.github.io/2015/12/15/2015-12-15-zong-jie/"/>
    <id>https://huos3203.github.io/2015/12/15/2015-12-15-zong-jie/</id>
    <published>2015-12-14T21:39:20.000Z</published>
    <updated>2016-12-20T06:39:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>####联系方式</p>
<ul>
<li>手机：13522834108</li>
<li>Email：huos3203@gmail.com </li>
<li>QQ：724987481</li>
</ul>
<hr>
<h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul>
<li>霍曙光/男/1988 </li>
<li>本科/郑州轻工业学院 计算机网络技术 </li>
<li>工作年限：5年</li>
<li>QQ：724987481</li>
<li>技术博客：<a href="http://huos3203.github.io/MyBlog/">布衣男儿</a></li>
<li>Github：<a href="https://github.com/huos3203/" target="_blank" rel="external">https://github.com/huos3203/</a> </li>
<li><p>GitBook：<a href="https://huoshuguang.gitbooks.io" target="_blank" rel="external">https://huoshuguang.gitbooks.io</a></p>
</li>
<li><p>期望职位：iOS高级程序员，应用架构师</p>
</li>
<li>期望薪资：税前月薪20k~25k</li>
<li>期望城市：北京</li>
</ul>
<hr>
<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><p>##北京创世泰克科技有限公司 (2013年11月~至今)</p>
<p>###工作描述：  </p>
<ol>
<li>负责iPhone/iPad应用软件设计与开发；  </li>
<li>参与项目需求分析，产品模块的概要设计；  </li>
<li>优化软件性能，提高用户体验；  </li>
<li>scrum分解任务控制开发进度；</li>
<li>管理itunes，搭建fastlane自动化部署Appstore</li>
</ol>
<hr>
<p>###<a href="https://itunes.apple.com/cn/app/peng-bao-bao/id794859712?mt=8" target="_blank" rel="external">鹏保宝</a></p>
<p>鹏保宝是一款用于为数字内容的传播及销售环节保价护航，确保受保护的视频、文档、图纸等内容不被二次传播或转售，广泛用于在教育培训、淘宝数字内容销售、设计企业、印刷、电子书出版等领域，建立起了很好的用户基础。</p>
<p>####技术描述：</p>
<p>四人项目，担任IOS组组长</p>
<p>主要负责：任务分解和分配，每天了解开发进度更新燃尽图，讨论和跟进各种具体的技术问题，协调一些产品需求的变更，响应一些市场同事的需求，跟进相关功能上线。</p>
<ul>
<li>使用<a href="https://cocoapods.org" target="_blank" rel="external">cocoaPods</a>工具管理第三方类库，<a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a>控制版本迭代协作开发；</li>
<li>定制<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="external">ffmpeg</a>,<a href="http://mupdf.com/repos/mupdf" target="_blank" rel="external">mupdf</a>阅读器底层业务,集成IJKPlayer支持鹏保宝加密阅读；</li>
<li>使用storyboard/xib，AutoLayout与Size Class技术适配iPad/iPhone；</li>
<li>使用<a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="external">CocoaAsyncSocket</a>开源包实现socket传输协议封装；</li>
<li>使用<a href="https://github.com/RestKit/RestKit" target="_blank" rel="external">RestKit</a>处理web服务api,解析JSON映射响应对象；</li>
<li>通过<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">WebViewJavascriptBridge</a>/<a href="http://nshipster.cn/javascriptcore/" target="_blank" rel="external">JavaScriptCore</a>实现In-APP Purchase内购；</li>
<li>封装<a href="https://github.com/ccgus/fmdb" target="_blank" rel="external">FMDB</a>接口，SQLite数据库设计及<a href="http://www.sqlcipher.net" target="_blank" rel="external">SQLCipher</a>数据库加密；</li>
<li><a href="https://github.com/scalessec/Toast" target="_blank" rel="external">Toast</a>Android风格的Toast控件,用户提示便捷得体；</li>
<li>集成微信SDK,腾讯SDK，ShareSDK，JpushSDK；</li>
</ul>
<p>#####项目管理成长：<br>由周期长、响应速度慢、维护修改困难，以文档为核心的传统开发模式到敏捷开发以人为本，专注于交付对客户有价值的软件，在高度协作的开环境中，使用迭代式的方式进行增量开发，经常使用反馈进行思考、反省和总结，不停的进行自我调整和完善。</p>
<p>#####技术突破：<br>在阅读鹏保宝视频文件时，MediaPlayer.framework仅支持普通视频播放，如何在保证鹏保宝文件不被解密的情况下，实现用户正常阅读。我通过google发现ffmpeg是基于C开发的开源程序，能够通过编译源码支持多平台，在此基础上，我们对ffmpeg定制开发，在底层代码中加入解密算法，传入文件秘钥，实现了ffmpeg支持鹏保宝视频文件的阅读。<br>  雷同，对于鹏保宝PDF加密文件时，我们对mupdf开源程序，进行二次开发，实现了mupdf支持鹏保宝PDF文件的阅读。</p>
<p>###<a href="https://itunes.apple.com/cn/app/pbb-reader/id954969456?mt=8" target="_blank" rel="external">PBB Reader</a><br><code>Pbb Reader</code>是鹏保宝加密文件的阅读器，使用此软件可以打开被鹏保宝加密后的文件，最新版本集成了<code>开会APP</code>的相关功能，并支持绥知文件的阅读。</p>
<p>四人项目，担任IOS组组长  </p>
<p>主要负责：任务分解，了解开发进度，更新燃尽图，讨论和跟进各种具体的技术问题，协调一些产品需求的变更，响应一些市场同事的需求，跟进相关功能上线。</p>
<p>#####技术描述：</p>
<ul>
<li>作为<code>鹏保宝</code>lite阅读器，使用<code>URL Schemes</code>实现文件共享；</li>
<li>使用一个target对应一个新的product方案，创建<code>PBB Reader</code>阅读器；</li>
<li>使用扫描二维码技术登录<code>开会</code>APP；</li>
<li>AutoLayout与Size Class技术适配iPad机型；</li>
</ul>
<p>#####项目收获：</p>
<ol>
<li>使用target功能充分利用代码，开发新产品，以最小的代价产出lite版应用；</li>
<li>使用autolayout和size class重构界面实现，去除机型判断，坐标硬适配的冗长代码；</li>
<li>学习自动化部署工具包<code>fastlane</code>部署Appstore；</li>
</ol>
<p>###<a href="https://itunes.apple.com/cn/app/sui-zhi/id848758969?mt=8" target="_blank" rel="external">绥知</a><br>绥知是一款可加强保护这些数字化的音视频节目内容的版权，涉及的技术就是数字权限管理技术。本应用现可支持在PC端进行图书，音乐，视频加密后买卖交易，在移动端可进行解密查看。</p>
<p>###<a href="https://itunes.apple.com/cn/app/kai-hui/id1063916218?mt=8" target="_blank" rel="external">开会</a><br>开会是一款会议管理系统，主要功能包括创建会议、发布会议通知、管理会议资料、管理会务等相关功能，通过该系统可实现无纸化会议办公，使得企业可以环保高效的开展会议。本APP为该系统的移动客户端，主要为参会人员提供了会议资料的领取、使用、收藏、管理等功能。</p>
<hr>
<p>#个人作品： </p>
<p>###<a href="https://itunes.apple.com/cn/app/iresearcher/id1048834926?mt=8" target="_blank" rel="external">iResearcher</a><br>iResearcher是一款科研/研发领域大数据分析系统+应用。旨在为科研/技术研发工作者提供 资源直达服务，iResearcher计划提供的资源服务既包括论文，方法，数据集，也包括人，资金等。最终建立，人与人，人与资金，人与技术方法之间的互联。为科研/研发工作者，提供一站式科研服务平台。</p>
<p>#####工作描述：</p>
<p>本项目包含IOS端，安卓端，<a href="http://www.iresearch.xyz" target="_blank" rel="external">PC端</a>，担任项目Scrum Master</p>
<ul>
<li>和业务方沟通确定产品需求和流程，形成文档和原型设计，敲定开发方案；</li>
<li>在<code>worktile</code>平台分配任务，监控项目进度，处理客户反馈；</li>
<li>负责IOS项目架构设计，UI界面和功能实现；</li>
<li>android端APP发布（友盟，应用宝，小米应用商店）；</li>
<li>IOS端自动化部署发布appstore；</li>
</ul>
<p>#####技术描述：</p>
<ul>
<li>使用<a href="https://cocoapods.org" target="_blank" rel="external">cocoaPods</a>工具管理第三方类库，<a href="http://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a>控制版本迭代协作开发；</li>
<li><a href="https://github.com/romaonthego/RESideMenu" target="_blank" rel="external">RESideMenu</a>侧滑布局类库,支持左右滑动，滑动距离;</li>
<li><a href="https://github.com/hackiftekhar/IQKeyboardManager" target="_blank" rel="external">IQKeyboardManager</a>易于集成，支持设备的方向，可通过类的方法来启用和禁用键盘管理器；</li>
<li><a href="https://github.com/antoniocasero/ACPDownload" target="_blank" rel="external">ACPDownload</a>实现类似AppStore下载状态样式；</li>
<li><a href="https://github.com/thibaultCha/TCBlobDownload" target="_blank" rel="external">TCBlobDownload</a>支持后台线程执行大文件下载任务，暂停和重新恢复下载；</li>
<li><a href="https://github.com/shingwasix/MobShareSDK" target="_blank" rel="external">MobShareSDK</a>实现微信朋友，朋友圈分享;</li>
<li><a href="https://zwaldowski.github.io/BlocksKit" target="_blank" rel="external">BlocksKit</a>没有创建新的宏，函数，方法和类，仅对Cocoa基础类的一个扩展，是取代了通常的delegate用法;</li>
<li><a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">SDWebImage</a>图片缓存的框架; <!--点点滴滴--></li>
<li><a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="external">MJRefresh</a>下拉刷新上拉加载更多MJRefresh类库;</li>
<li><a href="https://github.com/scalessec/Toast" target="_blank" rel="external">Toast</a>Android风格的Toast控件,用户提示便捷得体；</li>
<li><a href="https://github.com/kcandr/IQLabelView" target="_blank" rel="external">IQLabelView</a>对文本控件覆盖，缩放和旋转；</li>
<li><a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">AFNetworking</a></li>
<li><a href="https://github.com/RestKit/RestKit" target="_blank" rel="external">RestKit</a>处理web服务api,解析JSON映射响应对象；</li>
<li><a href="https://github.com/Masonry/Masonry" target="_blank" rel="external">Masonry</a>一个轻量级的布局框架,拥有自己的描述语法，采用更优雅的链式语法封装自动布局；</li>
<li>BaiduMobStat使用百度统计，统计用户使用时长、使用频率、访问页面、使用间隔等数据；</li>
</ul>
<p>#####能力提高：<br>Scrum开发的认识与学习：强调团队需要是“自组织”的，需要群体进行决策而不是领导，Scrum强调的是信息的透明化，定期地查看自己和团队的状态，保证大家信息充分共享，透明的方法，即有了信息的透明，这样团队成员就能共同发现项目执行中的问题，进而一起寻找解决办法，从而达到“自组织”的团队。在开发时间上也保持着一周一次的Sprint评审会议，保证项目开发进度和质量。</p>
<p>###爱跑</p>
<p><code>爱跑</code>是一款鼓励用户多运动的APP社区应用，能安排运动日程，统计每日运动量，统计圈子排行榜，支持圈子好友即时通讯，提供穿戴设备购买的入口。</p>
<p>######工作描述：<br>四人项目，项目负责人  </p>
<ul>
<li>沟通需求，敲定开发方案，组织人员开发；</li>
<li>在<code>worktile</code>平台分配任务，监控项目进度，处理客户反馈；</li>
<li>android端APP发布；</li>
<li>部署后台服务器；</li>
</ul>
<p>######技术描述：</p>
<ul>
<li>集成融云IMKit组件，嵌入到现有代码框架中，实现圈子好友聊天功能；</li>
<li>日历控件上的日程和提醒；</li>
</ul>
<p>#####能力提高：<br>组织能力，协作沟通能力。</p>
<hr>
<p>##北京鼎晟中天科技有限公司（2011年3月~2013年11月）</p>
<p>###工作描述：</p>
<ol>
<li>负责公司IOS平台的iPhone应用程序的软件设计及开发；  </li>
<li>参与项目需求分析，产品模块的概要和详细设计；  </li>
<li>优化软件性能，提高用户体验；  </li>
</ol>
<p>###会议通<br>本项目以蓝牙技术为基础，进行近距离的人员搜索，结合移动互联网技术让参展人员可以方便的进行进行电子名片的交换和管理。同时系统通过对参展人员交换名片的行为进行多维度的分析，使得会展组织者可以及时准确的了解展会效果，为组织者指定下一步工作计划提供数据基础。</p>
<p>#####技术描述：</p>
<ul>
<li>sqlite数据库工具FMDB开发</li>
<li>ABAddressBook通讯录数据库开发</li>
<li>CoreBluetooth蓝牙开发</li>
<li>ASIHTTPRequest实现了图片上传下载</li>
<li>JavaPNS服务器推送工具，IOS推送技术推送</li>
</ul>
<p>###<a href="https://itunes.apple.com/cn/app/yi-gou8/id663698075?mt=8" target="_blank" rel="external">易购8</a>(已下架)<br><code>易购8</code>是一款简易的口袋购物软件，支持通过输入关键字直接在淘宝查询商品，支持用户选择“商品价格分段”、“商家信誉分段”、“商品销量分段”以及其他条件对商品进行过滤。</p>
<p>###众信旅游ERP客户端（Java）</p>
<p>本系统通过对旅行社关键业务的分析，将旅行社业务中需要移动处理的部分抽取出来，通过与企业内部业务管理系统协作，既能够与企业现有的流程一致，又保持一定的独立性，避免影响核心业务系统的运转。<br>系统用户群定位：旅行社的销售人员、管理人员、导游！<br>具体实现:是以移动互联网技术为基础，结合当前主流的移动终端技术，将企业内部的ERP延伸到移动终端，可以让旅行社工作人员随时随地高效、安全的进行业务操作！  </p>
<p>###淘宝信息搜集工具（Java）<br>实现了定时爬取指定商品的基本信息包括:商品原价，实价，评价数量，评价星级，运费，和店铺等级，店铺信誉度，以及商品连接，店铺连接，和缩略图获取。</p>
<p>###<a href="http://www.jgbw.cn/" target="_blank" rel="external">今古博文</a>（java）<br>作为公司的企业文化，地理位置，招聘信息，等最新信息的展示平台….</p>
<hr>
<p>#技能清单：  </p>
<ol>
<li>熟练掌握Object C/swift/java，ruby脚本，Linux 命令，regex</li>
<li>熟练掌握MVC，MVVM，MVP，单例，观察者，代理，工厂等设计模式</li>
<li>熟悉socket通信，HTTP协议，xmpp框架，Restful框架，json/xml解析</li>
<li>熟悉cocoa，uikit，block,多线程,disptach</li>
<li>熟练interface builder，Playground，autolayout，SizeClass</li>
<li>熟悉IOS内购，QQ登录，极光推送，融云等第三方SDK</li>
<li>熟悉ffmpeg视频播放器，mupdf阅读器，实现密文阅读</li>
<li>熟悉Pods，Alcatraz，Xvim，VVDocumenter，Dash等</li>
<li>Scrum开发：Jira/worklite/Trello/OmniPlan</li>
<li>自动化部署工具:fastlane/jenkins/Docker</li>
<li>数据库：MySQL/SQLServer/SQLite/Realm</li>
<li>测试平台：蒲公英，HockeyApp，Crashlytics，OXServer</li>
<li>异常分析：instruments，dsym，友盟，百度统计，Crashlytics</li>
<li>版本管理：Svn/Git GUI:cornerstone/smartSVN/sourceTree</li>
<li>文档工具：appleDoc/jazzy/GistBox/MOU/GitBook/Snippets</li>
<li>前端工具：PhoneGap/PaintCode/Photoshop/flash/dreamweaver</li>
<li>Web开发：PHP/JSP/ASP</li>
<li>Web框架：Nutz、Octopress</li>
<li>云和开放平台：SAE/AWS/微信应用开发</li>
</ol>
<hr>
<p>##致谢</p>
<p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####联系方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手机：13522834108&lt;/li&gt;
&lt;li&gt;Email：huos3203@gmail.com &lt;/li&gt;
&lt;li&gt;QQ：724987481&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;个人信息&quot;&gt;&lt;a href=&quot;#个人信
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OC与swift相互调用</title>
    <link href="https://huos3203.github.io/2015/12/01/2015-12-01-ocyu-swiftxiang-hu-diao-yong/"/>
    <id>https://huos3203.github.io/2015/12/01/2015-12-01-ocyu-swiftxiang-hu-diao-yong/</id>
    <published>2015-12-01T03:42:18.000Z</published>
    <updated>2017-01-12T03:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>####Swift中使用OC的类声明  – 实现配置 桥接的头文件</p>
<p>######方式一：自动添加桥接头文件</p>
<ol>
<li>在一个全新的Swift，利用第一次新建提示的方式自动添加桥接头文件。</li>
<li>点确定这后就会生成一个以<producename-bridging-header.h>的头文件。</producename-bridging-header.h></li>
<li>在targets-&gt;build settings -&gt;Object-C Bridging Header 设为生成的个桥接的头文件即可。</li>
<li>把想要在swift类中调用的OC头文件放使用import “” 写到这个桥接文件中：<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  Use this file to import your target's public headers that you would like to expose to Swift.  </span></div><div class="line"><span class="comment">//MixDemo/MixDemo-Bridging-Header.h    </span></div><div class="line"><span class="meta">#import <span class="meta-string">"OCChannel.h"</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>######方式二：手动添加桥接头文件<br>同样的，当你知道这个swift搜索头文件的关系后，就不需要再理会这个-Bridging-Header.h的文件了。<br>完全可以手工建一个并取自己喜欢的名字：</p>
<ol>
<li>新建一个头文件，名为:OCContainerHeader.h</li>
<li>在targets-&gt;build settings -&gt;Object-C Bridging Header 设为生成的个桥接的头文件即可。</li>
<li>把想要在swift类中调用的OC头文件放使用import “” 写到这个桥接文件中：<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  Use this file to import your target's public headers that you would like to expose to Swift.  	</span></div><div class="line"><span class="comment">//MixDemo/MixDemo-Bridging-Header.h    </span></div><div class="line"><span class="meta">#import <span class="meta-string">"OCChannel.h"</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>####OC如何调用Swift写的类  –     为了在 Objective-C 中可用， Swift 类必须是 Objective-C 类的子类，或者用 @Objective-C 标记；</p>
<ol>
<li>选中targets-&gt;build settings -&gt;packing-&gt;Product Module Name 中设置模块名（可以自定义），这个名称很重要 swift 的头文件就是根据这个来命名的，例如：SwiftModule。</li>
<li>在OC头文件类中，添加import “SwiftModule-swift.h”但你在整个工程中是找不到这个文件的，但可以使用CMD+ 鼠标点击可看这个头文件中的内容。  </li>
</ol>
<p>####总结：<br>这样，工程中如查Swift要使用OC,则把需要使用的OC类的头文件，全写在MixDemo-Bridging-Header.h里。同样如果OC中所使用的swift类，只需要Clean一把，再编就可以了，但不要忘了导入SwiftModule-swift.h哦（名称自取，但-swift.h是固定的），另外还有一个需要读者注意的。</p>
<p>注：<br>    凡是用Swift写的类，如果不继成自NSObject或NSObject 的派生类，哪么编译后将不会生成对应的转换类。从而使得OC 中找不到相应的声明。<br>如我的例子中 class Act 这样不会被编译到SwiftModule-swift.h中，但写为 class Act : NSObject，就可以编译出相应的声明。另外可以使用@objc加以声明，但这个还是一样，类最好继承NSObject下来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####Swift中使用OC的类声明  – 实现配置 桥接的头文件&lt;/p&gt;
&lt;p&gt;######方式一：自动添加桥接头文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在一个全新的Swift，利用第一次新建提示的方式自动添加桥接头文件。&lt;/li&gt;
&lt;li&gt;点确定这后就会生成一个以&lt;produc
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="混编" scheme="https://huos3203.github.io/tags/%E6%B7%B7%E7%BC%96/"/>
    
  </entry>
  
</feed>
