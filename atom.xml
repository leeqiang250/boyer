<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布衣男儿</title>
  <subtitle>不物喜，不己悲，善假物，易参行！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huos3203.github.io/"/>
  <updated>2017-02-15T09:50:33.000Z</updated>
  <id>https://huos3203.github.io/</id>
  
  <author>
    <name>boyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://huos3203.github.io/2017/02/15/Playground%E4%B8%AD%E4%BD%BF%E7%94%A8XCPlaygroundModule/"/>
    <id>https://huos3203.github.io/2017/02/15/Playground中使用XCPlaygroundModule/</id>
    <published>2017-02-15T09:50:33.000Z</published>
    <updated>2017-02-15T09:50:33.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>macOS支持JavaScript自动化组件基础</title>
    <link href="https://huos3203.github.io/2017/02/15/macOS%E6%94%AF%E6%8C%81JavaScript%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <id>https://huos3203.github.io/2017/02/15/macOS支持JavaScript自动化组件基础/</id>
    <published>2017-02-15T09:19:30.000Z</published>
    <updated>2017-02-16T05:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>苹果 <code>OS X Yosemite系统</code>把 <code>JavaScript</code>作为<code>AppleScript</code>的另一选择。<code>Automation</code> 是 <code>OS X 10.10版本</code>中的新特性，苹果在官网发布<a href="https://developer.apple.com/library/prerelease/mac/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/index.html#//apple_ref/doc/uid/TP40014508" target="_blank" rel="external">JavaScript for Automation Release Notes</a>有篇文章介绍了用<code>JavaScript</code>写自动化<code>Automation</code>脚本。<br><code>JavaScript</code>凭借其简单的语法，良好的性能，超轻量的框架，极小耦合的模块系统等等优势已经吸引了很多大厂的关注。<br>再加上<code>JavaScript</code>先天开放且无版权专利纠纷的问题，拥有非常广泛的开发者（开源）群体，苹果将其引入<code>OS X平台</code>代替私有的<code>AppleScript</code>，可能也有着一部分开放性平台的考虑，从而吸引广泛的第三方开发者。<br>资源<br><a href="https://github.com/tylergaw/js-osx-app-examples" target="_blank" rel="external">JavaScript OS X App Examples</a><br><a href="https://github.com/dtinth/JXA-Cookbook" target="_blank" rel="external">JavaScript for Automation Cookbook</a></p>
<h2 id="OSA框架-Open-Scripting-Architecture"><a href="#OSA框架-Open-Scripting-Architecture" class="headerlink" title="OSA框架:Open Scripting Architecture"></a>OSA框架:<code>Open Scripting Architecture</code></h2><p><code>OSA</code>组件用于实现MacAPP自动化操作。这些框架组件使用场景包括：<code>Script Editor</code>编辑器，全系统的<code>Script菜单</code>，<code>Run JavaScript Automator</code>命令的操作，<code>applets</code>小程序，命令行<code>osascript</code>工具，<code>NSUserScriptTask API</code>中，还可以运用在其他的<code>OSA</code>组件中例如：<code>AppleScript</code>。这也就包括了<code>Mail</code>规则、<code>Folder</code>操作、<code>Address Book</code>插件、日历闹钟和消息触发器。</p>
<h2 id="脚本字典"><a href="#脚本字典" class="headerlink" title="脚本字典"></a>脚本字典</h2><p>脚本字典详细介绍APP的对象模型。在脚本字典映射到有效的JavaScript标识符遵循一套规范的术语。在<code>Script Editor</code>脚本字典浏览器已经更新到显示术语<code>AppleScript</code>，<code>JavaScript</code>和O<code>bjective-C</code>（Scripting Bridge framework）格式。</p>
<h3 id="打开脚本字典"><a href="#打开脚本字典" class="headerlink" title="打开脚本字典"></a>打开脚本字典</h3><p>启动<code>Script Editor</code> (/Applications/Utilities/) –&gt;<code>File &gt; Open Dictionary or Window &gt; Library</code>。</p>
<h2 id="object-specifier"><a href="#object-specifier" class="headerlink" title="object specifier"></a>object specifier</h2><p>在<code>JavaScript自动化主机</code>环境中的大部分对象指的是外部实例，如：其他APP，框口或在这些APP的相关数据。当访问一个APP对象或APP中的某个元素的<code>JavaScript属性</code>时，会返回一个新的<code>object specifier</code>，也就是这个对象的<code>specifier 属性</code>。</p>
<blockquote>
<p>object specifier不是外部实例属性的实际值，是这个对象的引用指针。如果要获取这个属性的实际值，使用get／set方法。</p>
</blockquote>
<h2 id="访问APP"><a href="#访问APP" class="headerlink" title="访问APP"></a>访问APP</h2><p>六种方式:<br><figure class="highlight js"><figcaption><span>By name</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Application(<span class="string">'Mail'</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>By bundle ID</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Application(<span class="string">'com.apple.mail'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>By path</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Application(<span class="string">'/Applications/Mail.app'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>By process ID</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Application(<span class="number">763</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>On a remote machine</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Application(<span class="string">'eppc://127.0.0.1/Mail'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>currentApplication</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Application.currentApplication()</div></pre></td></tr></table></figure>
<h2 id="语法示例"><a href="#语法示例" class="headerlink" title="语法示例"></a>语法示例</h2><figure class="highlight js"><figcaption><span>Access properties</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mail.name</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>Access elements</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mail.outgoingMessages[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>Call commands</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mail.open(...)</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>Create new objects</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mail.OutgoingMessage(...)</div></pre></td></tr></table></figure>
<h3 id="属性的get-set方法"><a href="#属性的get-set方法" class="headerlink" title="属性的get/set方法"></a>属性的get/set方法</h3><p>点运算符访问脚本对象，是JavaScript语法特性之一。<br>如上所述，返回的对象是一个<code>object specifier</code>是一个对象的引用，而不是属性实际值。<br>当访问属性时，会作为一个get函数，返回实际值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">subject = Mail.inbox.messages[<span class="number">0</span>].subject()</div></pre></td></tr></table></figure><br>当赋值属性时，会作为一个set函数，把参数赋值该属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mail.outgoingMessages[<span class="number">0</span>].subject = <span class="string">'Hello world'</span></div></pre></td></tr></table></figure><br>获取数组中的每个元素属性（在这种情况下，得到邮件收件箱中的每份邮件的标题）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">subjects = Mail.inbox.messages.subject()</div></pre></td></tr></table></figure></p>
<h3 id="元素数组"><a href="#元素数组" class="headerlink" title="元素数组"></a>元素数组</h3><p>通过在数组中调用特定元素检索方法，或使用方括号并指定要检索的元素的名称或索引来访问数组中的元素。返回值是对象相关，与自己的属性和元素，引用数组元素。他们可以访问<br><figure class="highlight js"><figcaption><span>索引</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span> = Mail.windows.at(<span class="number">0</span>)</div><div class="line"><span class="built_in">window</span> = Mail.windows[<span class="number">0</span>]</div></pre></td></tr></table></figure><br><figure class="highlight js"><figcaption><span>name</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span> = Mail.windows.byName(<span class="string">'New Message'</span>)</div><div class="line"><span class="built_in">window</span> = Mail.windows[<span class="string">'New Message'</span>]</div></pre></td></tr></table></figure><br><figure class="highlight js"><figcaption><span>ID</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span> = Mail.windows.byId(<span class="number">412</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Note: 使用ID来访问不是方括号[]而是().</p>
</blockquote>
<h3 id="调用命令"><a href="#调用命令" class="headerlink" title="调用命令"></a>调用命令</h3><p>命令被称为函数。</p>
<ol>
<li>直接参数的函数，该参数作为命令的第一个参数传递。</li>
<li>如果函数需要带参数名的参数，那么这个参数可以接受一个键值对对象。</li>
<li>如果函数需要一个直接参数，就需要传递一个带参数名的参数作为第二个参数。</li>
<li>如果函数不存在直接参数，那么带参数名的参数作为第一个参数传递，并且唯一参数。</li>
<li>直接参数是可选的，可以不用传递任何值，当第一个参数存在参数名时，则传递NULL作为第一个参数。<figure class="highlight js"><figcaption><span>无参数命令</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">message.open()</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight js"><figcaption><span>无参数名的命令</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mail.open(message)</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>带参数名的命令</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">response = message.reply(&#123;</div><div class="line"><span class="attr">replayAll</span>: <span class="literal">true</span>,</div><div class="line"><span class="attr">openingWindow</span>: <span class="literal">false</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>Command with direct parameter and named parameters</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Safari.doJavaScript(<span class="string">'alert("Hello world")'</span>, &#123;</div><div class="line"><span class="attr">in</span>: Safari.windows[<span class="number">0</span>].tabs[<span class="number">0</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="Creating-Objects"><a href="#Creating-Objects" class="headerlink" title="Creating Objects"></a>Creating Objects</h2><p>通过调用<code>类构造函数</code>初始化<code>属性</code>和<code>数据</code>来创建新对象。<br>在创建对象时,需要执行的其中步骤：</p>
<ol>
<li><code>make()</code>方法：调用对象上的<code>make()</code>方法来实例化对象。</li>
<li><code>push()</code>方法：调用对象数组上的<code>push</code>方法来实例化对象。<br>在调用这些方法中的一个之前，对象实际上并不存在于应用程序中。</li>
</ol>
<h3 id="Create-a-new-object"><a href="#Create-a-new-object" class="headerlink" title="Create a new object."></a>Create a new object.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">message = Mail.OutgoingMessage().make()</div></pre></td></tr></table></figure>
<h3 id="Create-a-new-object-with-properties"><a href="#Create-a-new-object-with-properties" class="headerlink" title="Create a new object with properties."></a>Create a new object with properties.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">message = Mail.OutgoingMessage(&#123;</div><div class="line"><span class="attr">subject</span>: <span class="string">'Hello world'</span>,</div><div class="line"><span class="attr">visible</span>: <span class="literal">true</span></div><div class="line">&#125;)</div><div class="line">Mail.outgoingMessages.push(message)</div></pre></td></tr></table></figure>
<h3 id="Create-a-new-object-with-data"><a href="#Create-a-new-object-with-data" class="headerlink" title="Create a new object with data."></a>Create a new object with data.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">para = TextEdit.Paragraph(&#123;&#125;, <span class="string">'Some text'</span>)</div><div class="line">TextEdit.documents[<span class="number">0</span>].paragraphs.push(para)</div></pre></td></tr></table></figure>
<h3 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h3><p>一旦你在应用程序中创建一个新的对象（通过调用<code>make</code>或<code>push</code>），可以像任何现有的应用程序对象一样进行交互。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">message = Mail.OutgoingMessage().make()</div><div class="line">message.subject = <span class="string">'Hello world'</span></div></pre></td></tr></table></figure></p>
<h3 id="Scripting-Additions"><a href="#Scripting-Additions" class="headerlink" title="Scripting Additions"></a>Scripting Additions</h3><p>使用脚本添加（脚本插件）来增强应用程序的功能。操作系统有一套标准的脚本添加提供speak text,展示用户交互对话，等。<br>使用这些，必须明确设置<code>includeStandardAdditions</code>的<code>flag</code>为 <code>true</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app = Application.currentApplication()</div><div class="line">app.includeStandardAdditions = <span class="literal">true</span></div><div class="line">app.say(<span class="string">'Hello world'</span>)</div><div class="line">app.displayDialog(<span class="string">'Please enter your email address'</span>, &#123;</div><div class="line"><span class="attr">withTitle</span>: <span class="string">'Email'</span>,</div><div class="line"><span class="attr">defaultAnswer</span>: <span class="string">'your_email@site.com'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Applets"><a href="#Applets" class="headerlink" title="Applets"></a>Applets</h2><p>在<code>Script Editor</code>编写脚本并保存为一个应用程序，且可以被双击独立运行的程序称为<code>Applet</code>。<br>程序支持以下事件处理：<br>当Applet运行时，<code>run</code>处理事件被调用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>用于拖放操作的<code>openDocuments</code>处理事件程序包配置小程序，当文档被拖放到该小程序上时，这个处理操作将被执行：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">openDocuments</span>(<span class="params">docs</span>) </span>&#123;...&#125;</div></pre></td></tr></table></figure><br>传递的参数是一个文件路径字符串数组。<br><a href="https://developer.apple.com/library/content/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW8" target="_blank" rel="external">更多样例</a></p>
<h2 id="UI-Automation"><a href="#UI-Automation" class="headerlink" title="UI Automation"></a>UI Automation</h2><p>通过编写系统事件应用程序，可以自动化应用程序的用户界面。在脚本编辑器<code>Script Editor</code>中浏览<code>System Events</code>的脚本字典，特别是进程套件<code>Processes Suite</code>，以查看支持此类型自动化的应用程序接口元素的列表。<br>下面的示例使用UI脚本创建Notes中的新注释。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Notes = Application(<span class="string">'Notes'</span>)</div><div class="line">Notes.activate()</div><div class="line"></div><div class="line">delay(<span class="number">1</span>)</div><div class="line">SystemEvents = Application(<span class="string">'System Events'</span>)</div><div class="line">Notes = SystemEvents.processes[<span class="string">'Notes'</span>]</div><div class="line"></div><div class="line">Notes.windows[<span class="number">0</span>].splitterGroups[<span class="number">0</span>].groups[<span class="number">1</span>].groups[<span class="number">0</span>].buttons[<span class="number">0</span>].click()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;苹果 &lt;code&gt;OS X Yosemite系统&lt;/code&gt;把 &lt;code&gt;JavaScript&lt;/code&gt;作为&lt;code&gt;AppleScript&lt;/code&gt;的另一选择。&lt;code&gt;Automation&lt;/code&gt; 是 &lt;code&gt;OS X 10.10版本&lt;/cod
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="混编" scheme="https://huos3203.github.io/tags/%E6%B7%B7%E7%BC%96/"/>
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="JavaScript" scheme="https://huos3203.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript自动化组件OC桥接</title>
    <link href="https://huos3203.github.io/2017/02/15/JavaScript%E8%87%AA%E5%8A%A8%E5%8C%96%E7%BB%84%E4%BB%B6OC%E6%A1%A5%E6%8E%A5/"/>
    <id>https://huos3203.github.io/2017/02/15/JavaScript自动化组件OC桥接/</id>
    <published>2017-02-15T09:19:30.000Z</published>
    <updated>2017-02-16T05:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/content/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW8" target="_blank" rel="external">文档</a><br><code>JavaScript自动化</code>有一个内置的<code>Objective-C Bridge</code>，使您能够访问文件系统，创建Cocoa应用程序。<br><code>Objective-C Bridge</code>的主要接入点是全局属性<code>objc</code>和<code>$</code>。</p>
<h2 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h2><p><code>Foundation framework</code>中的语法默认支持<code>JavaScript自动化</code>。也可以通过使用<code>ObjC.import()</code>方法导入其他Frameworks 和 libraries。<br>例如，使用<code>Cocoa框架</code>中的<code>NSBeep()</code>函数，需要导入<code>Cocoa框架</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ObjC.import(<span class="string">'Cocoa'</span>)</div><div class="line">$.NSBeep()</div></pre></td></tr></table></figure><br>除了系统框架之外，一些系统库的功能也被暴露出来。这个功能可以通过<code>头文件</code>的名称来暴漏出来（不带.h）<br>例如：<br>arpa/inet, asl, copyfile, dispatch, dyld, errno, getopt, glob, grp, ifaddrs, launch, membership, netdb, netinet/in, notify, objc, paths, pwd, readline, removefile, signal, spawn, sqlite3, stdio, stdlib, string, sys/fcntl, sys/file, sys/ioctl, sys/mount, sys/param, sys/resource, sys/socket, sys/stat, sys/sysctl, sys/time, sys/times, sys/types, sys/wait, sys/xattr, syslog, time, unistd, uuid/uuid, vImage, vecLib, vmnet, xpc, 和 zlib.<br>导入框架时，系统将参考桥接支持文件。除了内置的框架和库，您可以导入任何具有桥接支持的框架，只需要将完整路径传递给框架，如下示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ObjC.import(<span class="string">'/Library/Frameworks/Awesome.framework'</span>)</div></pre></td></tr></table></figure></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>原始的<code>JavaScript数据类型</code>映射到<code>C数据类型</code>。例如，一个<code>JavaScript字符串</code>映射为<code>char *</code>，而<code>JavaScript整数</code>映射到<code>int</code>。使用<code>objc API</code>返回一个<code>char *</code>时，会得到一个<code>JS 字符串</code></p>
<p>原始的<code>JavaScript数据类型</code>将被自动转换为<code>ObjC对象类型</code>，并能作为一个预期的对象类型的参数传递给ObjC方法。<br>例如，一个<code>JS字符串</code>将被转换为一个<code>NSString对象</code>如果是什么方法签名说应该是输入。</p>
<blockquote>
<p>注意，然而，ObjC方法返回的ObjC对象类型是不会自动转换为原始的JavaScript的数据类型。</p>
</blockquote>
<h2 id="实例化的类和调用方法"><a href="#实例化的类和调用方法" class="headerlink" title="实例化的类和调用方法"></a>实例化的类和调用方法</h2><p>所有类都定义为<code>$对象</code>的属性。ObjC对象的方法有两种方式调用，根据是否需要参数的方法。<br>如果ObjC方法不带参数，然后调用<code>JavaScript属性名</code>访问<code>属性值</code>。这个例子中实例化一个空的字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str = $.NSMutableString.alloc.init</div></pre></td></tr></table></figure><br>如果ObjC方法不带参数，根据<code>JSExport</code>规范来命名，通过JavaScript的方法调用（function-typed property）；<br>对于多参数的方法，Objective-C的方法每个部分都合并在一起，冒号后的字母变为大写并移除冒号。比如下边协议中的方法，在JavaScript调用就是：doFooWithBar(foo, bar);<br>这个例子说明<code>JavaScript字符串</code>转为<code>NSString</code>然后写入到一个文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str = $.NSString.alloc.initWithUTF8String(<span class="string">'foo'</span>)</div><div class="line">str.writeToFileAtomically(<span class="string">'/tmp/foo'</span>, <span class="literal">true</span>)</div></pre></td></tr></table></figure></p>
<p>如果你调用一个方法，如<code>-intValue</code>，返回<code>C数据类型</code>而不是一个对象，然后你会回到原始的<code>JavaScript数据类型</code>。<br>此示例返回原始的JavaScript的整数，99。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.NSNumber.numberWithInt(<span class="number">99</span>).intValue</div></pre></td></tr></table></figure></p>
<h3 id="访问-ObjC-Properties"><a href="#访问-ObjC-Properties" class="headerlink" title="访问 ObjC Properties"></a>访问 ObjC Properties</h3><p><code>ObjC属性</code>也可以通过<code>JavaScript属性</code>来访问，很像调用无参数方法。<br>当一个<code>桥接对象属性</code>的被访问时，ObjC属性列表是第一参考，如果列表中存在该名称对应的属性，那么就调用相应属性的<code>getter</code>或<code>setter</code>选择器。如果该名称的ObjC属性不在类中属性的列表中，那么该属性名称就作为<code>方法选择器</code>来调用。<br>使用自定义<code>getter</code>名定义一个属性，你可以使用<code>属性</code>名 或 <code>getter</code>名，并得到相同的结果。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">task = $.NSTask.alloc.init</div><div class="line">task.running == task.isRunning</div></pre></td></tr></table></figure><br>另外，不同的参数方法，<code>桥接对象属性</code>映射到<code>ObjC属性</code>也可以设置为（read/write属性）。下面的两行定义了一个ObjC属性：<code>launchPath</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">task.launchPath = <span class="string">'/bin/sleep'</span></div><div class="line">task.setLaunchPath(<span class="string">'/bin/sleep'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="搭建" scheme="https://huos3203.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="测试" scheme="https://huos3203.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="混编" scheme="https://huos3203.github.io/tags/%E6%B7%B7%E7%BC%96/"/>
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>shell命令+AppleScript脚本+Swift代码相互调用</title>
    <link href="https://huos3203.github.io/2017/02/15/shell%E5%91%BD%E4%BB%A4+AppleScript%E8%84%9A%E6%9C%AC+Swift%E4%BB%A3%E7%A0%81%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/"/>
    <id>https://huos3203.github.io/2017/02/15/shell命令+AppleScript脚本+Swift代码相互调用/</id>
    <published>2017-02-15T09:19:30.000Z</published>
    <updated>2017-02-15T09:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>当想让自己的app支持播放，但有没有足够的时间来开发自己的播放器，可以先考虑用mpv播放器来实现相关功能，这是<code>AppleScript</code>作为互通的桥梁。</p>
<h2 id="NSTask调用AppleScript"><a href="#NSTask调用AppleScript" class="headerlink" title="NSTask调用AppleScript"></a><code>NSTask</code>调用<code>AppleScript</code></h2><h3 id="调用脚本文件main-scpt"><a href="#调用脚本文件main-scpt" class="headerlink" title="调用脚本文件main.scpt"></a>调用脚本文件<code>main.scpt</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//let bundle = NSBundle.init(forClass: self.dynamicType)</span></div><div class="line"><span class="keyword">let</span> bundle = <span class="type">NSBundle</span>.mainBundle()</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> scriptPath = bundle.pathForResource(<span class="string">"main"</span>, ofType: <span class="string">"scpt"</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> paths = [scriptPath]</div><div class="line">    <span class="type">NSTask</span>.launchedTaskWithLaunchPath(<span class="string">"/usr/bin/osascript"</span>, arguments: paths)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用APPleScript脚本片段"><a href="#调用APPleScript脚本片段" class="headerlink" title="调用APPleScript脚本片段"></a>调用<code>APPleScript脚本片段</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> bundle = <span class="type">NSBundle</span>.mainBundle()</div><div class="line"><span class="keyword">let</span> videoPath = bundle.pathForResource(<span class="string">"BigBuck"</span>, ofType: <span class="string">"m4v"</span>)</div><div class="line"><span class="comment">//https://developer.apple.com/library/mac/technotes/tn2084/_index.html</span></div><div class="line"><span class="comment">//open -na /Applications/mpv.app命令行必须是 -na 才能调用当前指定的播放器，否则会调用系统默认播发器</span></div><div class="line"><span class="keyword">let</span> myAppleScript = <span class="string">"on run\ndo shell script \"open -na /Applications/mpv.app \(videoPath!)\"\ntell application \"mpv\" to activate\n end run"</span></div><div class="line"><span class="built_in">print</span>(myAppleScript)</div><div class="line"><span class="keyword">var</span> error: <span class="type">NSDictionary</span>?</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> scriptObject = <span class="type">NSAppleScript</span>(source: myAppleScript) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> output: <span class="type">NSAppleEventDescriptor</span> = scriptObject.executeAndReturnError(</div><div class="line">    &amp;error) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">print</span>(output.stringValue)</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (error != <span class="literal">nil</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"error: \(error)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="AppleScript调用shell"><a href="#AppleScript调用shell" class="headerlink" title="AppleScript调用shell"></a><code>AppleScript</code>调用<code>shell</code></h2><p>AppleScript语句中为on run {变量名称，逗号隔开} 以endrun结束。中间为AppleScript语句。</p>
<h3 id="do-shell-script"><a href="#do-shell-script" class="headerlink" title="do shell script"></a>do shell script</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">on run [变量1,变量2...]  #开始 多个变量名称，用逗号隔开</div><div class="line">    do shell script "open -n /Applications/mpv.app" #AppleScript语句  </div><div class="line">end run #结束</div></pre></td></tr></table></figure>
<h2 id="终端osascript调用AppleScript"><a href="#终端osascript调用AppleScript" class="headerlink" title="终端osascript调用AppleScript"></a>终端<code>osascript</code>调用<code>AppleScript</code></h2><p><a href="http://www.hackmac.org/tutorials/run-applescript-from-the-command-line/" target="_blank" rel="external">参考</a></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">osascript -e &apos;applescript command&apos; #单引号</div></pre></td></tr></table></figure>
<h3 id="打开Finder窗口"><a href="#打开Finder窗口" class="headerlink" title="打开Finder窗口"></a>打开Finder窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">osascript -e &apos;tell app &quot;Finder&quot; to make new Finder window&apos;</div></pre></td></tr></table></figure>
<h3 id="打开某个程序同时弹出”Hello-World”提示框"><a href="#打开某个程序同时弹出”Hello-World”提示框" class="headerlink" title="打开某个程序同时弹出”Hello World”提示框"></a>打开某个程序同时弹出”Hello World”提示框</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">osascript -e <span class="string">'tell app "applicationname" to display dialog "Hello World"'</span></div></pre></td></tr></table></figure>
<h3 id="设置音量，音量大小范围（0-7）"><a href="#设置音量，音量大小范围（0-7）" class="headerlink" title="设置音量，音量大小范围（0-7）"></a>设置音量，音量大小范围（0-7）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">osascript -e <span class="string">"set volume number"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当想让自己的app支持播放，但有没有足够的时间来开发自己的播放器，可以先考虑用mpv播放器来实现相关功能，这是&lt;code&gt;AppleScript&lt;/code&gt;作为互通的桥梁。&lt;/p&gt;
&lt;h2 id=&quot;NSTask调用AppleScript&quot;&gt;&lt;a href=&quot;#NSTask
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
      <category term="脚本" scheme="https://huos3203.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="混编" scheme="https://huos3203.github.io/tags/%E6%B7%B7%E7%BC%96/"/>
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="shell" scheme="https://huos3203.github.io/tags/shell/"/>
    
      <category term="AppleScript" scheme="https://huos3203.github.io/tags/AppleScript/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://huos3203.github.io/2017/02/15/JavaScript%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>https://huos3203.github.io/2017/02/15/JavaScript实现自动化/</id>
    <published>2017-02-15T02:10:52.000Z</published>
    <updated>2017-02-15T09:19:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过沙盒中JS脚本访问其他APP</title>
    <link href="https://huos3203.github.io/2017/02/14/%E9%80%9A%E8%BF%87%E6%B2%99%E7%9B%92%E4%B8%ADJS%E8%84%9A%E6%9C%AC%E8%AE%BF%E9%97%AE%E5%85%B6%E4%BB%96APP/"/>
    <id>https://huos3203.github.io/2017/02/14/通过沙盒中JS脚本访问其他APP/</id>
    <published>2017-02-14T10:25:29.000Z</published>
    <updated>2017-02-16T05:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用脚本字典里的命令和对象来与其他的应用进行通讯?<br>这个教程将向您展示现在使用 <code>AppleScript</code> 来控制别的应用的最佳方式。我也会告诉您一些小技巧以帮助您和您的用户用最小的努力就架设起 <code>AppleScript</code>。</p>
<h2 id="在自己的APP中编写"><a href="#在自己的APP中编写" class="headerlink" title="在自己的APP中编写"></a>在自己的APP中编写</h2><h3 id="编写AppleScript代码"><a href="#编写AppleScript代码" class="headerlink" title="编写AppleScript代码"></a>编写AppleScript代码</h3><p><a href="https://developer.apple.com/library/mac/documentation/applescript/conceptual/applescriptlangguide/introduction/ASLR_intro.html#//apple_ref/doc/uid/TP40000983-CH208-SW1" target="_blank" rel="external">AppleScript 脚本指南</a><br>与其他应用进行通讯的脚本一般来说都很短，也容易理解。<code>AppleScript</code> 可以被想做一种传送的机制，而不是一种处理环境。<br>典型脚本:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">on chockify(inputString)</div><div class="line">    set resultString to <span class="string">""</span></div><div class="line"></div><div class="line">        repeat <span class="keyword">with</span> inputStringCharacter <span class="keyword">in</span> inputString</div><div class="line">            set asciiValue to (ASCII number inputStringCharacter)</div><div class="line">            <span class="keyword">if</span> (asciiValue &gt; <span class="number">96</span> and asciiValue &lt; <span class="number">123</span>) then</div><div class="line">                set resultString to resultString &amp; (ASCII character (asciiValue - <span class="number">32</span>))</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">if</span> ((asciiValue &gt; <span class="number">64</span> and asciiValue &lt; <span class="number">91</span>) or (asciiValue = <span class="number">32</span>)) then</div><div class="line">                    set resultString to resultString &amp; inputStringCharacter</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    <span class="keyword">if</span> (asciiValue &gt; <span class="number">47</span> and asciiValue &lt; <span class="number">58</span>) then</div><div class="line">                        set numberStrings to &#123;<span class="string">"ZERO"</span>, <span class="string">"ONE"</span>, <span class="string">"TWO"</span>, <span class="string">"THREE"</span>, <span class="string">"FOR"</span>, <span class="string">"FIVE"</span>, <span class="string">"SIX"</span>, <span class="string">"SEVEN"</span>, <span class="string">"EIGHT"</span>, <span class="string">"NINE"</span>&#125;</div><div class="line">                        set itemIndex to asciiValue - <span class="number">47</span></div><div class="line">                        set numberString to item itemIndex <span class="keyword">of</span> numberStrings</div><div class="line">                        set resultString to resultString &amp; numberString &amp; <span class="string">" "</span></div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        <span class="keyword">if</span> (asciiValue = <span class="number">33</span>) then</div><div class="line">                            set resultString to resultString &amp; <span class="string">" DUH"</span></div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            <span class="keyword">if</span> (asciiValue = <span class="number">63</span>) then</div><div class="line">                                set resultString to resultString &amp; <span class="string">" IF YOU KNOW WHAT I MEAN"</span></div><div class="line">                            end <span class="keyword">if</span></div><div class="line">                        end <span class="keyword">if</span></div><div class="line">                    end <span class="keyword">if</span></div><div class="line">                end <span class="keyword">if</span></div><div class="line">            end <span class="keyword">if</span></div><div class="line">        end repeat</div><div class="line">        resultString</div><div class="line">end chockify</div></pre></td></tr></table></figure></p>
<h3 id="创建事件描述符-event-descriptor"><a href="#创建事件描述符-event-descriptor" class="headerlink" title="创建事件描述符 (event descriptor)"></a>创建事件描述符 (event descriptor)</h3><ol>
<li>导入Carbon.h<br>它有关于所有的 AppleEvent 的定义。<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Carbon/Carbon.h&gt;</span> // for AppleScript definitions</span></div></pre></td></tr></table></figure></li>
<li>OC中创建<code>chockify</code>事件描述符<br>这是可以在你的脚本和应用之间互相传递的一个数据块。可以把它理解成一个封装好的会去执行某个事件的目标，一个将被调用的函数，以及这个函数的参数。使用一个 <code>NSString</code> 作为参数，创建<code>chockify</code>事件描述符：<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSAppleEventDescriptor</span> *)chockifyEventDescriptorWithString:(<span class="built_in">NSString</span> *)inputString</div><div class="line">&#123;</div><div class="line">    <span class="comment">// parameter</span></div><div class="line">    <span class="built_in">NSAppleEventDescriptor</span> *parameter = [<span class="built_in">NSAppleEventDescriptor</span> descriptorWithString:inputString];</div><div class="line">    <span class="built_in">NSAppleEventDescriptor</span> *parameters = [<span class="built_in">NSAppleEventDescriptor</span> listDescriptor];</div><div class="line">    [parameters insertDescriptor:parameter atIndex:<span class="number">1</span>]; <span class="comment">// you have to love a language with indices that start at 1 instead of 0</span></div><div class="line"></div><div class="line">    <span class="comment">// target</span></div><div class="line">    ProcessSerialNumber psn = &#123;<span class="number">0</span>, kCurrentProcess&#125;;</div><div class="line">    <span class="built_in">NSAppleEventDescriptor</span> *target = [<span class="built_in">NSAppleEventDescriptor</span> descriptorWithDescriptorType:typeProcessSerialNumber bytes:&amp;psn length:<span class="keyword">sizeof</span>(ProcessSerialNumber)];</div><div class="line"></div><div class="line">    <span class="comment">// function</span></div><div class="line">    <span class="built_in">NSAppleEventDescriptor</span> *function = [<span class="built_in">NSAppleEventDescriptor</span> descriptorWithString:<span class="string">@"chockify"</span>];</div><div class="line"></div><div class="line">    <span class="comment">// event</span></div><div class="line">    <span class="built_in">NSAppleEventDescriptor</span> *event = [<span class="built_in">NSAppleEventDescriptor</span> appleEventWithEventClass:kASAppleScriptSuite eventID:kASSubroutineEvent targetDescriptor:target returnID:kAutoGenerateReturnID transactionID:kAnyTransactionID];</div><div class="line">    [event setParamDescriptor:function forKeyword:keyASSubroutineName];</div><div class="line">    [event setParamDescriptor:parameters forKeyword:keyDirectObject];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> event;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="OC中加载-AppleScript"><a href="#OC中加载-AppleScript" class="headerlink" title="OC中加载 AppleScript"></a>OC中加载 AppleScript</h3><p>通过应用包(Application bundle)的一个 <code>URL</code> 可以创建 <code>NSAppleScript</code>的实例。而反过来，脚本也要和上面创建的 <code>chockify 事件描述符</code>一起使用。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURL</span> *URL = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"Automation"</span> withExtension:<span class="string">@"scpt"</span>];</div><div class="line"><span class="keyword">if</span> (URL) </div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSAppleScript</span> *appleScript = [[<span class="built_in">NSAppleScript</span> alloc] initWithContentsOfURL:URL error:<span class="literal">NULL</span>];</div><div class="line"></div><div class="line">    <span class="built_in">NSAppleEventDescriptor</span> *event = [<span class="keyword">self</span> chockifyEventDescriptorWithString:[<span class="keyword">self</span>.chockifyInputTextField stringValue]];</div><div class="line">    <span class="built_in">NSDictionary</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSAppleEventDescriptor</span> *resultEventDescriptor = [appleScript executeAppleEvent:event error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (! resultEventDescriptor) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%s AppleScript run error = %@"</span>, __PRETTY_FUNCTION__, error);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSString</span> *string = [<span class="keyword">self</span> stringForResultEventDescriptor:resultEventDescriptor];</div><div class="line">        [<span class="keyword">self</span> updateChockifyTextFieldWithString:string];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>如果一切正常的话，你会得到另一个事件描述符。如果出错了，你会得到一个包含了描述错误信息的字典。虽说这个模式和很多其他 <code>Foundation 类</code>很相似，但是返回的错误并不是一个 <code>NSError</code> 的实例。</p>
<h3 id="调用事件描述符"><a href="#调用事件描述符" class="headerlink" title="调用事件描述符"></a>调用事件描述符</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)stringForResultEventDescriptor:(<span class="built_in">NSAppleEventDescriptor</span> *)resultEventDescriptor</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *result = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">if</span> (resultEventDescriptor)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ([resultEventDescriptor descriptorType] != kAENullEvent)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ([resultEventDescriptor descriptorType] == kTXNUnicodeTextData) </div><div class="line">            &#123;</div><div class="line">                result = [resultEventDescriptor stringValue];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>InputString 输入可以被正确整形输出，并且你现在也看到想在你的应用里运行 AppleScripts 的方法</p>
<h2 id="调用沙盒中脚本代码与访问其他应用"><a href="#调用沙盒中脚本代码与访问其他应用" class="headerlink" title="调用沙盒中脚本代码与访问其他应用"></a>调用沙盒中脚本代码与访问其他应用</h2><h3 id="了解APP沙盒限制"><a href="#了解APP沙盒限制" class="headerlink" title="了解APP沙盒限制"></a>了解APP沙盒限制</h3><p>如果一段脚本可以轻易地拿到浏览器当前页面上的内容，甚至是在任意标签和窗口运行<code>JavaScript</code>。想象一下如果这些页面里有你的银行账号，或者包含你的信用卡信息什么的。</p>
<p>对于沙盒应用，Apple 所提倡的是通过用户的需要来驱动安全策略。这意味着是否运行你的脚本完全取决于用户。这些脚本可能是来自互联网，也可能是你应用的一部分。一旦得到了权限，脚本就可以以一种受限的方式与系统其他部分进行交互了。<code>NSUserScriptTask</code>使这一切变得可能。<br>由此：Apple 引入了一个新的抽象类 <code>NSUserScriptTask</code>,有三个具体的子类实现:</p>
<ol>
<li><code>NSUserUnixTask</code>: 执行 Unix shell 命令</li>
<li><code>NSUserAutomatorTask</code>: Automator 工作流</li>
<li><code>NSUserAppleScriptTask</code>:执行<code>AppleScript脚本</code>,脚本是异步执行的,所以脚本不能对用户界面做更新操作。</li>
</ol>
<h3 id="开始安装运行脚本"><a href="#开始安装运行脚本" class="headerlink" title="开始安装运行脚本"></a>开始安装运行脚本</h3><p>怎么向用户请求运行脚本的许可，让你的应用与用户的其他应用更好地工作在一起？<br>两种策略:</p>
<ol>
<li>帮助用户来存放运行脚本的位置</li>
<li>获取行脚本目录可读写</li>
</ol>
<h4 id="帮用户存放运行脚本的位置"><a href="#帮用户存放运行脚本的位置" class="headerlink" title="帮用户存放运行脚本的位置"></a>帮用户存放运行脚本的位置</h4><p>只能把把这些脚本放到用户的脚本文件夹(<code>User &gt; Library &gt; Application Scripts/bundle identifier/</code>)中，以只读的方式来运行你的脚本。<br>脚本想要进入这个特定的文件夹的唯一方式就是用用户把它们复制到那里。再者<code>Library 文件夹</code>在 OS X 里默认还是隐藏的。这样对用户都很不友好。<br>让代码来帮助用户打开这个隐藏文件夹：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSError</span> *error;</div><div class="line"><span class="built_in">NSURL</span> *directoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSApplicationScriptsDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">YES</span> error:&amp;error];</div><div class="line">[[<span class="built_in">NSWorkspace</span> sharedWorkspace] openURL:directoryURL];</div></pre></td></tr></table></figure><br>通过你的应用的某个控件打开这个文件夹，然后进行编辑。这对于用户自己写的脚本来说是个很好的解决方案。</p>
<h4 id="设置运行脚本目录的读写权限"><a href="#设置运行脚本目录的读写权限" class="headerlink" title="设置运行脚本目录的读写权限"></a>设置运行脚本目录的读写权限</h4><ol>
<li>在 Xcode 里，你需要更新 <code>Capabilities</code>，让其包括 <code>User Selected File to Read/Write</code>。在 <code>App Sandbox &gt; File Access</code>里找到相关选项。</li>
<li>用户的意愿是关键，因为你需要获取权限以将脚本添加到文件夹：<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSError</span> *error;</div><div class="line"><span class="built_in">NSURL</span> *directoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSApplicationScriptsDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">YES</span> error:&amp;error];</div><div class="line"><span class="built_in">NSOpenPanel</span> *openPanel = [<span class="built_in">NSOpenPanel</span> openPanel];</div><div class="line">[openPanel setDirectoryURL:directoryURL];</div><div class="line">[openPanel setCanChooseDirectories:<span class="literal">YES</span>];</div><div class="line">[openPanel setCanChooseFiles:<span class="literal">NO</span>];</div><div class="line">[openPanel setPrompt:<span class="string">@"Select Script Folder"</span>];</div><div class="line">[openPanel setMessage:<span class="string">@"Please select the User &gt; Library &gt; Application Scripts &gt; com.iconfactory.Scriptinator folder"</span>];</div><div class="line"></div><div class="line">[openPanel beginWithCompletionHandler:^(<span class="built_in">NSInteger</span> result) &#123;</div><div class="line"><span class="keyword">if</span> (result == <span class="built_in">NSFileHandlingPanelOKButton</span>) </div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSURL</span> *selectedURL = [openPanel URL];</div><div class="line">    <span class="keyword">if</span> ([selectedURL isEqual:directoryURL])</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSURL</span> *destinationURL = [selectedURL URLByAppendingPathComponent:<span class="string">@"Automation.scpt"</span>];</div><div class="line">        <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">        <span class="built_in">NSURL</span> *sourceURL = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"Automation"</span> withExtension:<span class="string">@"scpt"</span>];</div><div class="line">        <span class="built_in">NSError</span> *error;</div><div class="line">        <span class="built_in">BOOL</span> success = [fileManager copyItemAtURL:sourceURL toURL:destinationURL error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (success)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">NSAlert</span> *alert = [<span class="built_in">NSAlert</span> alertWithMessageText:<span class="string">@"Script Installed"</span> defaultButton:<span class="string">@"OK"</span> alternateButton:<span class="literal">nil</span> otherButton:<span class="literal">nil</span> informativeTextWithFormat:<span class="string">@"The Automation script was installed succcessfully."</span>];</div><div class="line">            [alert runModal];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">        &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%s error = %@"</span>, __PRETTY_FUNCTION__, error);</div><div class="line">            <span class="keyword">if</span> ([error code] == <span class="built_in">NSFileWriteFileExistsError</span>) </div><div class="line">            &#123;</div><div class="line">                <span class="comment">// this is where you could update the script, by removing the old one and copying in a new one</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123;</div><div class="line">                <span class="comment">// the item couldn't be copied, try again</span></div><div class="line">                [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(installAutomationScript:) withObject:<span class="keyword">self</span> afterDelay:<span class="number">0.0</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> </div><div class="line">    &#123;</div><div class="line">        <span class="comment">// try again because the user changed the folder path</span></div><div class="line">        [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(installAutomationScript:) withObject:<span class="keyword">self</span> afterDelay:<span class="number">0.0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
这么一来，应用包中的 <code>Automation.scpt</code> 文件现在暴露在常规的文件系统中了。</li>
</ol>
<h3 id="执行脚本任务"><a href="#执行脚本任务" class="headerlink" title="执行脚本任务"></a>执行脚本任务</h3><p>使用 <code>NSUserAppleScriptTask</code> 来替代 <code>NSAppleScript</code>，来运行上面创建的<code>事件描述符</code>。<br>你大概会经常用到这些脚本任务。文档警告说对于给定的类的某个实例， <code>NSUserAppleScriptTask</code> 不应该被执行多次。所以写一个<code>工厂函数</code>来在需要的时候创建任务：<br><figure class="highlight objc"><figcaption><span>工厂函数</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSUserAppleScriptTask</span> *)automationScriptTask</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSUserAppleScriptTask</span> *result = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="built_in">NSURL</span> *directoryURL = [[<span class="built_in">NSFileManager</span> defaultManager] URLForDirectory:<span class="built_in">NSApplicationScriptsDirectory</span> inDomain:<span class="built_in">NSUserDomainMask</span> appropriateForURL:<span class="literal">nil</span> create:<span class="literal">YES</span> error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (directoryURL) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSURL</span> *scriptURL = [directoryURL URLByAppendingPathComponent:<span class="string">@"Automation.scpt"</span>];</div><div class="line">        result = [[<span class="built_in">NSUserAppleScriptTask</span> alloc] initWithURL:scriptURL error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (! result) </div><div class="line">        &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%s no AppleScript task error = %@"</span>, __PRETTY_FUNCTION__, error);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> if you're not running in a sandbox, the directory URL will always be nil</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%s no Application Scripts folder error = %@"</span>, __PRETTY_FUNCTION__, error);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果你正在写一个同时适用于沙盒和非沙盒的 Mac 应用的话，在获取 <code>directoryURL</code> 时你需要特别小心。<code>NSApplicationScriptsDirectory</code>只在沙盒中有效。</p>
</blockquote>
<p>在创建脚本任务后，你需要使用 <code>AppleEvent</code> 并提供一个结束处理来执行它：<br><figure class="highlight objc"><figcaption><span>AppleEvent</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUserAppleScriptTask</span> *automationScriptTask = [<span class="keyword">self</span> automationScriptTask];</div><div class="line"><span class="keyword">if</span> (automationScriptTask) </div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSAppleEventDescriptor</span> *event = [<span class="keyword">self</span> safariURLEventDescriptor];</div><div class="line">    [automationScriptTask executeWithAppleEvent:event completionHandler:^(<span class="built_in">NSAppleEventDescriptor</span> *resultEventDescriptor, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">        <span class="keyword">if</span> (! resultEventDescriptor) </div><div class="line">        &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%s AppleScript task error = %@"</span>, __PRETTY_FUNCTION__, error);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">NSURL</span> *URL = [<span class="keyword">self</span> URLForResultEventDescriptor:resultEventDescriptor];</div><div class="line">            <span class="comment">// <span class="doctag">NOTE:</span> The completion handler for the script is not run on the main thread. Before you update any UI, you'll need to get</span></div><div class="line">            <span class="comment">// on that thread by using libdispatch or performing a selector.</span></div><div class="line">            [<span class="keyword">self</span> performSelectorOnMainThread:<span class="keyword">@selector</span>(updateURLTextFieldWithURL:) withObject:URL waitUntilDone:<span class="literal">NO</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>对于用户写的脚本，用户可能期望你的应用只是简单地’运行’脚本 (而不去调用事件描述符中指定的函数)。在这种情况下，你可以为 <code>event</code> 传递一个 <code>nil</code>，脚本就会像用户在 <code>Finder</code> 中双击那样的行为进行执行。<br><code>NSUserAppleScriptTask</code>脚本是异步执行的，所以你的用户界面并不会被一个 (比较长) 的脚本锁住，在结束后会执行回调处理。</p>
<h2 id="同步操作"><a href="#同步操作" class="headerlink" title="同步操作"></a>同步操作</h2><p><code>NSAppleScript</code> 和 <code>NSUserAppleScriptTask</code> 有一个微妙的区别：新的机制是异步执行的。对于大部分情况，使用一个结束回调来处理会是一个好得多的方式，因为这样就不会因为执行脚本而阻碍你的应用。<br>然而有时候如果你想带有依赖地来执行任务的时候，事情就变得有些取巧了。比方说一个任务需要在另一个任务开始之前必须完成。这种情况下你就会想念 <code>NSAppleScript</code> 的同步特性了。<br>要获得传统方式的行为，一种简单的方法是使用一个<code>信号量(semaphore)</code> 来确保同时只有一个任务运行、在你的类或者应用的初始化方法中，使用 <code>libdispatch</code> 创建一个信号量：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.appleScriptTaskSemaphore = dispatch_semaphore_create(<span class="number">1</span>);</div></pre></td></tr></table></figure><br>接下来在初始化脚本任务之前，简单地等待信号量。当任务完成时，标记相同的这个信号量：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// wait for any previous tasks to complete before starting a new one — remember that you're blocking the main thread here!</span></div><div class="line">dispatch_semaphore_wait(<span class="keyword">self</span>.appleScriptTaskSemaphore, DISPATCH_TIME_FOREVER);</div><div class="line"></div><div class="line"><span class="comment">// run the script task</span></div><div class="line"><span class="built_in">NSAppleEventDescriptor</span> *event = [<span class="keyword">self</span> openNetworkPreferencesEventDescriptor];</div><div class="line">[automationScriptTask executeWithAppleEvent:event completionHandler:^(<span class="built_in">NSAppleEventDescriptor</span> *resultEventDescriptor, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="keyword">if</span> (! resultEventDescriptor)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%s AppleScript task error = %@"</span>, __PRETTY_FUNCTION__, error);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> </div><div class="line">    &#123;</div><div class="line">        [<span class="keyword">self</span> performSelectorOnMainThread:<span class="keyword">@selector</span>(showNetworkAlert) withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">NO</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// the task has completed, so let any pending tasks proceed</span></div><div class="line">    dispatch_semaphore_signal(<span class="keyword">self</span>.appleScriptTaskSemaphore);</div><div class="line">&#125;];</div></pre></td></tr></table></figure><br>再强调一下，除非确实有所需要，否则最好别这么做。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何使用脚本字典里的命令和对象来与其他的应用进行通讯?&lt;br&gt;这个教程将向您展示现在使用 &lt;code&gt;AppleScript&lt;/code&gt; 来控制别的应用的最佳方式。我也会告诉您一些小技巧以帮助您和您的用户用最小的努力就架设起 &lt;code&gt;AppleScript&lt;/code
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="脚本" scheme="https://huos3203.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="AppleScript" scheme="https://huos3203.github.io/tags/AppleScript/"/>
    
      <category term="沙盒" scheme="https://huos3203.github.io/tags/%E6%B2%99%E7%9B%92/"/>
    
  </entry>
  
  <entry>
    <title>macOS之PDFKit基础</title>
    <link href="https://huos3203.github.io/2017/02/14/macOS%E4%B9%8BPDFKit%E5%9F%BA%E7%A1%80/"/>
    <id>https://huos3203.github.io/2017/02/14/macOS之PDFKit基础/</id>
    <published>2017-02-14T06:29:18.000Z</published>
    <updated>2017-02-14T06:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个PDF的基本构建块是Documents本身。Documents通常作为文件存储在磁盘上。<br>作为文件版本，可以支持元数据标记如作者，创建日期，等等。<br>一个文件可以加密，需要密码才能查看它。两级加密存在：</p>
<ul>
<li>用户级加密：如果用户成功地获得用户级权限，他或她可以查看文档，但可以限制打印或复制文档。</li>
<li>所有者级别加密：获得所有者级别权限的用户可以查看文档并具有完全使用权限。<br>许多加密的PDF文件有一个“dummy”的用户密码为<code>空字符串</code>。大多数PDF文档解析器（包括PDF套件）自动尝试空字符串密码加密后的文件，如果成功，只显示文档。因此，在技术上加密的文档不一定提示用户口令。</li>
</ul>
<h2 id="PDF页面"><a href="#PDF页面" class="headerlink" title="PDF页面"></a>PDF页面</h2><p>一个PDF文档由若干页面组成。这个页面看起来就像一本物理书页面显示在屏幕上。同时PDF页面可以包含<code>超链接</code>和<code>注释</code>。页面可以支持<code>裁剪</code>，还有其他使用功能：例如隐藏多余的部分（如注册标记）。</p>
<h3 id="view-VS-page空间坐标"><a href="#view-VS-page空间坐标" class="headerlink" title="view VS page空间坐标"></a>view VS page空间坐标</h3><p>页面上的大多数对象都是在<code>page</code>空间中指定的，而不是在<code>view</code>空间中。<br>也就是说，坐标系统是在点（每英寸72点），<code>坐标原点</code>在page左侧底部，而不是<code>view</code>。<code>page</code>空间不关心缩放，显示模式等等。一个有<code>bounds</code>的item，比如说32points，保留这些界限，无论显示大小。<br>图view和page坐标系比较<br><img src="/images/view_vspage_space.gif" class="view和page坐标系比较"><br><code>PDFView class</code>包含几个转换方法，将坐标系统从<code>view space</code>的<code>page space</code>，反之亦然。</p>
<h2 id="PDF-Kit-Classes"><a href="#PDF-Kit-Classes" class="headerlink" title="PDF Kit Classes"></a>PDF Kit Classes</h2><p><code>PDF Kit</code>套件提供了几个不同功能的<code>类</code>。<br><code>PDFView</code>和<code>PDFSelection</code>除外，这些<code>类</code>大致对应着各个<code>对象</code>在PDF格式的规范需求。<br><img src="/images/pdfkit_inheritancehierarchy.gif"></p>
<h3 id="PDFView-Class"><a href="#PDFView-Class" class="headerlink" title="PDFView Class"></a>PDFView Class</h3><p><code>PDFView类</code>，就好比Web工具包的<code>WebView类</code>，源于<code>Application Kit</code>中的<code>NSView类</code>。在项目开发中，你可以使用<code>Interface Builder</code>轻松拖动一个<code>PDFView对象</code>放在一个window中。<del>从/Developer/Extras/Palettes/PDFKit.palette得到调色板。</del><br><code>PDFView</code>可能是<code>PDF Kit</code>中唯一个需要你自定义的的类。在APP中显示PDF数据，允许用户选择文档内容和导航浏览PDF文档，设置缩放级别，复制文本内容到剪贴板。用户可以拖放PDF文档到<code>PDFView</code>。<br><code>PDFView</code>能通过调用其他<code>PDF实用类</code>来实现其大部分功能。如果要添加特殊功能，则需要用户自定义<code>实用类</code>的子类来扩展其特殊功能。<br>Utility classes as used by PDFView<br><img src="/images/pdfkit_uses_hierarchy.gif"></p>
<h3 id="PDF-Kit-Utility-Classes"><a href="#PDF-Kit-Utility-Classes" class="headerlink" title="PDF Kit Utility Classes"></a>PDF Kit Utility Classes</h3><p>PDF套件工具类提供一种混合的<code>Foundation-like</code>和<code>Application Kit-like</code>的行为。他们有类似的<code>NSString类</code>和<code>NSString Additions</code>方法。这些类都系橙自<code>NSObject</code><br><img src="/images/pdfkit_inheritancehierarchy.gif"></p>
<h4 id="PDF-Document"><a href="#PDF-Document" class="headerlink" title="PDF Document"></a>PDF Document</h4><p><code>PDFDocument</code>是<code>PDF kit工具类</code>中重要类，代表着PDF data或PDF文件。其他实用工具类一般都在<code>PDFDocument</code>方法中的实例化。是<code>PDFPage</code>和<code>PDFOutline</code>；或相关支持操作：<code>PDFSelection</code>和<code>PDFDestination</code>。<br>你<code>PDFDocument对象</code>初始化，需要一个<code>PDF数据</code>或一个指向PDF文件的<code>URL</code>。实例化之后就可以访问<code>页数</code>，<code>添加</code>或<code>删除</code>页面，对所选内容为<code>NSString对象</code>进行<code>查找</code>或<code>分析</code>。</p>
<h4 id="PDFPage"><a href="#PDFPage" class="headerlink" title="PDFPage"></a>PDFPage</h4><p><code>PDFPage</code>代表一个PDF文档的页面。你的应用程序获取一个<code>PDFPage</code>对象必须通过从<code>PDFDocument</code>对象来实例化。<code>PDFPage</code>对象是用户所看到的屏幕，和一个<code>view</code>可以同时显示多个<code>page</code>。你可以使用<code>PDFPage</code>把PDF文档内容渲染到屏幕上，添加<code>注释</code>，<code>计数字符串</code>，定义<code>选择</code>，获取一个<code>page</code>中的文本内容作为<code>NSString对象</code>或<code>NSAttributedString对象</code>。</p>
<h4 id="PDFOutline"><a href="#PDFOutline" class="headerlink" title="PDFOutline"></a>PDFOutline</h4><p>除了显示实际的文件内容，<code>PDF Kit</code>也能呈现<code>PDFOutline</code>信息，前提是PDF文档中存在目录结构。在目录结构中，一个<code>PDFOutline对象</code>代表一个<code>父目录</code>或<code>子目录</code>。<br>目录是由一个层次的<code>PDFOutline对象</code>组层。顶层是<code>根目录对象</code>，它仅作为其他目录对象的容器。用户的<code>根目录</code>是不可见的。</p>
<h4 id="PDFSelection"><a href="#PDFSelection" class="headerlink" title="PDFSelection"></a>PDFSelection</h4><p>一个<code>PDFSelection</code>对象包含一个跨PDF文档中文本。你不要直接创建<code>PDFSelection</code>。<code>PDFSelection</code>对象是作为返回值来实例化的。例如：通过调用<code>PDFPage</code>或<code>PDFDocument</code>对象中的selection方法，并从成功搜索的返回值来实例化<code>PDFSelection</code>对象。<br>在同时显示多个<code>PDFPage</code>的<code>PDFView</code>中，<code>PDFSelection</code>可以是不连续的，或两者兼具的。例如，可以选择在一个单柱连续两列页面的文本。可以在任何方向从一个选择区, 合并选择区, 或扩展选择区中得到文本和网页覆盖。</p>
<h4 id="PDFAnnotation"><a href="#PDFAnnotation" class="headerlink" title="PDFAnnotation"></a>PDFAnnotation</h4><p>一个<code>PDFAnnotation</code>对象可以表示多种内容以外，在一个PDF文件的主要文本内容：链接、表单元素，突出圈子，等等。每个注释与页面上的特定位置相关，并且可以与用户提供交互性。<br><code>PDFAnnotation</code>是如图所示的具体类的抽象类。各种具体类代表<code>PDF Kit</code>支持的注释类型。<br><img src="/images/annotations.gif"></p>
<h4 id="PDFBorder"><a href="#PDFBorder" class="headerlink" title="PDFBorder"></a>PDFBorder</h4><p><code>PDFBorder</code>对象封装的拉伸<code>PDFAnnotation</code>对象边框的行为。可以定义一个PDF的bord线的风格属性（例如，固体，破灭，或斜面），bord线的宽度，和圆角半径。</p>
<p>过期:<del>从/Developer/Extras/Palettes/PDFKit.palette得到调色板。</del><br>Here’s what Apple says about it:<br><blockquote><p>“To add the PDFKit palette in Interface Builder, select the Palettes tab in the Preferences panel. Click the Add<br>button, navigate to the /Developer/Extras/Palettes folder, and select the PDFKit palette. Next, select the Customize Toolbar menu item in the Tools/Palettes menu and drag the PDFKit palette to the toolbar to make it visible.”</p>
<footer><strong>老文档</strong><cite><a href="http://developer.apple.com/library/mac/#documentation/GraphicsImaging/Conceptual/PDFKitGuide/PDFKit_Prog_Tasks/PDFKit_Prog_Tasks.html" target="_blank" rel="external">PDFKit_Prog_Tasks</a></cite></footer></blockquote><br>So:<br>there’s no Palettes tab anywhere in the Preferences panel and the Xcode Help return a blank when searching for it.<br>There’s no PDFKit.palette file anywhere on my HD (says Spotlight).<br>I guess these instructions are for an older version of XCode but it’s all Apple seemed to have on it…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个PDF的基本构建块是Documents本身。Documents通常作为文件存储在磁盘上。&lt;br&gt;作为文件版本，可以支持元数据标记如作者，创建日期，等等。&lt;br&gt;一个文件可以加密，需要密码才能查看它。两级加密存在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户级加密：如果用户成功地获得
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="UI" scheme="https://huos3203.github.io/tags/UI/"/>
    
      <category term="PDF" scheme="https://huos3203.github.io/tags/PDF/"/>
    
      <category term="阅读器" scheme="https://huos3203.github.io/tags/%E9%98%85%E8%AF%BB%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Fabric对macOS系统的支持</title>
    <link href="https://huos3203.github.io/2017/02/14/Fabric%E5%AF%B9macOS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%94%AF%E6%8C%81%E8%B0%83%E7%A0%94/"/>
    <id>https://huos3203.github.io/2017/02/14/Fabric对macOS系统的支持调研/</id>
    <published>2017-02-14T03:14:35.000Z</published>
    <updated>2017-02-14T06:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fabric"><a href="#Fabric" class="headerlink" title="Fabric"></a>Fabric</h2><p><code>Fabric</code> 是Twitter的移动应用开发平台，一个模块化、跨平台的移动开发套件，该博文主要研究<code>crashlytics</code>在app中的运用。<br><a href="https://try.crashlytics.com/" target="_blank" rel="external">注册新的账户</a>登录，审核通过时间为几个小时或者1到2天不等。然后注册时候输入的邮箱就会收到如下的邀请涵<br><a href="https://docs.fabric.io/apple/crashlytics/os-x.html#macos-support" target="_blank" rel="external">浏览官方文档</a></p>
<h3 id="crashlytics支持macOS"><a href="#crashlytics支持macOS" class="headerlink" title="crashlytics支持macOS"></a>crashlytics支持macOS</h3><p>对<code>macOS</code>的支持中出现的问题<br>问题：<code>NSApplicationCrashOnExceptions</code> is not set. This will result in poor <code>top-level</code> uncaught exception reporting<br>官方解释：<br><blockquote><p>Uncaught Exceptions<br>Intercepting and reporting uncaught exceptions on macOS is more complex than it is on iOS. On macOS, AppKit will catch exceptions thrown on the main thread, preventing the application from crashing, but also preventing Crashlytics from reporting them. To make matters worse, Apple’s frameworks are not exception safe. This means that while AppKit will prevent your app from crashing, it will also likely corrupt your process’s state, often including AppKit itself. Typically, once an exception involving UI interaction is thrown, it will prevent your app from working correctly from that moment on.<br>Thankfully, AppKit has a little-known feature you can turn on to make the behavior much more predictable. We strongly recommend that you do the following in your application, right before you initialize Crashlytics.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] registerDefaults:@&#123; <span class="string">@”NSApplicationCrashOnExceptions”</span>: @YES &#125;];</div></pre></td></tr></table></figure>

<p>This will make your application’s behavior much closer to iOS. It will mean that your app will crash on uncaught exceptions, and will also allow Crashlytics to report them with useful stack traces. It will also give you the ability to override this behavior with the user defaults system, even on per-user basis.<br>Of course, this is all optional. Crashlytics will warn about NSApplicationCrashOnExceptions not being set, but will otherwise preserve normal AppKit behavior by default.</p>
<footer><strong>官方文档</strong><cite><a href="https://docs.fabric.io/apple/crashlytics/os-x.html#macos-support" target="_blank" rel="external">macOS Support</a></cite></footer></blockquote><br>拦截和报告未捕获的异常在MacOS比iOS更复杂。在MacOS，AppKit会抓住扔在主线程异常，防止应用程序崩溃，也防止crashlytics报告他们。更糟糕的是，Apple’s frameworks也不例外。这意味着AppKit可以防止你的应用程序崩溃，也可能破坏你的进程的状态，包括AppKit本身。通常情况下，一旦涉及到用户界面交互的异常被抛出，它将阻止您的应用程序从正确的工作从那一刻起。<br>以上情况，可以通过设置：<code>NSApplicationCrashOnExceptions</code> 改变系统默认的值，达到像iOS端一样抓去异常。如果没有设置会提示：NSApplicationCrashOnExceptions not set</p>
<h3 id="Cause-a-Test-Crash教程"><a href="#Cause-a-Test-Crash教程" class="headerlink" title="Cause a Test Crash教程"></a><a href="https://docs.fabric.io/apple/crashlytics/test-crash.html" target="_blank" rel="external">Cause a Test Crash教程</a></h3><p>崩溃日志是在重启APP程序的同时进行的，要确保程序在前台全屏显示。<br>Xcode调试器会阻止我们捕捉崩溃报告，所以在抓取崩溃报告时，要保证在非调试状态下进行。如果你的移动设备连接到Mac机上，Xcode仍然可以进入调试状态。</p>
<ol>
<li><code>run</code>在模拟器上安装运行APP</li>
<li>点击<code>Stop</code>断开Xcode和模拟器，确保在非调试状态</li>
<li>在模拟器上启动APP，并执行崩溃操作</li>
<li>在Xcode上点击<code>run</code><br>在Xcode的控制台console中输出显示奔溃报告，以及上传日志的相关提示。<br>macOS系统中的日志目录：<br>运行日志目录：/private/var/log/system.log<br>奔溃日志目录：/Users/pyc/Library/Logs/DiagnosticReports/APPNAME_2016-11-10-165115.crash</li>
</ol>
<blockquote><p>It’s possible, but rare, that we are missing a dSYM to symbolicate any crash reports. There will be an alert on your dashboard if this is the case. Click through to upload the missing dSYM. Keep in mind that exceptions are not guaranteed to crash. The full code path, including code in system libraries, matters here. If you aren’t seeing the dSYM alert, you can go to your app’s settings page, and append “/mappings” to the URL to reach it, e.g. <a href="https://fabric.io/settings/apps/some_app_id/mappings" target="_blank" rel="external">https://fabric.io/settings/apps/some_app_id/mappings</a></p>
<footer><strong>官方文档</strong><cite><a href="https://docs.fabric.io/apple/crashlytics/test-crash.html" target="_blank" rel="external">Cause a Test Crash教程</a></cite></footer></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Fabric&quot;&gt;&lt;a href=&quot;#Fabric&quot; class=&quot;headerlink&quot; title=&quot;Fabric&quot;&gt;&lt;/a&gt;Fabric&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Fabric&lt;/code&gt; 是Twitter的移动应用开发平台，一个模块化、跨平台的移动开发套件
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="搭建" scheme="https://huos3203.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="测试" scheme="https://huos3203.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="SDK" scheme="https://huos3203.github.io/tags/SDK/"/>
    
      <category term="发布" scheme="https://huos3203.github.io/tags/%E5%8F%91%E5%B8%83/"/>
    
      <category term="macOS" scheme="https://huos3203.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>思维导图之开发实践篇</title>
    <link href="https://huos3203.github.io/2017/02/13/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8B%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E7%AF%87/"/>
    <id>https://huos3203.github.io/2017/02/13/思维导图之开发实践篇/</id>
    <published>2017-02-13T09:11:26.000Z</published>
    <updated>2017-02-13T09:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阅读书籍"><a href="#阅读书籍" class="headerlink" title="阅读书籍"></a>阅读书籍</h2><ul>
<li>5种图表解决工作中的12大难题</li>
<li>你的第一本思维导图操作书</li>
<li>5分钟手绘彩色圆珠笔涂鸦集</li>
<li>如果阅读一本书</li>
</ul>
<p>使用思维导图的场景无处不在，无论是做产品还是做设计，我们都需要清晰的思路，明确自己需要做些什么，最后需要达到什么效果，这时候，如果有一张清晰的思维导图，就能很快的理清自己的思路。作为互联网公司自称是产品型设计师（也就是既需要帮助老板整理需求梳理产品，也要设计漂亮的界面）的我更是如此。 </p>
<p>目的：通过学习在该文章中讲到的开发设计案例，站在项目开发角度，了解从速记到思维导图再到实际开发的过程。<br>从产品、设计等方面谈谈我是如何运用思维导图的。</p>
<h2 id="需求分析——完善最初的想法"><a href="#需求分析——完善最初的想法" class="headerlink" title="需求分析——完善最初的想法"></a>需求分析——完善最初的想法</h2><p>一般老板只会告诉我们大概需要一个什么东西，具体的细节还需要我们去整理。这时候，我会把大概涉及到的基本点写在纸上，想到一条写一条，特别是一些需要注意的地方。</p>
<h3 id="需求速记法"><a href="#需求速记法" class="headerlink" title="需求速记法"></a>需求速记法</h3><p>先用纸笔速记的方式，把临时能想到的点记录下来<br><img src="/images/需求速记.jpg" class="需求速记" width="300" height="500"><br>在纸上列得差不多了，再新建一个 <code>XMind</code> 文档，把之前列的一些点一一转到电脑上，然后整理分类。</p>
<h3 id="功能结构图案例"><a href="#功能结构图案例" class="headerlink" title="功能结构图案例"></a>功能结构图案例</h3><ol>
<li>码市逻辑图<br>通过思维导图能够一目了然的看到码市的功能<img src="https://dn-coding-net-production-pp.qbox.me/fa34c949-b36d-4c86-a1be-a6f6c5459f3e.png"></li>
<li>网站功能逻辑图<br>通过功能主干图直观显示了一个网站或者 APP 整体大功能组成部分，一般在写产品需求文档时需要的功能逻辑图。<img src="https://dn-coding-net-production-pp.qbox.me/535567ad-e51f-43b9-aa66-8b98fc719dc6.png">
<h2 id="产品设计——通过画原型来完善功能结构"><a href="#产品设计——通过画原型来完善功能结构" class="headerlink" title="产品设计——通过画原型来完善功能结构"></a>产品设计——通过画原型来完善功能结构</h2><code>梳理功能结构和画原型是产品设计中相互迭代的过程</code>，在画原型时会具体到每个元素的交互过程，一旦发现功能结构导图的不合理，就要及时调整思路，做到一边画原型一边更新功能结构。<h3 id="悬赏功能结构图"><a href="#悬赏功能结构图" class="headerlink" title="悬赏功能结构图"></a>悬赏功能结构图</h3>为产品原型图考虑，在梳理整理产品功能结构图时，尽可能包括页面上所有需要展示的内容以及基本的交互流程等。<br>下面这个图是码市功能结构中的发布悬赏功能部分：<img src="https://dn-coding-net-production-pp.qbox.me/4b1d61b9-c558-4afc-9aed-54dd47b440be.png" class="码市悬赏功能结构" title="悬赏功能结构">
有了功能结构图，就可以一一对照来做原型了。<h3 id="原型图"><a href="#原型图" class="headerlink" title="原型图"></a>原型图</h3>正如前面所说：<code>梳理功能结构和画原型是产品设计中相互迭代的过程</code>，在画原型时会具体到每个元素的交互过程，一旦发现功能导图的不合理，就要及时调整思路，做到一边画原型一边更新功能结构。<br>然后得到下面的原型：<img src="https://dn-coding-net-production-pp.qbox.me/eb4feccf-3514-41ac-b4de-222db74ef1d9.png">
</li>
</ol>
<h2 id="写文章时用到的思维导图"><a href="#写文章时用到的思维导图" class="headerlink" title="写文章时用到的思维导图"></a>写文章时用到的思维导图</h2><p><a href="https://blog.coding.net/blog/coding-mindmap" target="_blank" rel="external">原文</a><br>把想到的先列出来，慢慢整理调整，梳理出写作思路。<br><img src="/images/QbMJNrM.png!web.png" alt=""><br>演变过程：<br><img src="/images/vIfAjiY.png!web.png" alt=""></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="微信推出应用号的处境："><a href="#微信推出应用号的处境：" class="headerlink" title="微信推出应用号的处境："></a>微信推出应用号的处境：</h3><p><img src="/images/QQ20160114-1.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;阅读书籍&quot;&gt;&lt;a href=&quot;#阅读书籍&quot; class=&quot;headerlink&quot; title=&quot;阅读书籍&quot;&gt;&lt;/a&gt;阅读书籍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;5种图表解决工作中的12大难题&lt;/li&gt;
&lt;li&gt;你的第一本思维导图操作书&lt;/li&gt;
&lt;li&gt;5分钟手绘彩色圆珠
    
    </summary>
    
      <category term="逻辑思维" scheme="https://huos3203.github.io/categories/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="思维导图" scheme="https://huos3203.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript把JSON数据转为对象</title>
    <link href="https://huos3203.github.io/2017/02/12/%E4%BD%BF%E7%94%A8JavaScript%E6%8A%8AJSON%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1/"/>
    <id>https://huos3203.github.io/2017/02/12/使用JavaScript把JSON数据定义对象/</id>
    <published>2017-02-12T06:41:35.000Z</published>
    <updated>2017-02-16T05:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将JSON数据序列化为代码实例"><a href="#将JSON数据序列化为代码实例" class="headerlink" title="将JSON数据序列化为代码实例"></a>将JSON数据序列化为代码实例</h2><ol>
<li>定义一个继承自 <code>JSExport</code> 子协议 <code>PersonJSExports</code></li>
<li>定义一个遵守<code>PersonJSExports</code>协议的<code>Person</code>数据模</li>
<li>使用 <code>JavaScript</code> 把<code>JSON</code>转为<code>类</code>并实例化<code>对象</code><br>都有一个完整的 <code>JVM</code> 在那儿了，谁还需要 <code>NSJSONSerialization</code>？</li>
</ol>
<h2 id="JSExport语言互通协议"><a href="#JSExport语言互通协议" class="headerlink" title="JSExport语言互通协议"></a>JSExport语言互通协议</h2><p><code>JavaScript</code>可以脱离<code>prototype继承</code>完全用<code>JSON</code>来定义对象，但是<code>Objective-C</code>编程不能脱离<code>类</code>和<code>继承</code>。所以<code>JavaScriptCore</code>就提供了<code>JSExport</code>作为两种语言的互通协议。<br><code>JSExport</code>中没有预定义任何方法，但是所有继承<code>JSExport</code>的协议中定义的方法即协议方法，都可以在<code>JSContext</code>中被调用。</p>
<h2 id="JSExportAs-宏-指定方法在JS中调用的名称"><a href="#JSExportAs-宏-指定方法在JS中调用的名称" class="headerlink" title="JSExportAs 宏: 指定方法在JS中调用的名称"></a>JSExportAs 宏: 指定方法在JS中调用的名称</h2><p>对于多参数的方法，<code>JavaScriptCore</code>的转换方式将<code>Objective-C</code>的方法每个部分都合并在一起，冒号后的字母变为大写并移除冒号。比如下边协议中的方法，在JavaScript调用就是：doFooWithBar(foo, bar);<br>```<br>@protocol MultiArgs <jsexport></jsexport></p>
<ul>
<li>(void)doFoo:(id)foo withBar:(id)bar;<br>@end<br><code>`` </code><br>如果希望方法在JavaScript中有一个比较短的名字，就需要用的JSExport.h中提供的宏：<figure class="highlight objc"><figcaption><span>JSExport.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`JSExportAs(PropertyName, Selector)`</div></pre></td></tr></table></figure>
<figure class="highlight objc"><figcaption><span>JSExportAs的官方宏定义 xcdoc://?url=developer.apple.com/library/etc/redirect/xcode/ios/1151/documentation/JavaScriptCore/Reference/JSExport_Ref/index.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define JSExportAs(PropertyName, Selector) \</span></div><div class="line"><span class="keyword">@optional</span> Selector __JS_EXPORT_AS__<span class="meta">##PropertyName:(id)argument; @required Selector</span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
如 <code>setX:Y:Z</code>方法，我们可以给他重命名，让 JS 中通过 <code>set3D(x,y,z)</code> 来调用<figure class="highlight objc"><figcaption><span>使用方法</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JSExportAs(set3D,</div><div class="line">- (<span class="keyword">void</span>)setX:(<span class="keyword">id</span>)x Y:(<span class="keyword">id</span>)y Z:(<span class="keyword">id</span>)z</div><div class="line">);</div><div class="line"><span class="comment">//调用</span></div><div class="line">set3D(x,y,z)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定义PersonJSExports协议和create协议方法（类方法）"><a href="#定义PersonJSExports协议和create协议方法（类方法）" class="headerlink" title="定义PersonJSExports协议和create协议方法（类方法）"></a>定义PersonJSExports协议和create协议方法（类方法）</h3><p><code>Person 类</code>实现了<code>PersonJSExports 协议</code>，该协议规定哪些属性可以在 <code>JavaScript</code>中可用。<br>在<code>JavaScript</code>语境中，不能像：<code>var person = new Person()</code>来初始化实例，可以在定义<code>PersonJSExports</code>协议方法时，添加一个协议方法来弥补这一点。见下例<code>create...</code>类方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Custom protocol must be declared with `@objc`</span></div><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">PersonJSExports</span> : <span class="title">JSExport</span> </span>&#123;</div><div class="line">    <span class="comment">//属性</span></div><div class="line">    <span class="keyword">var</span> firstName: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">    <span class="keyword">var</span> lastName: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">    <span class="keyword">var</span> birthYear: <span class="type">NSNumber</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">    <span class="comment">//方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getFullName</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="comment">/// 在JavaScript中调用这个类方法</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">createWithFirstName</span>(<span class="title">firstName</span>: <span class="title">String</span>, <span class="title">lastName</span>: <span class="title">String</span>) -&gt; <span class="title">Person</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line">### 定义<span class="title">Person</span>模型</div><div class="line">定义一个遵守`<span class="title">PersonJSExports</span>`协议的`<span class="title">Person</span>`数据模</div><div class="line">// <span class="title">Custom</span> <span class="title">class</span> <span class="title">must</span> <span class="title">inherit</span> <span class="title">from</span> `<span class="title">NSObject</span>`</div><div class="line">@<span class="title">objc</span> <span class="title">class</span> <span class="title">Person</span> : <span class="title">NSObject</span>, <span class="title">PersonJSExports</span> &#123;</div><div class="line">    <span class="comment">// JS协议属性必须声明为`dynamic`</span></div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> firstName: <span class="type">String</span></div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> lastName: <span class="type">String</span></div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> birthYear: <span class="type">NSNumber</span>?</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>)   </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">self</span>.firstName = firstName</div><div class="line">        <span class="keyword">self</span>.lastName = lastName</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//JS协议类方法</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">createWithFirstName</span>(<span class="title">firstName</span>: <span class="title">String</span>, <span class="title">lastName</span>: <span class="title">String</span>) -&gt; <span class="title">Person</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Person</span>(firstName: firstName, lastName: lastName)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//JS协议方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getFullName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"\(firstName) \(lastName)"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="JSContext-配置"><a href="#JSContext-配置" class="headerlink" title="JSContext 配置"></a>JSContext 配置</h3><p>之前，我们可以用我们已经创建的 Person 类，我们需要将其导出到 <code>JavaScript</code> 环境。我们也将借此导入<a href="http://mustache.github.io" target="_blank" rel="external">Mustache JS library</a>，我们将应用模板到我们的 Person 对象。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// export Person class，JS中以该`Person标示符`作为类名使用</span></div><div class="line">context.setObject(<span class="type">Person</span>.<span class="keyword">self</span>, forKeyedSubscript: <span class="string">"Person"</span>)</div><div class="line"></div><div class="line"><span class="comment">// load Mustache.js</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> mustacheJSString = <span class="type">String</span>(contentsOfFile:..., encoding:<span class="type">NSUTF8StringEncoding</span>, error:<span class="literal">nil</span>) </div><div class="line">&#123;</div><div class="line">    context.evaluateScript(mustacheJSString)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="JavaScript-数据和进程"><a href="#JavaScript-数据和进程" class="headerlink" title="JavaScript 数据和进程"></a>JavaScript 数据和进程</h3><p>下面就来看看我们简单的 JSON 例子，这段代码将创建新的 Person 实例。<br>数据：<br><figure class="highlight json"><figcaption><span>Persons.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123; <span class="attr">"first"</span>: <span class="string">"Grace"</span>,     <span class="attr">"last"</span>: <span class="string">"Hopper"</span>,   <span class="attr">"year"</span>: <span class="number">1906</span> &#125;,</div><div class="line">    &#123; <span class="attr">"first"</span>: <span class="string">"Ada"</span>,       <span class="attr">"last"</span>: <span class="string">"Lovelace"</span>, <span class="attr">"year"</span>: <span class="number">1815</span> &#125;,</div><div class="line">    &#123; <span class="attr">"first"</span>: <span class="string">"Margaret"</span>,  <span class="attr">"last"</span>: <span class="string">"Hamilton"</span>, <span class="attr">"year"</span>: <span class="number">1936</span> &#125;</div><div class="line">]</div></pre></td></tr></table></figure><br>创建新的 Person 实例：<br><figure class="highlight js"><figcaption><span>loadPeople.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> loadPeopleFromJSON = <span class="function"><span class="keyword">function</span>(<span class="params">jsonString</span>) </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(jsonString);</div><div class="line">    <span class="keyword">var</span> people = [];</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; data.length; i++) </div><div class="line">    &#123;</div><div class="line">        <span class="comment">//在swift中的js协议方法：`createWithFirstName:lastName:`</span></div><div class="line">        <span class="keyword">var</span> person = Person.createWithFirstNameLastName(data[i].first, data[i].last);</div><div class="line">        person.birthYear = data[i].year;</div><div class="line">        <span class="comment">//`push:`添加到数组中</span></div><div class="line">        people.push(person);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回该对象</span></div><div class="line">    <span class="keyword">return</span> people;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><code>JSContext</code>加载装换<code>loadPeople.js</code>脚本<br>加载js脚本之后，<code>loadPeopleFromJSON</code>即可作为下标被<code>context</code>调用该方法:<br><figure class="highlight swift"><figcaption><span>加载loadPeople.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// load loadPeople.js</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> loadPeople = <span class="type">String</span>(contentsOfFile:..., encoding:<span class="type">NSUTF8StringEncoding</span>, error:<span class="literal">nil</span>) </div><div class="line">&#123;</div><div class="line">    <span class="comment">//加载js脚本之后，`loadPeopleFromJSON`即可作为下标被context调用该方法</span></div><div class="line">    context.evaluateScript(loadPeople)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：JavaScriptCore 转换的 Objective-C / Swift 方法名是 JavaScript 兼容的。由于 JavaScript 没有参数 名称，任何外部参数名称都会被转换为驼峰形式并且附加到函数名后。在这个例子中，Objective-C 的方法 createWithFirstName:lastName: 变成了在JavaScript中的 createWithFirstNameLastName()。</p>
</blockquote>
<h3 id="使用Mustache-模板-渲染"><a href="#使用Mustache-模板-渲染" class="headerlink" title="使用Mustache 模板 渲染"></a>使用Mustache 模板 渲染</h3><p>Mustache 是一个很强大的 template 引擎，可以通过解析 json 来绑定并渲染占位符。如果你做过一些前端开发的话，会知道这是一种很常用的 HTML 绑定 Model 的做法，GRMustache.swift 是这个框架的 Swift 实现。<br><a href="http://blog.csdn.net/kevin_luan/article/details/46485561" target="_blank" rel="external">mustache模板引擎</a><br><a href="https://github.com/BjornRuud/Swiftache" target="_blank" rel="external">Mustache 的 Swift 语言实现版本</a><br>mustache的特点就是很语法很简单，主要语法如下:</p>
<pre><code>1. {{ name }} 打印变量，默认是escape过的，如果不要escape,用3个分隔符 {{{ name }}}，或者用 {{ &name }}，这个和分隔符无关
2. {{#person}}…{{/person}} 区块，4种方式
    person 是真假值，决定是否输出
    person 是list of array，会循环展开 for x in person:section.render(&apos;xxx)
    person 是匿名函数/object, 区块包裹的html 会作为参数传递进去
    person 是dict，直接打印 dict[key]
3. {{^person}}…{{/person}，反向区块
    4. {{！name }} 注释
5. {{> box }} 载入子模块
</code></pre><p>加载 <code>JSON 数据</code>，调用 <code>JSContext</code> 将数据解析成 <code>Person 对象</code>的数组，并用 <code>Mustache 模板</code>呈现每个<code>Person</code>：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 从文件`Persons.json`中加载json数据</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> peopleJSON = <span class="type">NSString</span>(contentsOfFile:..., encoding: <span class="type">NSUTF8StringEncoding</span>, error: <span class="literal">nil</span>) </div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获取js中定义的`loadPeopleFromJSON`的方法</span></div><div class="line">    <span class="keyword">let</span> load = context.objectForKeyedSubscript(<span class="string">"loadPeopleFromJSON"</span>)</div><div class="line">    <span class="comment">// 通过调用load方法将`JSON 数据`解析成`Person 对象`的数组</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> people = load.callWithArguments([peopleJSON]).toArray() <span class="keyword">as</span>? [<span class="type">Person</span>] </div><div class="line">    &#123;</div><div class="line">        <span class="comment">// get rendering function and create template</span></div><div class="line">        <span class="keyword">let</span> mustacheRender = context.objectForKeyedSubscript(<span class="string">"Mustache"</span>).objectForKeyedSubscript(<span class="string">"render"</span>)</div><div class="line">        <span class="keyword">let</span> template = <span class="string">", born "</span></div><div class="line"></div><div class="line">        <span class="comment">// loop through people and render Person object as string</span></div><div class="line">        <span class="keyword">for</span> person <span class="keyword">in</span> people </div><div class="line">        &#123;</div><div class="line">            <span class="built_in">println</span>(mustacheRender.callWithArguments([template, person]))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Output:</span></div><div class="line"><span class="comment">// Grace Hopper, born 1906</span></div><div class="line"><span class="comment">// Ada Lovelace, born 1815</span></div><div class="line"><span class="comment">// Margaret Hamilton, born 1936</span></div></pre></td></tr></table></figure><br>JavaScript 代码段可能是附带应用一起发布的基本的用户定义的插件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;将JSON数据序列化为代码实例&quot;&gt;&lt;a href=&quot;#将JSON数据序列化为代码实例&quot; class=&quot;headerlink&quot; title=&quot;将JSON数据序列化为代码实例&quot;&gt;&lt;/a&gt;将JSON数据序列化为代码实例&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;定义一个继承自 &lt;cod
    
    </summary>
    
      <category term="swift" scheme="https://huos3203.github.io/categories/swift/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="混编" scheme="https://huos3203.github.io/tags/%E6%B7%B7%E7%BC%96/"/>
    
      <category term="iOS" scheme="https://huos3203.github.io/tags/iOS/"/>
    
      <category term="macOS" scheme="https://huos3203.github.io/tags/macOS/"/>
    
      <category term="Java​Script​Core" scheme="https://huos3203.github.io/tags/Java%E2%80%8BScript%E2%80%8BCore/"/>
    
      <category term="swift" scheme="https://huos3203.github.io/tags/swift/"/>
    
      <category term="json" scheme="https://huos3203.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Java​Script​Core实现swift混编</title>
    <link href="https://huos3203.github.io/2017/02/12/Java%E2%80%8BScript%E2%80%8BCore%E5%AE%9E%E7%8E%B0swift%E6%B7%B7%E7%BC%96/"/>
    <id>https://huos3203.github.io/2017/02/12/Java​Script​Core实现swift混编/</id>
    <published>2017-02-12T05:34:06.000Z</published>
    <updated>2017-02-16T05:32:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>OS X Mavericks 和 iOS 7 引入了 <code>JavaScriptCore</code> 库，它把 <code>WebKit 的 JavaScript</code> 引擎用 <code>Objective-C</code> 封装，提供了简单，快速以及安全的方式接入世界上最流行的语言。不管你爱它还是恨它，<code>JavaScript</code> 的普遍存在使得程序员、工具以及融合到 OS X 和 iOS 里这样超快的虚拟机中资源的使用都大幅增长。</p>
<ol>
<li>如何从 <code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</li>
<li>那么反向呢？怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？</li>
</ol>
<h2 id="swift通过JSContext调用JavaScript"><a href="#swift通过JSContext调用JavaScript" class="headerlink" title="swift通过JSContext调用JavaScript"></a>swift通过JSContext调用JavaScript</h2><p>如何从<code>JavaScript 环境</code>中提取值以及如何调用其中定义的函数?</p>
<h3 id="全局实例JSContext：运行JavaScript代码的环境"><a href="#全局实例JSContext：运行JavaScript代码的环境" class="headerlink" title="全局实例JSContext：运行JavaScript代码的环境"></a>全局实例JSContext：运行JavaScript代码的环境</h3><p>全局实例<code>JSContext</code>作用就像在浏览器内运行的一个<code>JavaScript</code>脚本，<code>JSContext</code> 类似于 <code>window</code>。<br>通过<code>JSContext</code>实例运行<code>JavaScript</code>代码<code>创建变量</code>，<code>做计算</code>，<code>定义方法</code>：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> context = <span class="type">JSContext</span>()    <span class="comment">//创建全局环境</span></div><div class="line">context.evaluateScript(<span class="string">"var num = 5 + 5"</span>) <span class="comment">//计算</span></div><div class="line">context.evaluateScript(<span class="string">"var names = ['Grace', 'Ada', 'Margaret']"</span>) <span class="comment">//定义变量</span></div><div class="line">context.evaluateScript(<span class="string">"var triple = function(value) &#123; return value * 3 &#125;"</span>) <span class="comment">//定义方法</span></div><div class="line"><span class="keyword">let</span> tripleNum: <span class="type">JSValue</span> = context.evaluateScript(<span class="string">"triple(num)"</span>)  </div></pre></td></tr></table></figure></p>
<h3 id="动态类型JSValue-包裹JSContext环境下每一个可能的JS值"><a href="#动态类型JSValue-包裹JSContext环境下每一个可能的JS值" class="headerlink" title="动态类型JSValue:包裹JSContext环境下每一个可能的JS值"></a>动态类型JSValue:包裹JSContext环境下每一个可能的JS值</h3><p><code>JavaScript</code> 是动态语言，所以动态类型<code>JSValue</code>包裹JSContext环境中任何可能的JS值，字符串和数字；数组、对象和方法；甚至错误和特殊的 JavaScript 值诸如 <code>null</code> 和 <code>undefined</code>。<br>获取<code>tripleNum</code>值：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">println</span>(<span class="string">"Tripled: \(tripleNum.toInt32())"</span>)</div></pre></td></tr></table></figure><br><code>JSValue</code> 包括一系列方法用于访问其可能的值以保证有正确的 <code>Foundation 基本类型</code><br>包括：<br><img src="/images/JSValueType.png"></p>
<h3 id="下标取值：访问JSContext环境下的任何值"><a href="#下标取值：访问JSContext环境下的任何值" class="headerlink" title="下标取值：访问JSContext环境下的任何值"></a>下标取值：访问JSContext环境下的任何值</h3><p><code>JSContext</code> 和 <code>JSValue</code> 实例可以使用下标的方式访问之前创建的 <code>context</code> 的任何值。</p>
<ul>
<li><code>JSContext</code>：需要一个字符串下标</li>
<li><code>JSValue</code>：允许使用<code>字符串</code>或<code>整数</code>标来得到里面的对象和数组</li>
</ul>
<h4 id="JSContext下标取值"><a href="#JSContext下标取值" class="headerlink" title="JSContext下标取值"></a>JSContext下标取值</h4><ol>
<li><code>swift</code>语法<figure class="highlight swift"><figcaption><span>未映射成[]的原始方法</span><a href="http://nshipster.cn/object-subscripting/" target="_blank" rel="external">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> names = context.objectForKeyedSubscript(<span class="string">"names"</span>)  <span class="comment">//JSContext字符串下标原始方法</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="JSValue整数下标原始方法"><a href="#JSValue整数下标原始方法" class="headerlink" title="JSValue整数下标原始方法"></a>JSValue整数下标原始方法</h4><figure class="highlight swift"><figcaption><span>未映射成[]的原始方法</span><a href="http://nshipster.cn/object-subscripting/" target="_blank" rel="external">objectAtKeyedSubscript()和objectAtIndexedSubscript()</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> initialName = names.objectAtIndexedSubscript(<span class="number">0</span>)   <span class="comment">//JSValue整数下标原始方法</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"The first name: \(initialName.toString())"</span>)  <span class="comment">//JSValue method</span></div><div class="line"><span class="comment">// The first name: Grace</span></div></pre></td></tr></table></figure>
<blockquote>
<p>在这里，Objective-C 代码可以利用下标表示法，如下例：context[@”names”]，names[0]，[initialName toString]，Swift 目前只公开<a href="http://nshipster.cn/object-subscripting/" target="_blank" rel="external">原始方法</a>:<code>objectAtKeyedSubscript()</code> 和 <code>objectAtIndexedSubscript()</code>来让下标成为可能。</p>
</blockquote>
<h3 id="callWithArguments调用JS方法：只需传入Foundation基本类型参数"><a href="#callWithArguments调用JS方法：只需传入Foundation基本类型参数" class="headerlink" title="callWithArguments调用JS方法：只需传入Foundation基本类型参数"></a>callWithArguments调用JS方法：只需传入Foundation基本类型参数</h3><p>上述<code>JavaScript</code>代码中，<code>JSValue</code>包装了一个<code>triple函数</code>，在<code>Objective-C / Swift</code> 代码中可以使用 <code>Foundation基本类型</code>作为参数来直接调用该函数。再次，<code>JavaScriptCore</code> 很轻松的处理了这个桥接：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line"><span class="keyword">let</span> tripleFunction = context.objectForKeyedSubscript(<span class="string">"triple"</span>) <span class="comment">//下标取值</span></div><div class="line"><span class="keyword">let</span> result = tripleFunction.callWithArguments([<span class="number">5</span>]) <span class="comment">//传入基本类型参数直接调用</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"Five tripled: \(result.toInt32())"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="exceptionHandler错误处理"><a href="#exceptionHandler错误处理" class="headerlink" title="exceptionHandler错误处理"></a><code>exceptionHandler</code>错误处理</h3><p><code>exceptionHandler</code> 是一个接收<code>JSContext 引用</code>和<code>异常本身</code>的回调处理的闭包。<br>通过设置上下文的 <code>exceptionHandler</code> 属性，可以观察和记录<code>语法</code>，<code>类型</code>以及<code>运行时错误</code>:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">context.exceptionHandler = &#123; context, exception <span class="keyword">in</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"JS Error: \(exception)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">context.evaluateScript(<span class="string">"function multiply(value1, value2) &#123; return value1 * value2 "</span>)</div><div class="line"><span class="comment">// JS Error: SyntaxError: Unexpected end of script</span></div></pre></td></tr></table></figure><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"JS Error: %@"</span>, exception);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">[context evaluateScript:<span class="string">@"function multiply(value1, value2) &#123; return value1 * value2 "</span>];</div><div class="line"><span class="comment">// JS Error: SyntaxError: Unexpected end of script</span></div></pre></td></tr></table></figure></p>
<h2 id="JavaScript-通过JSContext调用-swift／OC"><a href="#JavaScript-通过JSContext调用-swift／OC" class="headerlink" title="JavaScript 通过JSContext调用 swift／OC"></a>JavaScript 通过JSContext调用 swift／OC</h2><p>怎样从 <code>JavaScript</code> 访问我们在 <code>Objective-C</code>或 <code>Swift</code> 定义的对象和方法？<br>让 <code>JSContext</code> 访问我们的本地客户端代码的方式主要有两种：</p>
<ol>
<li><code>block块</code>键值对：把OC中的<code>block块</code>赋值给<code>JSContext</code>的一个标示键，该标识键的<code>JSValue</code>可以通过<code>callWithArguments</code>调用.</li>
<li><code>JSExport 协议</code>。</li>
</ol>
<h3 id="block块-键值对-该block键的JSValue通过callWithArguments调用"><a href="#block块-键值对-该block键的JSValue通过callWithArguments调用" class="headerlink" title="block块 键值对:该block键的JSValue通过callWithArguments调用"></a>block块 键值对:该block键的<code>JSValue</code>通过<code>callWithArguments</code>调用</h3><p>当一个 <code>Objective-C block</code> 被赋给 <code>JSContext</code> 里的一个标识符，<code>JavaScriptCore</code> 会自动的把 <code>block</code> 封装在 <code>JavaScript 函数</code>里，并以该标示符作为函数名来调用该block的实现。这使得在 <code>JavaScript</code> 中可以简单的使用 <code>Foundation</code> 和 <code>Cocoa</code>类，所有的桥接都为你做好了。<br><a href="http://nshipster.cn/cfstringtransform/" target="_blank" rel="external">CFStringTransform</a>处理语言的强大威力</p>
<p>在 <code>JSContext</code> 中使用 <code>Swift 闭包</code>需要注意两点:</p>
<ol>
<li>与 <code>@objc_block</code> 属性一起声明</li>
<li>使用Swift中的<code>unsafeBitCast()</code>函数，把对象转换为<code>AnyObject</code></li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> simplifyString: <span class="meta">@objc</span>_block <span class="type">String</span> -&gt; <span class="type">String</span> = &#123; input <span class="keyword">in</span></div><div class="line">    <span class="keyword">var</span> mutableString = <span class="type">NSMutableString</span>(string: input) <span class="keyword">as</span> <span class="type">CFMutableStringRef</span></div><div class="line">    <span class="type">CFStringTransform</span>(mutableString, <span class="literal">nil</span>, kCFStringTransformToLatin, <span class="type">Boolean</span>(<span class="number">0</span>))</div><div class="line">    <span class="type">CFStringTransform</span>(mutableString, <span class="literal">nil</span>, kCFStringTransformStripCombiningMarks, <span class="type">Boolean</span>(<span class="number">0</span>))</div><div class="line">    <span class="keyword">return</span> mutableString</div><div class="line">&#125;</div><div class="line">context.setObject(<span class="built_in">unsafeBitCast</span>(simplifyString, <span class="type">AnyObject</span>.<span class="keyword">self</span>), forKeyedSubscript: <span class="string">"simplifyString"</span>)</div><div class="line"><span class="comment">//通过simplifyString标示符来调用block的实现</span></div><div class="line"><span class="built_in">println</span>(context.evaluateScript(<span class="string">"simplifyString('안녕하새요!')"</span>))</div><div class="line"><span class="comment">// annyeonghasaeyo!</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给标示符赋值一个oc-block，该标示符会被自动装换为JavaScript函数</span></div><div class="line">context[<span class="string">@"simplifyString"</span>] = ^(<span class="built_in">NSString</span> *input) &#123;</div><div class="line"><span class="built_in">NSMutableString</span> *mutableString = [input mutableCopy];</div><div class="line"><span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)mutableString, <span class="literal">NULL</span>, kCFStringTransformToLatin, <span class="literal">NO</span>);</div><div class="line"><span class="built_in">CFStringTransform</span>((__bridge <span class="built_in">CFMutableStringRef</span>)mutableString, <span class="literal">NULL</span>, kCFStringTransformStripCombiningMarks, <span class="literal">NO</span>);</div><div class="line"><span class="keyword">return</span> mutableString;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//通过simplifyString标示符来调用block的实现</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [context evaluateScript:<span class="string">@"simplifyString('안녕하새요!')"</span>]);</div></pre></td></tr></table></figure>
<h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p>由于 <code>block</code> 可以保有变量引用，而且 <code>JSContext</code> 也强引用它所有的变量，为了避免强引用循环需要特别小心。<br>避免保有<code>JSContext</code> 或<code>一个 block</code> 里的任何 <code>JSValue</code>。相反，使用 <code>[JSContext currentContext]</code> 得到当前上下文，并把你需要的任何值用参数传递。</p>
<h3 id="JSExport-协议"><a href="#JSExport-协议" class="headerlink" title="JSExport 协议"></a>JSExport 协议</h3><p>在继承<code>JSExport 协议</code>的子协议里声明的属性，实例方法还是类方法，都会自动暴漏给<code>JavaScript</code>代码来调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OS X Mavericks 和 iOS 7 引入了 &lt;code&gt;JavaScriptCore&lt;/code&gt; 库，它把 &lt;code&gt;WebKit 的 JavaScript&lt;/code&gt; 引擎用 &lt;code&gt;Objective-C&lt;/code&gt; 封装，提供了简单，快速以及安全
    
    </summary>
    
      <category term="swift" scheme="https://huos3203.github.io/categories/swift/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="混编" scheme="https://huos3203.github.io/tags/%E6%B7%B7%E7%BC%96/"/>
    
      <category term="iOS" scheme="https://huos3203.github.io/tags/iOS/"/>
    
      <category term="macOS" scheme="https://huos3203.github.io/tags/macOS/"/>
    
      <category term="Java​Script​Core" scheme="https://huos3203.github.io/tags/Java%E2%80%8BScript%E2%80%8BCore/"/>
    
      <category term="swift" scheme="https://huos3203.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>用Git将代码恢复到一个历史的版本</title>
    <link href="https://huos3203.github.io/2017/02/10/%E7%94%A8Git%E5%B0%86%E4%BB%A3%E7%A0%81%E6%81%A2%E5%A4%8D%E5%88%B0%E4%B8%80%E4%B8%AA%E5%8E%86%E5%8F%B2%E7%9A%84%E7%89%88%E6%9C%AC/"/>
    <id>https://huos3203.github.io/2017/02/10/用Git将代码恢复到一个历史的版本/</id>
    <published>2017-02-10T10:19:48.000Z</published>
    <updated>2017-02-10T10:29:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>经历：将代码全提交到默认的head分支中，切换分支后，无法找到分支的严重后果：<br>目的：在当前分支上，将代码恢复到一个历史的提交版本上。</p>
<h2 id="暴力的方式"><a href="#暴力的方式" class="headerlink" title="暴力的方式"></a>暴力的方式</h2><p>如果仓库是自己在用（不影响别人），那么可以使用<code>git reset --hard &lt;target_commit_id&gt;</code> 来恢复到指定的提交，再用 git push -f 来强制更新远程的分支指针。为了保证万一需要找回历史提交，我们可以先打一个 tag 来备份。</p>
<ol>
<li>第一步：查看本地的索引的提交日志：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git reflog 		</div><div class="line">a1d09fd HEAD@&#123;0&#125;: checkout: moving from all to master</div><div class="line">a1d09fd HEAD@&#123;1&#125;: checkout: moving from master to all</div><div class="line">a1d09fd HEAD@&#123;2&#125;: checkout: moving from HEAD to master</div><div class="line">a1d09fd HEAD@&#123;3&#125;: checkout: moving from all to HEAD</div></pre></td></tr></table></figure></li>
<li>第二步：根据上面的sh2值，回滚：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset  —hard  a1d09fd</div></pre></td></tr></table></figure>
这样就可以找回代码.</li>
</ol>
<h2 id="温柔的方式"><a href="#温柔的方式" class="headerlink" title="温柔的方式"></a>温柔的方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#回滚</div><div class="line">git reset  —hard  a1d09fd</div><div class="line">#将当前代码切换回最新的提交</div><div class="line">git reset --soft origin/source</div></pre></td></tr></table></figure>
<p>此时工作区变成了历史的提交内容，这个时候用 <code>git add</code> 和 <code>git commit</code> 即可.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经历：将代码全提交到默认的head分支中，切换分支后，无法找到分支的严重后果：&lt;br&gt;目的：在当前分支上，将代码恢复到一个历史的提交版本上。&lt;/p&gt;
&lt;h2 id=&quot;暴力的方式&quot;&gt;&lt;a href=&quot;#暴力的方式&quot; class=&quot;headerlink&quot; title=&quot;暴力的方
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://huos3203.github.io/tags/git/"/>
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>bilibiliForMac版之mpv依赖编译</title>
    <link href="https://huos3203.github.io/2017/02/10/bilibili%E4%B9%8BMac%E7%89%88ffmpeg%E4%BE%9D%E8%B5%96%E7%BC%96%E8%AF%91/"/>
    <id>https://huos3203.github.io/2017/02/10/bilibili之Mac版ffmpeg依赖编译/</id>
    <published>2017-02-10T02:45:03.000Z</published>
    <updated>2017-02-10T07:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bilibili-Mac-Client"><a href="#Bilibili-Mac-Client" class="headerlink" title="Bilibili Mac Client"></a><a href="https://github.com/typcn/bilibili-mac-client" target="_blank" rel="external">Bilibili Mac Client</a></h2><p>一款基于mpv和ffmpeg底层库实现的播放器.</p>
<h2 id="项目依赖库"><a href="#项目依赖库" class="headerlink" title="项目依赖库"></a>项目依赖库</h2><p>编译在项目中所需的相关依赖库</p>
<h3 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a>下载资源</h3><ol>
<li><p>下载mpv-build</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/mpv-player/mpv-build.git</div></pre></td></tr></table></figure>
</li>
<li><p>执行下载<code>ffmpeg</code>, <code>libass</code> 和<code>mpv资源</code>，同时完成编译的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> mpv-build/ </div><div class="line">./rebuild -j4  </div></pre></td></tr></table></figure>
</li>
<li><p>使用参数 “–enable-shared ” 可以开启 ffmpeg 的动态版本:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ffmpeg/</div><div class="line">./configure --enable-shared    </div></pre></td></tr></table></figure>
</li>
<li><p>安装ffmpeg</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在ffmpeg目录下执行：</div><div class="line">make </div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="开始编译mpv动态依赖库："><a href="#开始编译mpv动态依赖库：" class="headerlink" title="开始编译mpv动态依赖库："></a>开始编译mpv动态依赖库：</h3><ol>
<li>开启libmpv动态库的支持：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ../mpv/</div><div class="line">./waf configure --enable-libmpv-shared  --disable-libass</div><div class="line">./waf build</div></pre></td></tr></table></figure>
<blockquote>
<p>变更去除static参数：./waf configure –enable-static-build –enable-libmpv-shared  –disable-libass</p>
</blockquote>
</li>
</ol>
<h2 id="集成到项目中"><a href="#集成到项目中" class="headerlink" title="集成到项目中"></a>集成到项目中</h2><h3 id="指定libmpv-dylib相对路径"><a href="#指定libmpv-dylib相对路径" class="headerlink" title="指定libmpv.dylib相对路径"></a>指定libmpv.dylib相对路径</h3><p>直接编译出来的库会是绝对路径，需要先通过install_name_tool 修改 相对路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd build/</div><div class="line">install_name_tool -id &quot;@executable_path/lib/libmpv.dylib&quot; libmpv.dylib</div></pre></td></tr></table></figure></p>
<h3 id="聚合ffmpeg相关依赖包"><a href="#聚合ffmpeg相关依赖包" class="headerlink" title="聚合ffmpeg相关依赖包"></a>聚合ffmpeg相关依赖包</h3><p>执行 mpv<code>tools/dylib-unhell</code> ，目标是 <code>libmpv.dylib</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TOOLS/dylib-unhell.py libmpv.dylib</div></pre></td></tr></table></figure><br>这样会多出一个 <code>lib文件夹</code>，里面会出现变为相对路径的文件，复制导入到项目即可。</p>
<h2 id="相对路径脚本学习"><a href="#相对路径脚本学习" class="headerlink" title="相对路径脚本学习"></a>相对路径脚本学习</h2><p>使用otool -L 和install_name_tool完成了一系列操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">install_name_tool -change</div><div class="line">install_name_tool -id </div></pre></td></tr></table></figure><br><img src="https://cloud.githubusercontent.com/assets/4022953/16513398/fba07b2a-3f96-11e6-8358-b93275ed0a09.png" alt="编译后的资源目录位置"></p>
<h3 id="扩展一："><a href="#扩展一：" class="headerlink" title="扩展一："></a>扩展一：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!bin/sh</div><div class="line">mkdir &quot;$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/dylib&quot;</div><div class="line">cp -f /your/path/to/xcode_project_name/dylib/*.dylib &quot;$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/dylib/&quot;</div><div class="line"></div><div class="line">echo &quot;--------$(pwd)----------------&quot;</div><div class="line">cur_dir=&quot;$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/MacOS/lib&quot;</div><div class="line">cd $&#123;cur_dir&#125;</div><div class="line">echo &quot;--进入$(pwd)--&quot;</div><div class="line"></div><div class="line">for dirlist in $(ls $&#123;cur_dir&#125;)</div><div class="line">    #查看它们的 rpath</div><div class="line">    otool -L $&#123;dirlist&#125;</div><div class="line">    #制作相对路径</div><div class="line">    #方法一</div><div class="line">    install_name_tool -change /usr/local/lib/$&#123;dirlist&#125; @executable_path/lib/$&#123;dirlist&#125; &quot;$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/MacOS/$PRODUCT_NAME&quot;</div><div class="line">    #方法二</div><div class="line">    install_name_tool -id &quot;@executable_path/lib/$&#123;dirlist&#125;&quot; $&#123;dirlist&#125;</div><div class="line">do</div><div class="line"></div><div class="line">done</div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="扩展二"><a href="#扩展二" class="headerlink" title="扩展二"></a>扩展二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">echo &quot;--------$(pwd)----------------&quot;</div><div class="line">cur_dir=&quot;$TARGET_BUILD_DIR/$PRODUCT_NAME.app/Contents/MacOS/lib&quot;</div><div class="line">cd $&#123;cur_dir&#125;</div><div class="line">echo &quot;--进入$(pwd)--&quot;</div><div class="line">lib=&quot;libmediainfo.0.dylib&quot;</div><div class="line">#-f 参数判断 $file 是否存在</div><div class="line">if [ -f &quot;$lib&quot; ]; then</div><div class="line">    otool -L $&#123;lib&#125;</div><div class="line">    install_name_tool -id &quot;@executable_path/lib/$&#123;lib&#125;&quot; $&#123;lib&#125;</div><div class="line">    otool -L $&#123;lib&#125;</div><div class="line">fi</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Bilibili-Mac-Client&quot;&gt;&lt;a href=&quot;#Bilibili-Mac-Client&quot; class=&quot;headerlink&quot; title=&quot;Bilibili Mac Client&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/t
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
      <category term="编译" scheme="https://huos3203.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="ffmpeg" scheme="https://huos3203.github.io/tags/ffmpeg/"/>
    
      <category term="mpv" scheme="https://huos3203.github.io/tags/mpv/"/>
    
      <category term="shell" scheme="https://huos3203.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>OSX 应用插件</title>
    <link href="https://huos3203.github.io/2017/02/07/OSX%E5%BA%94%E7%94%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>https://huos3203.github.io/2017/02/07/OSX应用插件开发/</id>
    <published>2017-02-07T04:38:58.000Z</published>
    <updated>2017-02-07T05:47:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在以前的 OS X 系统中，给你的 App 在运行时动态载入可执行代码比较困难。现在可以通过<code>NSBundle</code>和 <code>plug-ins</code>插件,可以很方便的向原有APP中添加新功能点。</p>
<p>目的：在一个修改过的 TextEdit 里面加入加载 bundle 的功能</p>
<h2 id="包-Bundles-和接口-Interfaces"><a href="#包-Bundles-和接口-Interfaces" class="headerlink" title="包 (Bundles) 和接口 (Interfaces)"></a>包 (Bundles) 和接口 (Interfaces)</h2><p>如果你打开 Xcode8 创建一个新项目，会看见 OS X 所有可以编写APP插件的模版，例如： <code>Screen Savers</code> 到 <code>Image Units</code>等。<br>在<code>Framework &amp; Library</code>中的 <code>Bundle</code> 条目。我会在今天探索一个非常简单的的项目，那就是在一个修改过的 TextEdit 里面加入加载 bundle 的功能。<br><img src="/images/xcode8.png" class="项目模版"><br><code>bundle 模版</code>项目与APP项目比较：</p>
<ol>
<li>一个 <code>Contents</code> 目录，里面包含了 <code>Info.plist</code> 和 <code>Resource</code> 目录。</li>
<li>如果你在你的项目下加入了新的类，你可以看见包含一个可执行文件的 <code>MacOS</code> 目录。</li>
<li><code>Bundle</code> 工程里缺少的一个东西是 <code>main()</code> 函数。它是被宿主<code>App</code> 调用执行的。</li>
</ol>
<h2 id="为-TextEdit-加入-Plugin-支持"><a href="#为-TextEdit-加入-Plugin-支持" class="headerlink" title="为 TextEdit 加入 Plugin 支持"></a>为 TextEdit 加入 Plugin 支持</h2><p>两种插件的方式:<br>    第一个:用最少的工作来为你的 app 加入插件支持，希望让你知道实现这个有多简单。<br>    第二个:技术有点复杂，它展现来一个为你的 app 加入插件的合理的方式，这可以使你不会在未来陷入到被锁死在某一种实现的窘境中。<br>本文章的项目文件仍然会放在 <a href="https://github.com/objcio/issue-14-plugins" target="_blank" rel="external">GitHub</a> 供大家参考。</p>
<h3 id="在-TextEdit-中扫描-Bundle"><a href="#在-TextEdit-中扫描-Bundle" class="headerlink" title="在 TextEdit 中扫描 Bundle"></a>在 TextEdit 中扫描 Bundle</h3><p>请打开 “01 TextEdit” 目录下面的 <code>TextEdit.xcodeproj</code> 工程，同时浏览它里面包含的代码。<br><code>TextEdit</code> 里面有三个简单的组成部分：扫描 <code>bundle</code>，加载 <code>bundle</code>，调用 <code>bundle 的 UI</code><br><code>loadPlugins</code> 方法：<br>打开 <code>Controller.m</code>，你可以看见 <code>-(void)loadPlugins</code> 方法 (它在 <code>applicationDidFinishLaunching:</code> 中被调用)。</p>
<ol>
<li>扩展插件菜单：在界面菜单右侧加入了一个新的 <code>NSMenuItem</code>，为调用插件提供一个入口（通常你会在 <code>MainMenu.xib</code> 做这件事情并且链接 <code>outlets</code>，但是我们这次偷下懒）。</li>
<li>扫描插件目录：获得插件目录（在 <code>~/Library/Application Support/Text Edit/Plug-Ins/</code> ）下，并且扫描这个目录。<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *pluginsFolder = [<span class="keyword">self</span> pluginsFolder];</div><div class="line"><span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line"><span class="built_in">NSError</span> *outErr;</div><div class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> *item <span class="keyword">in</span> [fm contentsOfDirectoryAtPath:pluginsFolder error:&amp;outErr]) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (![item hasSuffix:<span class="string">@".bundle"</span>])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSString</span> *bundlePath = [pluginsFolder stringByAppendingPathComponent:item];</div><div class="line">    <span class="built_in">NSBundle</span> *b = [<span class="built_in">NSBundle</span> bundleWithPath:bundlePath];</div><div class="line">    <span class="keyword">if</span> (!b) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Could not make a bundle from %@"</span>, bundlePath);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取实现插件代理协议方法的类</span></div><div class="line">    <span class="keyword">id</span> &lt;TextEditPlugin&gt; plugin = [[b principalClass] new];</div><div class="line">    <span class="built_in">NSMenuItem</span> *item = [pluginsMenu addItemWithTitle:[plugin menuItemTitle] action:<span class="keyword">@selector</span>(pluginMenuItemCalledAction:) keyEquivalent:<span class="string">@""</span>];</div><div class="line">    [item setRepresentedObject:plugin];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：扫描插件目录，确保得到的是一个 <code>.bundle</code> 文件，然后用 <code>NSBundle</code> 载入你找到的 <code>bundle</code> 并且实例化里面的类。</p>
</blockquote>
</li>
</ol>
<h3 id="插件代理"><a href="#插件代理" class="headerlink" title="插件代理"></a>插件代理</h3><p>你会注意到一个 <code>TextEditPlugin</code> 的 <code>protocol</code> 的引用。在 <code>TextEditMisc.h</code> 能找它的定义:<br><figure class="highlight objc"><figcaption><span>声明代理协议</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">TextEditPlugin</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line">- (<span class="built_in">NSString</span>*)menuItemTitle;</div><div class="line">- (<span class="keyword">void</span>)actionCalledWithTextView:(<span class="built_in">NSTextView</span>*)textView inDocument:(<span class="keyword">id</span>)document;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><br>这说明你实例化的类需要响应这两个方法。你可以验证这个类是否响应这两个方法。</p>
<h3 id="NSPrincipalClass键-值–实现插件代理协议方法的类名称"><a href="#NSPrincipalClass键-值–实现插件代理协议方法的类名称" class="headerlink" title="NSPrincipalClass键:值–实现插件代理协议方法的类名称"></a>NSPrincipalClass键:值–实现插件代理协议方法的类名称</h3><p>在 <code>bundle</code> 里面调用的 <code>principalClass</code> 方法是什么呢？<br>当你创建一个 <code>Bundle</code> 的时候，你可以在里面创建一个或者多个类，同时你需要让 <code>TextEdit</code> 知道哪一个类需要被实例化。为了帮助宿主 App 调用，你可以在 <code>Info.plist</code> 文件加入一个 <code>NSPrincipalClass</code> 的键，同时设置它的值为实现插件方法的类的名字。你可以用 <code>[NSBundle principalClass]</code> 方便地从 <code>NSPrincipalClass</code> 的值里面寻找并创建这个类。</p>
<h3 id="添加扩展插件菜单的响应事件"><a href="#添加扩展插件菜单的响应事件" class="headerlink" title="添加扩展插件菜单的响应事件"></a>添加扩展插件菜单的响应事件</h3><p>在 <code>Plug-Ins</code> 菜单加入一个新的按钮，设置 <code>action</code> 为 <code>pluginMenuItemCalledAction:</code>，并且设置它表示你已经实例化的对象。</p>
<blockquote>
<p>如果在 <code>menu item</code> 里面没有设置一个<code>target</code>，即目标是<code>nil</code>，那么它会寻找响应链，来寻找第一个实现 <code>pluginMenuItemCalledAction:</code> 方法的对象。如果它找不到，那么这个菜单选项将会不能用。<br>举一个例子，实现 <code>pluginMenuItemCalledAction</code> 的最好的地方是在 <code>Document</code> 的 <code>window controller</code> 类中。打开 <code>DocumentWindowController.m</code>，然后定位到<code>pluginMenuItemCalledAction</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)pluginMenuItemCalledAction:(<span class="keyword">id</span>)sender </div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> &lt;TextEditPlugin&gt;plugin = [sender representedObject];</div><div class="line">    [plugin actionCalledWithTextView:[<span class="keyword">self</span> firstTextView] inDocument:[<span class="keyword">self</span> document]];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>代码本身很清晰，搜集插件实例，调用 <code>actionCalledWithTextView:inDocument:</code> 方法（被定义在 <code>protocol</code> 里面的），运行你插件里面的代码。</p>
<h2 id="制作插件"><a href="#制作插件" class="headerlink" title="制作插件"></a>制作插件</h2><ol>
<li>新建模版项目<br>打开 “01 MarkYellow” 工程看一下。这是一个 Xcode (通过<code>OS X ▸ Framework &amp; Library ▸ Bundle template</code> 建立) 的标准工程，里面只添加了一个类：<code>TEMarkYellow</code>。</li>
<li>设置NSPrincipalClass键值<br>如果你打开<code>MarkYellow-Info.plist</code>，你可以看到 <code>NSPrincipalClass</code> 的值设置成了上面提到的 <code>TEMarkYellow</code>。</li>
<li>实现协议代理<br>接着，打开 <code>TEMarkYellow.m</code>，你将会看见定义在协议里面的方法。<ul>
<li>第一个方法（<code>menuItemTitle</code>）返回插件的名字，最为入口名显示在 <code>menu</code> 里面。</li>
<li>第二个方法 (<code>actionCalledWithTextView:inDocument:</code>)，把所有选中的文字变成黄色的背景。<figure class="highlight objc"><figcaption><span>改变字体颜色</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)actionCalledWithTextView:(<span class="built_in">NSTextView</span>*)textView inDocument:(<span class="keyword">id</span>)document </div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([textView selectedRange].length) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSMutableAttributedString</span> *ats = [[[textView textStorage] attributedSubstringFromRange:[textView selectedRange]] mutableCopy];</div><div class="line">        [ats addAttribute:<span class="built_in">NSBackgroundColorAttributeName</span> value:[<span class="built_in">NSColor</span> yellowColor] range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [ats length])];</div><div class="line">        <span class="comment">//  先测试text view是否能改变文字内容，这样可以自动做正确的撤销操作。</span></div><div class="line">        By asking the text view <span class="keyword">if</span> you can change the text first, it will automatically <span class="keyword">do</span> the right thing to enable undoing of attribute changes</div><div class="line">        <span class="keyword">if</span> ([textView shouldChangeTextInRange:[textView selectedRange] replacementString:[ats string]])</div><div class="line">        &#123;</div><div class="line">            [[textView textStorage] replaceCharactersInRange:[textView selectedRange] withAttributedString:ats];</div><div class="line">            [textView didChangeText];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="集成插件"><a href="#集成插件" class="headerlink" title="集成插件"></a>集成插件</h2><p>运行 <code>TextEdit</code> （它会创建<code>Plug-Ins</code>目录），然后构建 <code>MarkYellow</code> 工程。把 <code>MarkYellow.bundle</code> 丢到你的 <code>~/Library/Application Support/Text Edit/Plug-Ins/</code> 目录下面，重启你的 <code>TextEdit</code> 应用。<br>一切看起来都很好，扫描，加载，插入一个菜单，然后，当你使用菜单项的时候，传递到参数到插件里面。试一试，点击 <code>Plug-Ins ▸ Mark Selected Text Yellow</code>，选择的文字的背景颜色就变成黄色的了。</p>
<h2 id="XCode8版本问题"><a href="#XCode8版本问题" class="headerlink" title="XCode8版本问题"></a>XCode8版本问题</h2><p>Xcode8 不再支持<code>Application Plug-in</code>插件<br><img src="/images/xcode6.jpg" class="xcode6" title="100% 300 项目创建模版"><br><a href="http://www.jianshu.com/p/39443429f71d" target="_blank" rel="external">XCode8.2.1继续使用xcode插件</a><br>这个是因为苹果解决xcode ghost，把插件屏蔽了。<br>解决方法<br><code>sudo /usr/libexec/xpccachectl</code><br>然后必须重启电脑后生效.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在以前的 OS X 系统中，给你的 App 在运行时动态载入可执行代码比较困难。现在可以通过&lt;code&gt;NSBundle&lt;/code&gt;和 &lt;code&gt;plug-ins&lt;/code&gt;插件,可以很方便的向原有APP中添加新功能点。&lt;/p&gt;
&lt;p&gt;目的：在一个修改过的 TextE
    
    </summary>
    
      <category term="macOS" scheme="https://huos3203.github.io/categories/macOS/"/>
    
    
      <category term="macOS" scheme="https://huos3203.github.io/tags/macOS/"/>
    
      <category term="插件" scheme="https://huos3203.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="objc" scheme="https://huos3203.github.io/tags/objc/"/>
    
  </entry>
  
  <entry>
    <title>Hexo标签插件</title>
    <link href="https://huos3203.github.io/2017/01/23/Hexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/"/>
    <id>https://huos3203.github.io/2017/01/23/Hexo标签插件/</id>
    <published>2017-01-23T07:17:33.000Z</published>
    <updated>2017-02-14T01:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>
<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><hr>
<p>在文章中插入引言，可包含作者、来源和标题。</p>
<h3 id="别号：-quote"><a href="#别号：-quote" class="headerlink" title="别号： quote"></a>别号： quote</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class="line">content</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><hr>
<h5 id="无参普通blockquote"><a href="#无参普通blockquote" class="headerlink" title="无参普通blockquote"></a>无参普通blockquote</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote %&#125;</div><div class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<a id="more"></a>
<h5 id="引用书上的句子"><a href="#引用书上的句子" class="headerlink" title="引用书上的句子"></a>引用书上的句子</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</div><div class="line">Do not just seek happiness <span class="keyword">for</span> yourself. Seek happiness <span class="keyword">for</span> all. Through kindness. Through mercy.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>boyer huo </strong><cite>Wide Awake</cite></footer></blockquote>
<h5 id="引用-Twitter"><a href="#引用-Twitter" class="headerlink" title="引用 Twitter"></a>引用 Twitter</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote @DevDocs https:<span class="comment">//twitter.com/devdocs/status/356095192085962752 %&#125;</span></div><div class="line">NEW: DevDocs now comes <span class="keyword">with</span> syntax highlighting. http:<span class="comment">//devdocs.io</span></div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="external">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<h5 id="引用网络上的文章"><a href="#引用网络上的文章" class="headerlink" title="引用网络上的文章"></a>引用网络上的文章</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote Seth Godin http:<span class="comment">//sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span></div><div class="line">Every interaction is both precious and an opportunity to delight.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><hr>
<p>在文章中插入代码。</p>
<h3 id="别名-code"><a href="#别名-code" class="headerlink" title="别名:code"></a>别名:code</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><hr>
<h5 id="普通的代码块"><a href="#普通的代码块" class="headerlink" title="普通的代码块"></a>普通的代码块</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock %&#125;</div><div class="line">alert(<span class="string">'Hello World!'</span>);</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure>
<h5 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock lang:objc %&#125;</div><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div></pre></td></tr></table></figure>
<h5 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock <span class="built_in">Array</span>.map %&#125;</div><div class="line">array.map(callback[, thisArg])</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Array.map</div><div class="line">array.map(callback[, thisArg])</div></pre></td></tr></table></figure>
<h5 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a>附加说明和网址</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock _.compact http:<span class="comment">//underscorejs.org/#compact Underscore.js %&#125;</span></div><div class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);</div><div class="line">=&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="external">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.compactUnderscore.js</div><div class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class="line">=&gt; [1, 2, 3]</div></pre></td></tr></table></figure>
<h2 id="反引号代码块-MD语法"><a href="#反引号代码块-MD语法" class="headerlink" title="反引号代码块 (MD语法)"></a>反引号代码块 (MD语法)</h2><hr>
<h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="行内代码块"><a href="#行内代码块" class="headerlink" title="行内代码块"></a>行内代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">行内 <span class="code">`code 块 `</span></div></pre></td></tr></table></figure>
<h4 id="缩进代码块"><a href="#缩进代码块" class="headerlink" title="缩进代码块"></a>缩进代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Some comments</div><div class="line">line 1 of code</div><div class="line">line 2 of code</div><div class="line">line 3 of code</div></pre></td></tr></table></figure>
<h4 id="多行代码块"><a href="#多行代码块" class="headerlink" title="多行代码块"></a>多行代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="code">``` [language] [title] [url] [link text] </span></div><div class="line"></div><div class="line">    代码块</div><div class="line"></div><div class="line"> `` `</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><hr>
<h3 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="默认左对齐"><a href="#默认左对齐" class="headerlink" title="默认左对齐"></a>默认左对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|-------|-------|----------|</div><div class="line">|文本内容 |文本内容| 文本内容  |</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>layout</td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td>comments</td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td>tags</td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>categories</td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网址</td>
</tr>
</tbody>
</table>
<h4 id="向右对齐"><a href="#向右对齐" class="headerlink" title="向右对齐"></a>向右对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|-------:|-------:|-------:|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:right">三种布局</th>
<th style="text-align:right">路径:(储存到路径文件夹)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">post</td>
<td style="text-align:right">source/_posts</td>
</tr>
<tr>
<td style="text-align:right">page</td>
<td style="text-align:right">source</td>
</tr>
<tr>
<td style="text-align:right">draft</td>
<td style="text-align:right">source/_drafts</td>
</tr>
</tbody>
</table>
<h4 id="向左对齐"><a href="#向左对齐" class="headerlink" title="向左对齐"></a>向左对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|:------|:------|:------|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">日期变量</th>
<th style="text-align:left">描述:（可以通过日期来管理文章）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:title</td>
<td style="text-align:left">标题（小写，空格将会被替换为短杠）</td>
</tr>
<tr>
<td style="text-align:left">:year</td>
<td style="text-align:left">建立的年份，比如， 2015</td>
</tr>
<tr>
<td style="text-align:left">:month</td>
<td style="text-align:left">建立的月份（有前导零），比如， 04</td>
</tr>
<tr>
<td style="text-align:left">:i_month</td>
<td style="text-align:left">建立的月份（无前导零），比如， 4</td>
</tr>
<tr>
<td style="text-align:left">:day</td>
<td style="text-align:left">建立的日期（有前导零），比如， 07</td>
</tr>
<tr>
<td style="text-align:left">:i_day</td>
<td style="text-align:left">建立的日期（无前导零），比如， 7</td>
</tr>
</tbody>
</table>
<h4 id="居中对齐"><a href="#居中对齐" class="headerlink" title="居中对齐"></a>居中对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|:------:|:------:|:------:|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout</td>
<td style="text-align:center">布局当:false不加任何布局样式</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">文件建立日期</td>
</tr>
</tbody>
</table>
<h2 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h2><hr>
<p>在文章中插入 Pull quote。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% pullquote [class] %&#125;</div><div class="line">content</div><div class="line">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><hr>
<p><a href="https://jsfiddle.net" target="_blank" rel="external">官网</a><br>在文章中嵌入 <code>jsFiddle</code> 在线的shell编辑器,可以供我们在线测试html、js、和css代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><hr>
<p>在文章中嵌入 Gist<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% gist gist_id [filename] %&#125;</div></pre></td></tr></table></figure></p>
<p><code>filename</code>: 可选，当不指定文件名时，嵌入显示<code>gist_id</code>下所有文件。</p>
<p>一个gist可能存在多个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://gist.github.com/dergachev/4627207#file-gif-screencast-osx-md</div></pre></td></tr></table></figure></p>
<p><code>4627207</code>：表示gist_id ，<code>#file-</code>后边内容：表示Gist中某个文件名</p>
<p>如下:指定文章中嵌入<code>ecba275d5e4404678354</code>中的<code>NSAttributeString相关方法.m</code>内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% gist ecba275d5e4404678354 NSAttributeString相关方法.m %&#125;</div></pre></td></tr></table></figure></p>
<img src="/images/gistflag.jpg" class="gist需要翻墙">
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><hr>
<p>在文章中插入 iframe。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe url [width] [height] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><hr>
<h3 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="Hexo语法"><a href="#Hexo语法" class="headerlink" title="Hexo语法"></a>Hexo语法</h4><hr>
<p>在文章中插入指定大小的图片。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="MD语法"><a href="#MD语法" class="headerlink" title="MD语法"></a>MD语法</h4><hr>
<h5 id="原图-toolTip"><a href="#原图-toolTip" class="headerlink" title="原图+toolTip"></a>原图+toolTip</h5><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![boyer logo](http://boyers.coding.me/img/logo.png &quot;这是我的logo图片&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://boyers.coding.me/img/logo.png" alt="boyer logo" title="这是我的logo图片"></p>
<h5 id="注脚语法"><a href="#注脚语法" class="headerlink" title="注脚语法"></a>注脚语法</h5><hr>
<p>可以在稍後的文件中再定义图片地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![boyer logo][logo]</div><div class="line">[logo]: http://boyers.coding.me/img/logo.png  &quot;这是我的logo图片&quot;</div></pre></td></tr></table></figure></p>
<p><img src="http://boyers.coding.me/img/logo.png" alt="boyer logo" title="这是我的logo图片"></p>
<h5 id="指定图片大小"><a href="#指定图片大小" class="headerlink" title="指定图片大小"></a>指定图片大小</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![boyer logo](http://boyers.coding.me/img/logo.png [200] [200] &quot;这是我的logo图片&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://boyers.coding.me/img/logo.png [200] [200]" alt="boyer logo" title="这是我的logo图片"></p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><hr>
<h3 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="Hexo语法-1"><a href="#Hexo语法-1" class="headerlink" title="Hexo语法"></a>Hexo语法</h4><hr>
<p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% link text url [external] [title] %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="MD语法-1"><a href="#MD语法-1" class="headerlink" title="MD语法"></a>MD语法</h4><hr>
<h5 id="智能识别超链接"><a href="#智能识别超链接" class="headerlink" title="智能识别超链接"></a>智能识别超链接</h5><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://boyers.coding.me</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" target="_blank" rel="external">http://boyers.coding.me</a></p>
<h5 id="文本式"><a href="#文本式" class="headerlink" title="文本式"></a>文本式</h5><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">boyer Blog</span>](<span class="link">http://boyers.coding.me</span>)</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" target="_blank" rel="external">boyer Blog</a></p>
<h5 id="toolTip式"><a href="#toolTip式" class="headerlink" title="toolTip式"></a>toolTip式</h5><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">boyer Blog</span>](<span class="link">http://boyers.coding.me "这是我的博客首页"</span>)</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" title="这是我的博客首页" target="_blank" rel="external">boyer Blog</a></p>
<h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><hr>
<p>插入 source 文件夹内的代码文件(.m/json/xml等)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><hr>
<p>在文章中插入 Youtube 视频。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% youtube video_id %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><hr>
<p>在文章中插入 Vimeo 视频。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% vimeo video_id %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><hr>
<p>根据服务器根目录分为两种方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% post_path slug %&#125;</div><div class="line">&#123;% post_link slug [title] %&#125;</div></pre></td></tr></table></figure></p>
<p>以<code>Docker使用</code>博客为例</p>
<ol>
<li><p>相对路径</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% post_path Docker使用 %&#125;</div></pre></td></tr></table></figure>
<p> 相对于服务器根目录的位置：</p>
 /2016/12/21/Docker使用/</li>
<li><p>绝对路径</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% post_link Docker使用 Docker使用 %&#125;</div></pre></td></tr></table></figure>
<p> 本博中其他文章的超链接：</p>
 <a href="/2016/12/21/Docker使用/" title="Docker使用">Docker使用</a>
</li>
</ol>
<h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><hr>
<p>引用文章的资源。<br>Assets指的是那些不在source目录下的资源，比如图片、CSS文件或者Javascript文件。Hexo提供一种更方便的方法来管理这些资源（Assets）。想使其生效，首先修改 post_asset_folder 字段的设置，将其值改为 true 。<br>当生效后，在你创建文章的时候，Hexo会创建一个同名目录，你可以将该文章关联的资源全部放到该目录下。这样就可以更加方便的使用它们了。<br>使用方法就是上面介绍过的标签插件。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_path slug %&#125;</div><div class="line">&#123;% asset_img slug [title] %&#125;</div><div class="line">&#123;% asset_link slug [title] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><hr>
<p>一些内容不想被主题渲染，可以使用该插件呈现原始状态。<br>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">content</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。&lt;/p&gt;
&lt;h2 id=&quot;引用块&quot;&gt;&lt;a href=&quot;#引用块&quot; class=&quot;headerlink&quot; title=&quot;引用块&quot;&gt;&lt;/a&gt;引用块&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在文章中插入引言，可包含作者、来源和标题。&lt;/p&gt;
&lt;h3 id=&quot;别号：-quote&quot;&gt;&lt;a href=&quot;#别号：-quote&quot; class=&quot;headerlink&quot; title=&quot;别号： quote&quot;&gt;&lt;/a&gt;别号： quote&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% blockquote [author[, source]] [link] [source_link_title] %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblockquote %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;样例&quot;&gt;&lt;a href=&quot;#样例&quot; class=&quot;headerlink&quot; title=&quot;样例&quot;&gt;&lt;/a&gt;样例&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id=&quot;无参普通blockquote&quot;&gt;&lt;a href=&quot;#无参普通blockquote&quot; class=&quot;headerlink&quot; title=&quot;无参普通blockquote&quot;&gt;&lt;/a&gt;无参普通blockquote&lt;/h5&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% blockquote %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblockquote %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Kindle之Resilio Sync索引</title>
    <link href="https://huos3203.github.io/2017/01/23/Kindle%E4%B9%8BResilioSync%E7%B4%A2%E5%BC%95/"/>
    <id>https://huos3203.github.io/2017/01/23/Kindle之ResilioSync索引/</id>
    <published>2017-01-23T04:49:49.000Z</published>
    <updated>2017-02-13T09:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kindlefere.com/share" target="_blank" rel="external">Kindle伴原文</a><br>Resilio Sync同步密钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOC3NIGPF2DOKETOF2FAHXJXE2HF24QWC</div></pre></td></tr></table></figure><br><a href="https://kindlefere.github.io/share/ebook/" target="_blank" rel="external">索引原文</a><br>目录索引 - Kindle伴侣精品书库（更新：01月23日10:30）</p>
<iframe src="https://kindlefere.github.io/share/ebook/" width="500" height="2000" frameborder="0" allowfullscreen></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://kindlefere.com/share&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kindle伴原文&lt;/a&gt;&lt;br&gt;Resilio Sync同步密钥&lt;br&gt;&lt;figure class=&quot;highlight plain
    
    </summary>
    
      <category term="资源" scheme="https://huos3203.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="资源" scheme="https://huos3203.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="kindle" scheme="https://huos3203.github.io/tags/kindle/"/>
    
      <category term="书籍" scheme="https://huos3203.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="ResilioSync" scheme="https://huos3203.github.io/tags/ResilioSync/"/>
    
  </entry>
  
  <entry>
    <title>Kindle114 资源集[转]</title>
    <link href="https://huos3203.github.io/2017/01/23/Kindle%E8%B5%84%E6%BA%90/"/>
    <id>https://huos3203.github.io/2017/01/23/Kindle资源/</id>
    <published>2017-01-23T04:49:49.000Z</published>
    <updated>2017-01-23T09:34:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><ul>
<li><a href="http://www.hi-pda.com/forum/viewthread.php?tid=1815180" target="_blank" rel="external">hi-pda dtgc</a></li>
<li><a href="http://kindle115.com" target="_blank" rel="external">Kindle115</a></li>
</ul>
<h2 id="综合类"><a href="#综合类" class="headerlink" title="综合类"></a>综合类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=2050031688#category/type=0" target="_blank" rel="external">青风乘翼 最近出版的译著</a> 更新中</li>
<li><a href="http://pan.baidu.com/s/1qWRYl1i" target="_blank" rel="external">周旋久 按字母排列的书籍</a> 提取码：djhp</li>
</ol>
<ul>
<li><a href="http://f92a01.l45.yunpan.cn/lk/cxvBQv5ymqCMY" target="_blank" rel="external">F、H、J、R字母</a> 提取码 39bd  </li>
<li><a href="http://f93be8.l45.yunpan.cn/lk/cxvB6neaCmfGL" target="_blank" rel="external">S、T、Y字母</a> 提取码 42b1</li>
</ul>
<ol>
<li><a href="http://pan.baidu.com/share/home?uk=1848670581&amp;view=share#category/type=0" target="_blank" rel="external">烫伤关东煮</a> 约1t以上 20160302更新</li>
<li><a href="http://pan.baidu.com/share/home?uk=2724752809#category/type=0" target="_blank" rel="external">18810815415 精排版书籍</a> （可能是豆瓣读书编辑）</li>
<li><a href="http://pan.baidu.com/share/link?uk=1194297961&amp;shareid=256546" target="_blank" rel="external">liantingv70657</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=3728907970&amp;view=share#category/type=0" target="_blank" rel="external">炜博happy</a> 更新中</li>
<li><a href="http://pan.baidu.com/share/home?uk=1365179281&amp;view=share#category/type=0" target="_blank" rel="external">guyuemuziye6@gmail.com 旅游原版书</a> （微博号逼影共享，解压密码bygx）</li>
<li><a href="http://pan.baidu.com/share/link?uk=4029256032&amp;shareid=139939577" target="_blank" rel="external">枫729882492</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=439872812&amp;view=share#category/type=0" target="_blank" rel="external">电子书资源外链发布站</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=1293124599#category/type=0" target="_blank" rel="external">赤霓</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=4278581020#category/type=0" target="_blank" rel="external">nnuuij11111</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1282872761&amp;view=share#category/type=0" target="_blank" rel="external">风扒皮1503</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=4211477728&amp;view=share#category/type=0" target="_blank" rel="external">zphstar</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1261210236#category/type=0" target="_blank" rel="external">skmjtptwr</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1093619523&amp;view=share#category/type=0" target="_blank" rel="external">327995970ou</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1057298937&amp;view=share#category/type=0" target="_blank" rel="external">xunys</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=1946547680#category/type=0" target="_blank" rel="external">ohhe</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=490155926#category/type=0" target="_blank" rel="external">没我找不到的电子书</a> （此人吹牛居多，书籍不全）</li>
<li><a href="http://yun.baidu.com/share/home?uk=1426398717&amp;view=share#category/type=0" target="_blank" rel="external">搜珍玉鏡</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=959117889&amp;view=share#category/type=0" target="_blank" rel="external">菜是菜菜</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=775816440&amp;view=share#category/type=0" target="_blank" rel="external">13805758171</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=842217715&amp;view=share#category/type=0" target="_blank" rel="external">yun360419811</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=1512823434&amp;view=share#category/type=0" target="_blank" rel="external">虚昧斋</a> 分享新书 可私信求书</li>
<li><a href="http://pan.baidu.com/share/home?uk=3324179911#category/type=0" target="_blank" rel="external">唯我君行 中医、VB</a></li>
<li><a href="https://pan.baidu.com/share/home?uk=2603616653" target="_blank" rel="external">haoyou43 mobi epub 格式书籍 350+</a> 更新中</li>
<li><a href="http://pan.baidu.com/share/home?uk=2063855134#category/type=0" target="_blank" rel="external">liguobing55 txt合集</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=4097060373&amp;view=share#category/type=0" target="_blank" rel="external">青辰VOW  部分全站打包等</a></li>
<li>苏菇莨百度盘书（BTSync） 约56G 至20160222关闭前 感谢：maldiniymx</li>
</ol>
<ul>
<li>B3EWLQK7C6O6RK3CU5CG3PZUYDUJLMYCP</li>
<li>B25G263OSC7ZAXPLCZESSL3DFJOHK6UQ3</li>
</ul>
<ol>
<li><a href="https://mega.nz/#F!nJ8GFJAQ!K5Nw2HF1cMXMGNbYQ7RggQ" target="_blank" rel="external">wizardforcel 杂项书籍</a></li>
<li><a href="http://pan.baidu.com/s/1lKIiq" target="_blank" rel="external">豆瓣图书top250</a></li>
<li><a href="http://pan.baidu.com/share/link?uk=1459936824&amp;shareid=3702424259" target="_blank" rel="external">当当epub7000本</a></li>
<li><a href="http://pan.baidu.com/share/link?shareid=1080906058&amp;uk=1412470983" target="_blank" rel="external">卡夫卡全集和哈佛管理</a></li>
<li><a href="http://pan.baidu.com/s/1sjLkZ97" target="_blank" rel="external">知乎话题、专栏、收藏</a></li>
<li><a href="http://pan.baidu.com/s/1kT85Zp1" target="_blank" rel="external">知日系列</a></li>
<li><a href="http://pan.baidu.com/s/1eQAereE" target="_blank" rel="external">知乎盐系列</a></li>
<li><a href="http://pan.baidu.com/s/1pJDjOJx" target="_blank" rel="external">图说天下系列</a></li>
<li><a href="http://pan.baidu.com/share/link?uk=754986678&amp;shareid=237392098" target="_blank" rel="external">kindle人资源打包</a> 精品区11G+自购区31G+自制区10G+66G</li>
<li><a href="https://onedrive.live.com/?id=F5B0090663FEEADA%21828&amp;cid=F5B0090663FEEADA" target="_blank" rel="external">programthink</a></li>
</ol>
<h2 id="文学历史类、社科类"><a href="#文学历史类、社科类" class="headerlink" title="文学历史类、社科类"></a>文学历史类、社科类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=1259438467&amp;view=share#category/type=0" target="_blank" rel="external">零度小然 稀有现代书历史籍</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=2704770694&amp;view=share#category/type=0" target="_blank" rel="external">youngharrylg 中华人民共和国前三十年历史</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1460307841&amp;view=share#category/type=0" target="_blank" rel="external">南阳高卧 近现代大家</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=3946745677&amp;view=share#category/type=0" target="_blank" rel="external">doppel88 各国文学</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=152128425&amp;view=share#category/type=0" target="_blank" rel="external">坊書流元 语言学</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=1728233671&amp;view=share#category/type=0" target="_blank" rel="external">高贵的容克领主 历史</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=3943501741&amp;view=share#category/type=0" target="_blank" rel="external">dfdean 文学 名家文集</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=2905885322#category/type=0" target="_blank" rel="external">rainthounder 文史高清pdg版图书</a></li>
<li><a href="http://pan.baidu.com/s/1eQqW062" target="_blank" rel="external">翟子昂 中国古文字学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=2987157500&amp;view=share#category/type=0" target="_blank" rel="external">longhuarenn 历史</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=4111094503#category/type=0" target="_blank" rel="external">Lyra1900</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=805574156&amp;third=0#category/type=0" target="_blank" rel="external">iilikes</a></li>
</ol>
<h2 id="古籍类"><a href="#古籍类" class="headerlink" title="古籍类"></a>古籍类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=2670973685&amp;view=share" target="_blank" rel="external">Ac_heron 古典文学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=4029740943&amp;view=share" target="_blank" rel="external">dadssfree 大批量文史书籍</a> (约1.3t)</li>
<li><a href="http://pan.baidu.com/share/home?uk=1896826771&amp;view=share#category/type=0" target="_blank" rel="external">qq312145694 古文史资料</a> （大约1t以上）</li>
<li><a href="http://pan.baidu.com/share/home?uk=272017959&amp;view=share#category/type=0" target="_blank" rel="external">洋风汉魂 日本文史资料原版</a> （大约1t以上）</li>
<li><a href="http://yun.baidu.com/share/home?uk=2533729796#category/type=0" target="_blank" rel="external">久舞而凄 精选精美古籍</a> （大约500G以上,更新中）</li>
<li><a href="http://yun.baidu.com/share/home?uk=3405888410&amp;view=share#category/type=0" target="_blank" rel="external">逍遥449824194 古籍</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=2118390434&amp;view=share#category/type=0" target="_blank" rel="external">事无所成只因懒 古籍</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=4211484048&amp;view=share#category/type=0" target="_blank" rel="external">钱建文 古籍</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=4066113708#category/type=0" target="_blank" rel="external">风家纪录片3</a></li>
<li><a href="http://pan.baidu.com/s/1os4MQ" target="_blank" rel="external">子乌书简全站打包 20130507</a> 密码：qjq8</li>
</ol>
<h2 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h2><ol>
<li><a href="https://mega.nz/#F!jVsinZIT!1Oiz9bkHwNBABc7NU5sSAg" target="_blank" rel="external">wizardforcel 小说</a></li>
<li><a href="http://pan.baidu.com/s/1sjNSRtr" target="_blank" rel="external">莫迪亚诺作品集</a></li>
<li><a href="http://pan.baidu.com/s/1i3uzhbB" target="_blank" rel="external">王小波全集</a></li>
<li><a href="http://pan.baidu.com/s/1qW0q3Kg" target="_blank" rel="external">阿加莎·克里斯蒂作品集</a></li>
<li><a href="http://pan.baidu.com/s/1sjqLbzB" target="_blank" rel="external">周浩晖作品集</a></li>
</ol>
<h2 id="医学类、心理学类"><a href="#医学类、心理学类" class="headerlink" title="医学类、心理学类"></a>医学类、心理学类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=3711822837&amp;view=share" target="_blank" rel="external">于柏清二 中医</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=3527489425&amp;view=share#category/type=0" target="_blank" rel="external">bdywuxinghua 中医丛书</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=2818809037&amp;view=share" target="_blank" rel="external">yyzsm99 心理学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1225533335&amp;view=share#category/type=0" target="_blank" rel="external">异硫氰酸烯丙酯 医学</a></li>
<li><a href="http://pan.baidu.com/s/1pJju6dd#path=%252F%25E4%25BC%259F%25E5%25BA%25B7" target="_blank" rel="external">一蹀盐 呼吸医学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1630489195&amp;view=share#category/type=0" target="_blank" rel="external">cnchenlian 康复医学</a></li>
<li><a href="http://pan.baidu.com/s/1gdFHavh#path=%252F%25E4%25B9%25A6" target="_blank" rel="external">Zita 解剖学 图谱</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=3221391314#category/type=0" target="_blank" rel="external">LV终结者 制药技术</a> （物化资料夹里）</li>
<li><a href="http://yun.baidu.com/share/home?uk=405421905&amp;view=share#category/type=0" target="_blank" rel="external">136603yin 性科学为特色 偏综合</a></li>
<li><a href="http://pan.baidu.com/s/17mp8P" target="_blank" rel="external">心理学交际学电子书合集13本</a></li>
<li><a href="http://vdisk.weibo.com/u/1778220897" target="_blank" rel="external">hhhzihao 心理学</a></li>
</ol>
<h2 id="佛学类"><a href="#佛学类" class="headerlink" title="佛学类"></a>佛学类</h2><ol>
<li><a href="http://yun.baidu.com/share/home?uk=289392363&amp;third=1&amp;view=share#category/type=0" target="_blank" rel="external">CBETA_TW 中華電子佛典協會分享佛教书籍</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=1913113259&amp;view=share#category/type=0" target="_blank" rel="external">dufojing 佛教书籍</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=925845574&amp;view=share#category/type=0" target="_blank" rel="external">senmy08 佛教书籍</a></li>
</ol>
<h2 id="数理学科类"><a href="#数理学科类" class="headerlink" title="数理学科类"></a>数理学科类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=1244439600&amp;;view=share" target="_blank" rel="external">小兆一凡 数学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=3409070258&amp;view=share#category/type=0" target="_blank" rel="external">我就叫混沌</a></li>
<li><a href="http://pan.baidu.com/share/link?uk=1766755481&amp;shareid=2684679400" target="_blank" rel="external">华章数学译丛 百度云</a></li>
<li><a href="http://vdisk.weibo.com/s/B-1mTXGOXIRvY?category_id=0&amp;parents_ref=B-1mTXGOXIRaF" target="_blank" rel="external">华章数学译丛 微盘</a></li>
<li><a href="http://pan.baidu.com/share/link?uk=3191333230&amp;shareid=870418565" target="_blank" rel="external">图灵数学·统计学丛书 百度云</a></li>
<li><a href="http://vdisk.weibo.com/s/B-1mTXGOXIQZJ?category_id=0&amp;parents_ref=B-1mTXGOXIRaF" target="_blank" rel="external">图灵数学·统计学丛书 微盘</a></li>
</ol>
<h2 id="生物学类（动物、植物、野外生存等）"><a href="#生物学类（动物、植物、野外生存等）" class="headerlink" title="生物学类（动物、植物、野外生存等）"></a>生物学类（动物、植物、野外生存等）</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=2855048701&amp;view=share#category/type=0" target="_blank" rel="external">ChentaoTony1 昆虫学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=3959509661&amp;view=share#category/type=0" target="_blank" rel="external">jkdpgh 野外生存 动物志</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=2734991257&amp;third=0#category/type=0" target="_blank" rel="external">麦子 生物学 动物学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=3020331843&amp;view=share#category/type=0" target="_blank" rel="external">xiayang405 精神病学、细胞生物学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=86518920&amp;view=share#category/type=0" target="_blank" rel="external">li__cheng__ 中国植物志、各地区植物志</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=420129823#category/type=0" target="_blank" rel="external">山刺玫 植物学</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=523517449&amp;view=share#category/type=0" target="_blank" rel="external">绿色营上海小组 植物学</a></li>
</ol>
<h2 id="计算机技术类"><a href="#计算机技术类" class="headerlink" title="计算机技术类"></a>计算机技术类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=3339153721&amp;view=share" target="_blank" rel="external">lxghost IT</a> （xiaoshuwu.net）</li>
<li><a href="http://pan.baidu.com/share/home?uk=1074173238&amp;view=share#category/type=0" target="_blank" rel="external">wintelsui IT</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=3809969834&amp;view=share#category/type=0" target="_blank" rel="external">明月无风</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1832385835#category/type=0" target="_blank" rel="external">耍大刀xyz PS书籍</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1176304088#category/type=0" target="_blank" rel="external">hcbbt IT</a></li>
<li><a href="http://pan.baidu.com/share/link?shareid=2981703177&amp;uk=2214641459" target="_blank" rel="external">salttiger IT</a></li>
<li><a href="https://mega.nz/#F!qQUwUTKR!okYrzPOauVIaFj4GNSRZfA" target="_blank" rel="external">wizardforcel IT</a></li>
</ol>
<h2 id="非IT工业技术类"><a href="#非IT工业技术类" class="headerlink" title="非IT工业技术类"></a>非IT工业技术类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=2437672157#category/type=0" target="_blank" rel="external">南航飞动研学群 航空航天</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=2702990868&amp;view=share#category/type=0" target="_blank" rel="external">星河舰队司令 武器</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=35826880&amp;view=share#category/type=0" target="_blank" rel="external">wxjoldgoat 武器</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=2349638677#category/type=0" target="_blank" rel="external">cfhcjg 军事资料</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=1611109307#category/type=0" target="_blank" rel="external">以逸待劳hk 航天资料</a></li>
</ol>
<h2 id="语言学习类"><a href="#语言学习类" class="headerlink" title="语言学习类"></a>语言学习类</h2><ol>
<li><a href="https://pan.baidu.com/share/home?uk=3394258028&amp;view=share#category/type=0" target="_blank" rel="external">学派英语团队 英语学习</a></li>
<li><a href="http://pan.baidu.com/s/1sjugDQ1" target="_blank" rel="external">英语学习资料</a></li>
</ol>
<h2 id="经管"><a href="#经管" class="headerlink" title="经管"></a>经管</h2><ol>
<li><a href="http://vdisk.weibo.com/u/5340187825" target="_blank" rel="external">商业类电子书</a></li>
</ol>
<h2 id="艺术类-（摄影、音乐、绘画等）"><a href="#艺术类-（摄影、音乐、绘画等）" class="headerlink" title="艺术类 （摄影、音乐、绘画等）"></a>艺术类 （摄影、音乐、绘画等）</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=2755480552&amp;view=share#category/type=0" target="_blank" rel="external">吸血鬼123牛仔 音乐</a></li>
<li><a href="http://pan.baidu.com/share/home?uk=674298946#category/type=0" target="_blank" rel="external">xslp2004 摄影</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=2738239597&amp;view=share#category/type=0" target="_blank" rel="external">yu鈥唋ei 中国绘画</a> 新浪微博@于双子鱼 分享私密文件</li>
</ol>
<h2 id="杂志类"><a href="#杂志类" class="headerlink" title="杂志类"></a>杂志类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=2332146839&amp;view=share" target="_blank" rel="external">qingge16 杂志</a> （含部分最新书）</li>
<li><a href="http://yun.baidu.com/share/home?uk=2737417622#category/type=0" target="_blank" rel="external">yanxishe 杂志</a></li>
<li><a href="http://yun.baidu.com/share/home?uk=3156696063&amp;;view=share#category/type=0" target="_blank" rel="external">liuafenliu 台湾地区优质财经杂志（天下雜誌/遠見雜誌/商業周刊/經理人月刊）</a> 更新中</li>
<li><a href="http://yun.baidu.com/share/home?uk=3859261705&amp;;view=share#category/type=0" target="_blank" rel="external">foodservice 台湾地区优质财经杂志（天下雜誌/遠見雜誌/商業周刊/經理人月刊）</a> 似乎是台湾地区人 更新到201410</li>
</ol>
<h2 id="原版书类"><a href="#原版书类" class="headerlink" title="原版书类"></a>原版书类</h2><ol>
<li><a href="http://pan.baidu.com/share/home?uk=1563658231&amp;view=share" target="_blank" rel="external">好想一次过 原版外文书</a></li>
<li><a href="http://pan.baidu.com/s/1i39TawH" target="_blank" rel="external">12879本Kindle英文原版电子书</a></li>
<li><a href="http://pan.baidu.com/s/1gdELWgN" target="_blank" rel="external">经典、畅销英文原著100本</a></li>
</ol>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol>
<li><a href="http://bestcbooks.com/" target="_blank" rel="external">计算机书籍控</a></li>
<li><a href="http://www.jb51.net/books/" target="_blank" rel="external">脚本之家电子书</a></li>
<li><a href="http://www.xiaoshuwu.net/" target="_blank" rel="external">小书屋</a></li>
<li><a href="http://www.ckook.com/" target="_blank" rel="external">稀酷客</a></li>
<li><a href="http://readcolor.com/books?tag=%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="external">读远</a></li>
<li><a href="http://www.salttiger.com/" target="_blank" rel="external">SaltTiger</a></li>
<li><a href="http://it-ebooks.cn/" target="_blank" rel="external">it-ebooks.cn</a></li>
<li><a href="http://it-ebooks.info/" target="_blank" rel="external">it-ebooks.info</a></li>
<li><a href="http://it-ebooks.org/" target="_blank" rel="external">it-ebooks.org</a></li>
<li><a href="http://it-ebooks.com/" target="_blank" rel="external">it-ebooks.com</a></li>
<li><a href="http://ebooks-it.net/" target="_blank" rel="external">ebooks-it.net</a></li>
<li><a href="http://wowebook.org/" target="_blank" rel="external">wowebook.org</a></li>
<li><a href="http://bookdl.com/" target="_blank" rel="external">bookdl.com</a></li>
<li><a href="http://bookzz.org/" target="_blank" rel="external">bookzz.org</a></li>
<li><a href="http://www.allitebooks.com/" target="_blank" rel="external">allitebooks.com</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;鸣谢&quot;&gt;&lt;a href=&quot;#鸣谢&quot; class=&quot;headerlink&quot; title=&quot;鸣谢&quot;&gt;&lt;/a&gt;鸣谢&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hi-pda.com/forum/viewthread.php?tid=1815180&quot;
    
    </summary>
    
      <category term="资源" scheme="https://huos3203.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="资源" scheme="https://huos3203.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="kindle" scheme="https://huos3203.github.io/tags/kindle/"/>
    
      <category term="书籍" scheme="https://huos3203.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试题大集合[转]</title>
    <link href="https://huos3203.github.io/2017/01/22/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E9%9B%86%E5%90%88/"/>
    <id>https://huos3203.github.io/2017/01/22/iOS面试题大集合/</id>
    <published>2017-01-22T10:55:21.000Z</published>
    <updated>2017-01-22T10:55:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 align="center">iOS有用的面试题大集合</h1>

<h2 id="面试题从何处得来"><a href="#面试题从何处得来" class="headerlink" title="面试题从何处得来"></a>面试题从何处得来</h2><ul>
<li><a href="http://blog.sunnyxx.com/2015/07/04/ios-interview/" target="_blank" rel="external">招聘一个靠谱的 iOS</a></li>
<li><a href="http://www.zhihu.com/question/19604641" target="_blank" rel="external">知乎－如何面试 iOS 工程师？</a></li>
</ul>
<h2 id="阅读面试题之前"><a href="#阅读面试题之前" class="headerlink" title="阅读面试题之前"></a>阅读面试题之前</h2><p>在正式开始之前，我期望你能对iOS/Mac OS X平台开发有所了解，在iOS开发中已经很少需要自己写复杂的算法了，一般情况下很少会在面试中出现算法的考核，如果你了解一些基础的算法，还是有帮助的。</p>
<p>Now！！请使用ARC</p>
<h3 id="什么是iOS开发"><a href="#什么是iOS开发" class="headerlink" title="什么是iOS开发"></a>什么是iOS开发</h3><p>iOS是iPhone iPad等手持设备的操作系统，所谓的iOS开发就是开发运行在iOS系统上的应用或者游戏，比如支付宝，微信，微博等，当然这也包括了iPad版的应用，iOS开发可以归纳到<strong>移动开发</strong>领域。</p>
<p><strong>有时候面试官是那种’脑残粉’，了解一下Apple的发展历史，可能比较聊的开。</strong></p>
<p><a href="http://digi.tech.qq.com/a/20150127/021898.htm" target="_blank" rel="external">苹果Mac计算机31年发展历程回顾</a></p>
<p><a href="http://baike.baidu.com/link?url=68F4Bl4llkNvdFJ1Md0fkZDDudN-NS46JeZoLrgPeqEbZmm8oBKG92Ocyd983yNQU6FVuDTFZOnjjPjfUHnuoePdfh6zJJ973pXFKYcbIKp5bCnQy_WvUVNJ6P84s8HE1xAlRaGdLVuoCb2p_8uaMa" target="_blank" rel="external">苹果公司</a></p>
<p><a href="http://www.zhihu.com/topic/19551762" target="_blank" rel="external">苹果公司在知乎上的话题</a></p>
<p><a href="http://www.amazon.cn/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%E4%BC%A0-%E6%B2%83%E5%B0%94%E7%89%B9%C2%B7%E8%89%BE%E8%90%A8%E5%85%8B%E6%A3%AE/dp/B00IM4IFL2/ref=sr_1_1?ie=UTF8&amp;qid=1436592631&amp;sr=8-1&amp;keywords=%E4%B9%94%E5%B8%83%E6%96%AF" target="_blank" rel="external">乔布斯个人传记</a></p>
<h3 id="拼写正确的重要性"><a href="#拼写正确的重要性" class="headerlink" title="拼写正确的重要性"></a>拼写正确的重要性</h3><p>有些面试官可能更注重细节，所以，拼写的单词一定要对，比如iOS，Xcode，iPhone，Objective-C，JSON等，良好的拼写习惯，会让面试官觉得你细心靠谱。</p>
<h3 id="Swift和Objective-C的比较"><a href="#Swift和Objective-C的比较" class="headerlink" title="Swift和Objective-C的比较"></a>Swift和Objective-C的比较</h3><p>仁者见仁智者见智，从个人的使用角度上来看，Swift在某些情况上比Objective-C更加的严谨了，入门非常简单，但是想开发应用，还是需要学习cocoa框架，这玩意路子还是Objective-C的，所以有基础可能更好的理解Swift在iOS/Mac OS X 中的开发和应用。</p>
<p><a href="http://www.zhihu.com/question/24002984" target="_blank" rel="external">知乎原文</a></p>
<h3 id="了解Watch-OS"><a href="#了解Watch-OS" class="headerlink" title="了解Watch OS"></a>了解Watch OS</h3><p><code>Watch OS</code>是苹果公司推出的应用在手表上的一个操作系统，<code>Watch OS 1.0</code>需要跟iPhone相结合才能工作。</p>
<p><a href="https://stratechery.com/2014/apple-watch-asking-saying/" target="_blank" rel="external">Apple Watch</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;mid=208847424&amp;idx=1&amp;sn=fac57c5da8136b07fe9cdf53d1ec9f4c#rd" target="_blank" rel="external">Watch OS 2.0 开发概述</a></p>
<hr>
<h2 id="iOS面试"><a href="#iOS面试" class="headerlink" title="iOS面试"></a>iOS面试</h2><h5>property 后面可以有哪些修饰符</h5>

<ol>
<li><p>读写修饰符 <code>readwrite</code> | <code>readonly</code></p>
<p> <code>readwrite</code> Xcode会帮助我们创建<code>setter</code>，<code>getter</code>方法，<code>readonly</code> Xcode只会帮助我们创建<code>getter</code>方法，不会创建<code>setter</code>方法。</p>
</li>
<li><p><code>setter</code>相关的修饰符 <code>assign</code> | <code>retain</code> | <code>copy</code></p>
<p> 2.1 <code>setter</code>相关的修饰符表明了<code>setter</code>方法该如何实现，<code>assign</code>用于基本数据类型<code>NSInteger</code>，<code>CGFloat</code>，C数据类型<code>int</code>，<code>float</code>，<code>id</code>类型等，这个符号不会涉及内存管理，但是如果是对象类使用了它，可能会导致内存泄漏或者<code>EXC_BAD_ACCESS</code>错误。</p>
<p> 2.2 <code>retain</code>用于对象类的内存管理，如果基本数据类型使用它，<code>Xcode</code>会直接报错。当对象类使用此修饰符时，<code>setter</code>方法的实现是先<code>release</code>一次，然后再对新的对象做一次<code>retain</code>操作。</p>
<p> 2.3 <code>copy</code>主要用于<code>NSString</code>，用于内容复制。</p>
</li>
<li><p>原子性修饰符 <code>atomic</code> | <code>nonatomic</code></p>
<p> <code>atomic</code> 表示线程安全</p>
<p> <code>nonatomic</code> 表示非线程安全，使用此修饰符会提高性能</p>
</li>
<li><p><code>getter</code>，<code>setter</code>修饰符</p>
<p> 这两个修饰符用于设置生成的getter，setter的方法名</p>
</li>
<li><p><code>strong</code>，<code>weak</code>修饰符（ARC）<br>在ARC中内存管理都只需要使用这两个修饰符，而且<code>strong</code>是默认全局的，只要你写了<code>Objective-C</code>的对象，不自己添加<code>weak</code>的话，默认就是<code>strong</code>。<br> 5.1 <code>strong</code>表示这个对象的拥有者<br> 一个对象可以有多个拥有者，<code>strong</code>就是用来表示对这个对象的拥有。比如在往<code>NSMutableArray</code>中添加<code>Objective-C</code>对象，当你从数组中删除时，这个对象并不会释放。需要你手动设置为<code>nil</code>，或者在控制器的生命周期内，由系统来释放。<br> 5.2 <code>weak</code>指针变量仍然可以指向一个对象，但不是这个对象的拥有者<br> <code>weak</code>修饰的指针变量也可以指向对象，但不是这个对象的实际拥有者，也就是说<code>weak</code>修饰的指针变量如果想要释放，需要<code>strong</code>修饰的指针变量设置为<code>nil</code>，<code>weak</code>修饰的指针变量也会是一个<code>nil</code>，它指向的对象已经没有了，还需要设置<code>weak</code>修饰的指针变量为<code>nil</code>。</p>
</li>
<li><code>nonnull</code> <code>nullable</code> <code>null_resettable</code></li>
</ol>
<p>Xcode 6.3推出的<code>nullability annotations</code>，主要是为了更好的Swift与Objective-C混编，在Swift中有可选型的概念<code>!</code>,<code>?</code>，但是Objective-C中木有这玩意，于是Xcode 6.3中才有了这个，<br>从字面可以看出:<br>    <code>nonnull</code> 表示对象不应该为空，如果是这个修饰符对应的就是Swift中已经解包的对象或者<code>!</code><br>    <code>nullable</code>表示可以为<code>nil</code>或者<code>NULL</code>,对应是Swift中的可选<code>?</code><br>    <code>null_resettable</code>则是表达属性的空属性，该属性<code>setter</code>访问器允许将其设置为<code>nil</code>（设置该属性为默认值），但是它的<code>getter</code>访问器不会提供一个<code>nil</code>值（因为它提供了默认值），有一个这样的属性如UIView’s tintColor，如果没有tint颜色指定时它会提供一个默认的tint颜色值，对应的Swift使用是var tintColor:UIColor!</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ol>
<li>使用 <code>weak</code> 关键字，相比 <code>assign</code> 有什么不同<br> 一般情况下使用<code>weak</code>是避免循环引用，因为它不是对象的拥有者。而<code>assign</code>则是用于基本数据类型，或者C类型，而且<code>assign</code>是直接赋值，可能会导致一个问题。比如我想a和b共用一块内存，a是用<code>assign</code>修饰的，<code>a = b</code>，现在a使用的目的已经完成，我想释放这个内存，但是a并不知道b到底用没用完，如果此时a释放内存，而b还在使用，那么会导致应用程序crash，使用<code>weak</code>就能避免这样的问题。</li>
<li>怎么用 copy 关键字<br> <code>copy</code>拷贝的是内容,<code>retain</code>是拷贝的指针<pre><code>* 以`string`为例,如果`string`的属性为`copy`的话,那么传入参数为`NSString`的话,即为不可变`string`,`retain`,`copy`效果一样.
* 如果传入参数是`mutable`的话,那么`copy`拷贝内容,源随意变化不影响该属性的值.`retain`拷贝指针,源变化则属性值着变化,因为属性和源指向如何使用呢,通常在需要拷贝内容,但是副本和源不要互相影响的情况下使用.`*` 同一内存地址.
* 例如`array/dictionary`中,可能会需要一个副本来做一些操作(筛选,排序等),但是并不希望影响原始值,则可以使用`copy`
</code></pre></li>
<li>@property (copy) NSMutableArray *array; 这样写有什么问题吗<br> 因为用了<code>copy</code>, 内部会深拷贝一次, 指针实际指向的是<code>NSArray</code>, 所以如果调用<code>removeObject</code>和<code>addObject</code>方法的话, 会<code>unRecognized selector</code></li>
<li>如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？<br> 当一个对象发生改变时不影响另外一个对象，这里就需要使用<code>copy</code>关键字了，实现<code>NSCopying</code>协议，重写- <code>(id)copyWithZone:(NSZone *)zone</code>方法。<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(_name != name)</div><div class="line">    &#123;</div><div class="line">        _name = [name <span class="keyword">copy</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
<li>@protocol 和 category 中如何使用 @property<br> <code>@protocol</code>可以通过关键字:<code>@synthesize</code>或者在继承的类里面重新定义一次该属性(<code>extension</code>里面定义是不行的)<br> <code>category</code>通过关联:<code>objc_setAssociatedObject</code>/<code>objc_getAssociatedObject</code></li>
<li><code>@property</code> 的本质是什么？<code>ivar</code>、<code>getter</code>、<code>setter</code> 是如何生成并添加到这个类中的<br> <code>@property</code>本质是定义一个<code>objc_property</code>结构体<br><strong>如何生成目前不清楚</strong></li>
<li><code>weak</code>属性需要在<code>dealloc</code>中置<code>nil</code>么<br> 不需要，因为weak会自动设置nil</li>
<li><code>@synthesize</code>和@<code>dynamic</code>分别有什么作用<br> 关于@synthesize（现在已经不需要在写这个属性了，它是用来生成getter和setter方法）<br> <code>@dynamic</code> 就是要告诉编译器<code>getter</code>和<code>setter</code>方法会在程序运行或者用到动态绑定的方式，以便让编译器通过编译，这个主要要在<code>NSManagerObject</code>上。</li>
<li><code>ARC</code>下，不显式指定任何属性关键字时，默认的关键字都有哪些<br> 在默认情况下，所有的实例变量和局部变量都是<code>strong</code>类型的。</li>
<li>用<code>@property</code>声明的<code>NSString</code>（或<code>NSArray</code>，<code>NSDictionary</code>）经常使用<code>copy</code>关键字，为什么？如果改用strong关键字，可能造成什么问题<br>因为不想改变了其中的值后把原来的值也跟着改变了，用了<code>strong</code>后会出现这样的状况。</li>
<li>什么是ARC<br>请阅读，然后随便谈谈你的理解即可。<br>ARC是为了解决下面几个问题<ul>
<li>当我们要释放一个堆内存时，首先要确定指向这个堆空间的指针都被<code>release</code>了。（避免提前释放）</li>
<li>释放指针指向的堆空间，首先要确定哪些指针指向同一个堆，这些指针只能释放一次。（<code>MRC</code>下即谁创建，谁释放，避免重复释放）</li>
<li>模块化操作时，对象可能被多个模块创建和使用，不能确定最后由谁去释放。</li>
<li>多线程操作时，不确定哪个线程最后使用完毕<br><a href="http://onevcat.com/2012/06/arc-hand-by-hand/" target="_blank" rel="external">手把手教你ARC——iOS/Mac开发ARC入门和使用</a><br><a href="http://www.oschina.net/translate/objc-automatic-reference-counting-in-xcode-explained" target="_blank" rel="external">理解 Objective-C 的 ARC</a></li>
</ul>
</li>
<li>请解释以下keywords的区别： <code>assign</code> vs <code>weak</code>, <code>block</code> vs <code>weak</code><br><code>assign</code>适用于基本数据类型，<code>weak</code>是适用于<code>NSObject</code>对象，并且是一个弱引用。<ul>
<li><code>assign</code>其实也可以用来修饰对象，那么我们为什么不用它呢？<br>因为被<code>assign</code>修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为<code>nil</code>。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。</li>
<li><code>weak</code>修饰的对象在释放之后，指针地址会被置为<code>nil</code>。所以现在一般弱引用就是用<code>weak</code>。</li>
<li><code>block</code>是用来修饰一个变量，这个变量就可以在<code>block</code>中被修改，使用<code>block</code>修饰的变量在<code>block</code>代码快中会被<code>retain</code>（<code>ARC</code>下，<code>MRC</code>下不会<code>retain</code>） </li>
<li><code>weak</code>：使用<code>weak</code>修饰的变量不会在<code>block</code>代码块中被<code>retain</code>同时，在ARC下，要避免<code>block</code>出现循环引用 <code>weak typedof(self)weakSelf = self</code></li>
</ul>
</li>
<li><code>__block</code>在<code>arc</code>和<code>非arc</code>下含义一样吗<br>是不一样的，ARC会retain，非ARC不会。</li>
<li>描述一个你遇到过的<code>retain</code> cycle例子<br>在<code>viewController</code>中避免循环引用<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ downloadData:^(<span class="keyword">id</span> responseData)&#123;</div><div class="line">    _data = responseData;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>  
解决办法<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> ViewController *weakSelf = <span class="keyword">self</span>;</div><div class="line">[ downloadData:^(<span class="keyword">id</span> responseData)&#123;</div><div class="line">    weakSelf.data = responseData;</div><div class="line">&#125;];</div></pre></td></tr></table></figure></li>
<li><code>+(void)load;</code> <code>+(void)initialize;</code>有什么用处<br>在Objective-C中，<code>runtime</code>会自动调用每个类的两个方法。<code>+load</code>会在类初始加载时调用，<code>+initialize</code>会在第一次调用类的类方法或实例方法之前被调用。这两个方法是可选的，且只有在实现了它们时才会被调用。<br>共同点：两个方法都只会被调用一次。</li>
<li><code>UIView</code>和<code>CALayer</code>有什么关系<ul>
<li><code>UIView</code>是iOS界面元素的基础，所有的界面元素都继承于它。它本身是由<code>CoreAnimation</code>来实现的，它真正绘图的部分是由一个<code>CALayer</code>的类来管理的，<code>UIView</code>本身更像是一个<code>CALayer</code>的管理器。</li>
<li><code>UIView</code>都存在一个<code>layer</code>属性，可以访问到<code>CALayer</code>的实例。</li>
<li><code>UIView</code>的<code>CALayer</code>类也存在一个<code>view</code>树结构，可以像<code>UIView</code>一样进行添加</li>
<li><code>UIView</code>的<code>layer</code>树在系统内部，由系统来维护，它存在着三棵树，分别是逻辑树，动画树，显示树</li>
</ul>
</li>
<li>如何高性能的给<code>UIImageView</code>加个圆角<ul>
<li>使用贝塞尔曲线来切割图片</li>
<li>使用<code>Quartz2D</code>直接绘制图片</li>
</ul>
</li>
<li>使用<code>drawRect</code>有什么影响<br><code>drawRect</code>方法依赖<code>Core Graphics</code>框架来进行自定义的绘制，但这种方法主要的缺点就是它处理<code>touch</code>事件的方式：每次按钮被点击后，都会用<code>setNeddsDisplay</code>进行强制重绘；而且不止一次，每次单点事件触发两次执行。这样的话从性能的角度来说，对<code>CPU</code>和内存来说都是欠佳的。</li>
<li>SDWebImage里面给UIImageView加载图片的逻辑是什么样的<br>详情看<a href="http://www.cnblogs.com/6duxz/p/4159572.html" target="_blank" rel="external">最新版SDWebImage的使用</a></li>
<li>麻烦你设计个简单的图片内存缓存器<br>图片的内存缓存，可以考虑将图片数据保存到一个数据模型中，所以在程序运行时这个模型都存在内存中，一定要具备移除策略，即释放数据模型。</li>
<li>讲讲你用<code>Instrument</code>优化动画性能的经历<br><a href="http://www.hrchen.com/2013/05/performance-with-instruments/" target="_blank" rel="external">怎么使用instrument</a></li>
<li><code>loadView</code>是干嘛用的<br>当你访问一个<code>ViewController</code>的<code>view</code>属性时，如果此时<code>view</code>的值是<code>nil</code>，那么，<code>ViewController</code>就会自动调用<code>loadView</code>这个方法。这个方法就会加载或者创建一个<code>view</code>对象，赋值给<code>view</code>属性。<br><code>loadView</code>默认做的事情是：如果此<code>ViewController</code>存在一个对应的<code>nib</code>文件，那么就加载这个<code>nib</code>。否则，就创建一个<code>UIView</code>对象。<br>如果你用<code>Interface Builder</code>来创建界面，那么不应该重载这个方法。<br>如果你想自己创建<code>view</code>对象，那么可以重载这个方法。此时你需要自己给<code>view</code>属性赋值。你自定义的方法不应该调用<code>super</code>。如果你需要对<code>view</code>做一些其他的定制操作，在<code>viewDidLoad</code>里面去做。<br><a href="http://www.cnblogs.com/dyllove98/archive/2013/06/06/3123005.html" target="_blank" rel="external">iOS 的loadView 及使用loadView中初始化View注意的问题</a></li>
<li>用过<code>CoreData</code>或者<code>SQLite</code>吗？读写是分线程的吗？遇到过死锁没？咋解决的<br>参考<a href="http://blog.csdn.net/hanangellove/article/details/44966769" target="_blank" rel="external">CoreData与SQLite的线程安全</a></li>
<li><code>GCD</code>里面有哪几种<code>Queue</code>？你自己建立过串行<code>queue</code>吗？背后的线程模型是什么样的<ul>
<li>主队列 <code>dispatch_main_queue();</code> 串行 ，更新UI</li>
<li>全局队列 <code>dispatch_global_queue();</code> 并行，四个优先级：<code>background</code>，<code>low</code>，<code>default</code>，<code>high</code></li>
<li>自定义队列 <code>dispatch_queue_t queue;</code> 可以自定义是并行：<code>DISPATCH_QUEUE_CONCURRENT</code>或者串行<code>DISPATCH_QUEUE_SERIAL</code></li>
</ul>
</li>
<li>为什么其他语言里叫函数调用， <code>Objective-C</code>里则是给对象发消息（或者谈下对<code>runtime</code>的理解）<br>网上关于<code>runtime</code>的资料非常多，其实这方面在平时的开发中使用非常非常之少，底层的黑魔法。<br><a href="http://www.jianshu.com/p/25a319aee33d" target="_blank" rel="external">Objective-C特性：Runtime</a><br><a href="http://tech.glowing.com/cn/objective-c-runtime/" target="_blank" rel="external">Objective-C Runtime</a></li>
<li>什么是<code>method swizzling</code><br>在Objective-C中调用一个方法，其实是向一个对象发送消息，查找消息的唯一依据是<code>selector</code>的名字。利用<code>Objective-C</code>的动态特性，可以实现在运行时偷换<code>selector</code>对应的方法实现，达到给方法挂钩的目的。<br><a href="http://blog.csdn.net/yiyaaixuexi/article/details/9374411" target="_blank" rel="external">详细的案例</a></li>
<li>runtime 如何实现 weak 属性 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">OBJC_ASSOCIATION_ASSIGN</div><div class="line">OBJC_ASSOCIATION_RETAIN_NONATOMIC</div><div class="line">OBJC_ASSOCIATION_COPY_NONATOMIC</div><div class="line">OBJC_ASSOCIATION_RETAIN</div><div class="line">OBJC_ASSOCIATION_COPY</div><div class="line">objc_setAssociatedObject(<span class="keyword">self</span>, &amp;myKey, anObject, OBJC_ASSOCIATION_RETAIN);</div></pre></td></tr></table></figure>
可以自定义<code>weak</code>来实现内存管理，Apple已经为我们准备了常量。<br>参考<br><a href="http://nshipster.cn/associated-objects/" target="_blank" rel="external">Associated Objects</a><br><a href="http://southpeak.github.io/blog/2014/10/30/objective-c-runtime-yun-xing-shi-zhi-er-:cheng-yuan-bian-liang-yu-shu-xing/" target="_blank" rel="external">Objective-C Runtime 运行时之二：成员变量与属性</a></li>
<li><code>objc</code>中向一个<code>nil</code>对象发送消息将会发生什么<br><code>objc</code>的特性是允许对一个 <code>nil</code> 对象发送消息不会 Crash，因为会被忽略掉。</li>
<li>什么时候会报<code>unrecognized selector</code>的异常<br>调用一个不存在的方法</li>
<li><code>objc</code>中向一个对象发送消息<code>[obj foo]</code>和<code>objc_msgSend()</code>函数之间有什么关系<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[obj foo];</div><div class="line"><span class="comment">//编译时会变成</span></div><div class="line">objc_msgSend(obj,<span class="keyword">@selector</span>(foo));</div><div class="line"></div><div class="line">[obj foo:parameter];</div><div class="line"><span class="comment">//编译时会变成</span></div><div class="line">objc_msgSend(obj,<span class="keyword">@selector</span>(foo:),parameter);</div></pre></td></tr></table></figure></li>
<li>一个objc对象如何进行内存布局<br>可参考<a href="http://www.cnblogs.com/csutanyu/archive/2011/12/12/objective-c_memory_layout.html" target="_blank" rel="external">Objective-C内存布局</a></li>
<li>一个objc对象的isa的指针指向什么？有什么作用？<br>isa是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：元类（meteClass）也是类，它也是对象。元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。</li>
<li>下面的代码输出什么<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Son</span> : <span class="title">Father</span></span></div><div class="line">- (<span class="keyword">id</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">super</span> <span class="keyword">class</span>]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
输出Son</li>
<li>runtime如何通过selector找到对应的IMP地址<br>id (*IMP)(id, SEL, …)<br>这个函数使用当前CPU架构实现的标准的C调用约定。第一个参数是指向self的指针(如果是实例方法，则是类实例的内存地址；如果是类方法，则是指向元类的指针)，第二个参数是方法选择器(selector)，接下来是方法的实际参数列表。<br>前面介绍过的SEL就是为了查找方法的最终实现IMP的。由于每个方法对应唯一的SEL，因此我们可以通过SEL方便快速准确地获得它所对应的IMP，查找过程将在下面讨论。取得IMP后，我们就获得了执行这个方法代码的入口点，此时，我们就可以像调用普通的C语言函数一样来使用这个函数指针了。<br>通过取得IMP，我们可以跳过Runtime的消息传递机制，直接执行IMP指向的函数实现，这样省去了Runtime消息传递过程中所做的一系列查找操作，会比直接向对象发送消息高效一些。</li>
</ol>
<h2 id="Hybrid-混合开发"><a href="#Hybrid-混合开发" class="headerlink" title="Hybrid 混合开发"></a>Hybrid 混合开发</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 align=&quot;center&quot;&gt;iOS有用的面试题大集合&lt;/h1&gt;

&lt;h2 id=&quot;面试题从何处得来&quot;&gt;&lt;a href=&quot;#面试题从何处得来&quot; class=&quot;headerlink&quot; title=&quot;面试题从何处得来&quot;&gt;&lt;/a&gt;面试题从何处得来&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a
    
    </summary>
    
      <category term="资源" scheme="https://huos3203.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="汇总" scheme="https://huos3203.github.io/tags/%E6%B1%87%E6%80%BB/"/>
    
      <category term="资源" scheme="https://huos3203.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="面试" scheme="https://huos3203.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云之小直播开发</title>
    <link href="https://huos3203.github.io/2017/01/22/%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B9%8B%E5%B0%8F%E7%9B%B4%E6%92%AD%E5%BC%80%E5%8F%91/"/>
    <id>https://huos3203.github.io/2017/01/22/腾讯云之小直播开发/</id>
    <published>2017-01-22T10:55:21.000Z</published>
    <updated>2017-01-22T10:55:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频服务"><a href="#视频服务" class="headerlink" title="视频服务"></a>视频服务</h1><ol>
<li><p><a href="https://www.qcloud.com/product/LVB" target="_blank" rel="external">直播LVB</a> </p>
<ol>
<li><a href="https://www.qcloud.com/document/product/267/7964" target="_blank" rel="external">开发指南</a></li>
</ol>
</li>
<li><p><a href="https://www.qcloud.com/product/mlvb" target="_blank" rel="external">移动直播MLVB</a></p>
<ol>
<li><a href="https://www.qcloud.com/document/product/454/7876" target="_blank" rel="external">开发指南</a><br>移动直播是一套移动终端直播解决方案的<code>集合</code>，它以免费源码的形式向您展示：如何利用腾讯云直播(LVB)、点播(VOD)、云通信(IM) 和 对象存储(COS)等几项服务组合构建出适合您的直播解决方案。</li>
</ol>
</li>
</ol>
<h2 id="快速集成方案"><a href="#快速集成方案" class="headerlink" title="快速集成方案"></a>快速集成方案</h2><img src="https://mc.qcloudimg.com/static/img/92a464fc26bbe52fea8816f8e6061ef3/image.jpg" class="导图" title="100% 200 集成导图 图片">
<p>如果您想要在自己的 APP 里集成直播推流和播放功能，下面三步就能达成目标：</p>
<ol>
<li>开通直播服务<br><a href="https://console.qcloud.com/live" target="_blank" rel="external">文档</a></li>
<li>集成 RTMP SDK<br><a href="https://www.qcloud.com/document/product/454/7880" target="_blank" rel="external">RTMP SDK - iOS 平台播放</a></li>
<li>对接直播流管理<ol>
<li><a href="https://www.qcloud.com/document/product/454/7915" target="_blank" rel="external">云端API - 如何获取推流URL？</a></li>
<li><a href="https://www.qcloud.com/document/product/454/7916" target="_blank" rel="external">云端API - 如何构建房间列表？</a></li>
<li><a href="https://www.qcloud.com/document/product/454/7920" target="_blank" rel="external">云端API - 如何管理直播流？</a><br>小直播是有腾讯云研发团队提供的一套开源源码集，致力于以 DEMO 的形式向您展示：如何利用腾讯云直播(LVB)、点播(VOD)、云通信(IM) 和 对象存储(COS)等几项服务组合构建出适合您的直播解决方案。</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视频服务&quot;&gt;&lt;a href=&quot;#视频服务&quot; class=&quot;headerlink&quot; title=&quot;视频服务&quot;&gt;&lt;/a&gt;视频服务&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.qcloud.com/product/LVB&quot; target=&quot;
    
    </summary>
    
      <category term="直播" scheme="https://huos3203.github.io/categories/%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="搭建" scheme="https://huos3203.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="SDK" scheme="https://huos3203.github.io/tags/SDK/"/>
    
      <category term="直播" scheme="https://huos3203.github.io/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="腾讯云" scheme="https://huos3203.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="集成" scheme="https://huos3203.github.io/tags/%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>AR 开发资料汇[转]</title>
    <link href="https://huos3203.github.io/2017/01/22/AR%E5%BC%80%E5%8F%91%E8%B5%84%E6%96%99%E6%B1%87/"/>
    <id>https://huos3203.github.io/2017/01/22/AR开发资料汇/</id>
    <published>2017-01-22T10:55:21.000Z</published>
    <updated>2017-01-22T10:55:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结了AR开发的平台汇总，AR视频经典教程，AR主流资讯网站，Vuforia，EasyAR一些实例教程以及AR精选应用。</p>
<hr>
<h1 id="AR-平台"><a href="#AR-平台" class="headerlink" title="AR 平台"></a>AR 平台</h1><p><a href="https://developer.vuforia.com/" target="_blank" rel="external">Vuforia</a>–不用多说，最流行的AR应用开发引擎。<br><a href="http://www.easyar.cn/" target="_blank" rel="external">EasyAR</a>－－EasyAR是国内最专业的AR引擎,是国内首款投入应用的AR SDK。EasyAR是好用且免费的增强现实(Augmented Reality)开发者引擎。<br><a href="http://www.hiar.com.cn/" target="_blank" rel="external">HiAR</a>–HiAR 增强现实开发平台 HiAR 是亮风台信息科技打造的新一代移动增强现实(AR)开发平台,提供一整套世界领先的增强现实(AR)技术服务。<br><a href="http://www.voidar.net/" target="_blank" rel="external">太虚AR</a>－－成都米有网络科技有限公司自主研发集成于Unity3d实现增强现实的SDK开发包,虚拟现实SDK太虚官方网站。<br><a href="http://www.wikitude.com/" target="_blank" rel="external">Wikitude</a>–Wikitude是一家专门从事智能手机增强现实的应用，分别出品了两款应用Wikitude drive与Wikitude World Browser。<br><a href="http://www.intel.com/content/www/us/en/architecture-and-technology/realsense-overview.html" target="_blank" rel="external">Inter RealSense</a>–RealSense 3D是一套感知计算解决方案,包括世界上最小的3D摄像头,模块比两个硬币摞起来还薄,除了硬件外,英特尔还将提供驱动及软件等全套开发工具<br><a href="https://www.icreator.cn/" target="_blank" rel="external">ICreator</a>–依托于iCreator 3D, VR引擎,模型师可以快速创建交互式3D, VR内容,并支持微信平台传播,也为模型师提供可视化3D模型交易功能。<br><a href="http://www.tianyanar.com/" target="_blank" rel="external">天眼</a>－－天眼AR包括天眼云平台和天眼AR浏览器,用户需在天眼云平台完成“AR内容”制作,然后在天眼AR浏览器查看效果。<br><a href="https://developers.google.com/tango/" target="_blank" rel="external">Google Tango</a>–小编重点推荐。运动追踪(Motion Tracking)，深度感知(Depth Perception)和区域学习(Area Learning)。</p>
<hr>
<h1 id="AR-视频教程"><a href="#AR-视频教程" class="headerlink" title="AR 视频教程"></a>AR 视频教程</h1><p><a href="http://edu.manew.com/course/204" target="_blank" rel="external">Hololens 开发教程</a><br><a href="http://edu.manew.com/course/154" target="_blank" rel="external">增强现实技术分享</a><br><a href="http://edu.manew.com/course/172" target="_blank" rel="external">AR房地产</a><br><a href="http://edu.manew.com/course/175" target="_blank" rel="external">AR - 双卡互动</a><br><a href="http://edu.manew.com/course/162" target="_blank" rel="external">AR涂涂乐</a><br><a href="http://www.taikr.com/course/378" target="_blank" rel="external">Hololens 开发</a><br><a href="http://www.arinchina.com/video/list/149/" target="_blank" rel="external">Vuforia 公开课</a><br><a href="http://www.arinchina.com/video/show-1946.html" target="_blank" rel="external">Intel realSense制作面部捕捉小游戏</a><br><a href="http://www.arinchina.com/video/show-1972.html" target="_blank" rel="external">HiAR 视频播放</a><br><a href="http://www.arinchina.com/video/show-1965.html" target="_blank" rel="external">HiAR 水晶球</a><br><a href="http://www.arinchina.com/video/show-1982.html" target="_blank" rel="external">HiAR 瞬间拥有Apple Watch</a><br><a href="http://www.arvrschool.com/read.php?tid=325&amp;fid=21" target="_blank" rel="external">Vuforia 入门－基础－进阶</a></p>
<hr>
<h1 id="AR-网站"><a href="#AR-网站" class="headerlink" title="AR 网站"></a>AR 网站</h1><p><a href="http://arjiang.com/" target="_blank" rel="external">AR酱</a>–发现闪闪发光的AR从业者|增强现实|混合现实|虚拟现实<br><a href="http://www.arinchina.com/" target="_blank" rel="external">增强现实</a>－－增强现实中国ARinChina 是中国最大的专注于AR增强现实技术行业的门户网站。<br><a href="http://www.arvrschool.com/" target="_blank" rel="external">AR 学院</a>－－增强现实|虚拟现实技术交流社区、综合门户<br><a href="http://www.arcun.cn/" target="_blank" rel="external">AR 村</a>－－提供最新最快的AR增强现实信息,最权威的AR增强现实解读与产品发布.<br><a href="http://www.youziar.com/" target="_blank" rel="external">柚子AR</a>－－柚子AR打造专业的增强现实技术领域门户网站,提供AR资讯、AR技术、AR视频、AR游戏、AR设备等相关知识教程,柚子AR,打造增强现实行业交流聚集地。<br><a href="http://www.chinaar.com/" target="_blank" rel="external">ChinaAR</a>－－中国AR网,是国内第一家打造增强现实技术交流的一个自媒体平台!意在打造中国AR爱好者对AR技术的交流与学习的一个平台<br><a href="http://www.archina.org/" target="_blank" rel="external">AR 中国</a>－－AR中国是专注于增强现实技术的新闻门户网站<br><a href="http://www.arjishu.com/" target="_blank" rel="external">AR 技术网</a><br><a href="http://www.arcompetition.com/Default.aspx" target="_blank" rel="external">Realseer</a></p>
<hr>
<h1 id="增强现实视频合辑"><a href="#增强现实视频合辑" class="headerlink" title="增强现实视频合辑"></a>增强现实视频合辑</h1><p><a href="http://www.arcun.cn/thread-2111-1-1.html" target="_blank" rel="external">增强现实技术1-31篇技术视频教程合集</a></p>
<hr>
<h1 id="Vuforai-教程精选"><a href="#Vuforai-教程精选" class="headerlink" title="Vuforai 教程精选"></a>Vuforai 教程精选</h1><p><a href="http://www.arinchina.com/video/list/149/" target="_blank" rel="external">Vuforia 公开课</a>－－包括Vuforia 环境搭建，多图识别，单页翻页效果，模型自动旋转…<br><a href="http://www.arvrschool.com/read.php?tid=325&amp;fid=21" target="_blank" rel="external">VUforia 视频合辑</a><br><a href="http://www.chinaar.com/Vuforia/" target="_blank" rel="external">Vuforia 官方教程</a><br><a href="http://www.arvrschool.com/index.php?c=thread&amp;fid=36" target="_blank" rel="external">Vuforia 论坛</a><br><a href="http://dev.arinchina.com/qualcomm/1" target="_blank" rel="external">Vuforia 论坛</a><br><a href="http://www.manew.com/thread-92723-1-1.html?_dsign=51711fb9" target="_blank" rel="external">Vufoira 涂涂乐文章教程</a>－－讲解详细<br><a href="http://mec0825.net/blog/?p=126" target="_blank" rel="external">Vuforia 实现物体阴影特效</a><br><a href="http://www.th7.cn/Program/Android/201502/394666.shtml" target="_blank" rel="external">Vuforia 多图识别</a><br><a href="http://www.arinchina.com/video/show-1956.html" target="_blank" rel="external">Vuforia 脱卡</a><br><a href="http://lib.csdn.net/article/vr/20346" target="_blank" rel="external">Vuforia SDK—- AR开发vuforia实现拍照截屏功能</a></p>
<hr>
<h1 id="EasyAR教程精选"><a href="#EasyAR教程精选" class="headerlink" title="EasyAR教程精选"></a>EasyAR教程精选</h1><p><a href="http://www.manew.com/thread-98569-1-1.html" target="_blank" rel="external">Leap Motion+EasyAR AR手势开发教程</a><br><a href="http://www.manew.com/thread-98708-1-1.html" target="_blank" rel="external">AR从入门到精通开发系列教程(1)—搭建开发环境</a><br><a href="http://www.manew.com/thread-98992-1-1.html" target="_blank" rel="external">AR从入门到精通开发系列教程(2)–创建模型并互动</a><br><a href="http://www.arinchina.com/video/list/151/" target="_blank" rel="external">EasyAR 公开课</a><br><a href="http://www.easyar.cn/view/documentapi.html" target="_blank" rel="external">EasyAR 文档</a><br><a href="http://bbs.sightp.com/thread-249-1-1.html" target="_blank" rel="external">EasyAR官方Sample之涂涂乐</a><br><a href="http://www.arvrschool.com/index.php?c=thread&amp;fid=86" target="_blank" rel="external">EasyAR 论坛</a><br><a href="http://www.taidous.com/bbs/thread-42793-1-1.html" target="_blank" rel="external">带你开发类似Pokemon Go的AR游戏(1)</a><br><a href="http://www.taidous.com/bbs/thread-42825-1-1.html" target="_blank" rel="external">带你开发类似Pokemon Go的AR游戏(2)</a></p>
<hr>
<h1 id="HiAR-教程"><a href="#HiAR-教程" class="headerlink" title="HiAR 教程"></a>HiAR 教程</h1><p><a href="http://www.hiar.com.cn/doc-v1/main/home/" target="_blank" rel="external">HiAR 官方文档</a>－－看完之后就掌握的大概了，官方文档很详细了。<br><a href="http://www.arvrschool.com/index.php?c=thread&amp;fid=98" target="_blank" rel="external">HiAR 论坛</a><br><a href="http://dev.arinchina.com/hiar/1" target="_blank" rel="external">HiAR 论坛</a><br><a href="http://edu.51cto.com/course/course_id-5565.html" target="_blank" rel="external">HiAR SDK 教学视频</a></p>
<hr>
<h1 id="其他平台教程"><a href="#其他平台教程" class="headerlink" title="其他平台教程"></a>其他平台教程</h1><p><a href="http://www.arvrschool.com/index.php?c=thread&amp;fid=87" target="_blank" rel="external">太虚AR教程</a><br><a href="http://dev.arinchina.com/143/1" target="_blank" rel="external">太虚AR学习</a><br><a href="http://dev.arinchina.com/metaio/1" target="_blank" rel="external">Metaio 学习</a><br><a href="http://www.arinchina.com/video/list/150/" target="_blank" rel="external">Wikitude 公开课</a><br><a href="http://www.arinchina.com/video/list/154/" target="_blank" rel="external">太虚AR公开课</a></p>
<hr>
<h1 id="Google-tango教程"><a href="#Google-tango教程" class="headerlink" title="Google tango教程"></a>Google tango教程</h1><p><a href="https://pan.baidu.com/s/1i44Fpat" target="_blank" rel="external">Tango SDK 下载</a>（提取码：sh18）<br><a href="http://www.aiweibang.com/yuedu/147339646.html" target="_blank" rel="external">跟着Shrek Team学tango</a><br><a href="https://www.zhihu.com/question/37920173" target="_blank" rel="external">Project Tango 知识原理</a><br><a href="http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=308" target="_blank" rel="external">Google Tango 项目</a></p>
<hr>
<h1 id="AR-技术文章"><a href="#AR-技术文章" class="headerlink" title="AR 技术文章"></a>AR 技术文章</h1><p><a href="http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=344" target="_blank" rel="external">两家AR专利大厂在AR硬件方面的探索</a><br><a href="http://www.doc88.com/p-5661286681360.html" target="_blank" rel="external">增强现实技术及其应用</a><br><a href="http://www.vrguancha.net/a/start/baogaoku/2016/1102/2026.html" target="_blank" rel="external">全球首份VR/AR医疗健康产业应用创新报告</a></p>
<hr>
<h1 id="AR-精选论文"><a href="#AR-精选论文" class="headerlink" title="AR 精选论文"></a>AR 精选论文</h1><p><a href="http://www.docin.com/p-62167994.html" target="_blank" rel="external">基于ARM和OpenCV的增强现实平台研究</a><br><a href="http://www.docin.com/p-890798256.html" target="_blank" rel="external">基于Android的增强现实技术研究与实现</a><br><a href="http://www.docin.com/p-123294670.html" target="_blank" rel="external">增强现实应用技术研究</a><br><a href="http://www.docin.com/p-220443601.html" target="_blank" rel="external">基于ARTOOLKIT的增强现实技术在恐龙博物馆中的应用研究</a><br><a href="http://www.docin.com/p-983104432.html" target="_blank" rel="external">基于增强现实技术的虚拟留言墙系统的设计与实现</a><br><a href="http://www.docin.com/p-880664177.html" target="_blank" rel="external">基于智能移动终端的移动增强现实应用研究与实现 </a><br><a href="http://www.docin.com/p-1404596806.html" target="_blank" rel="external">基于unity3d的移动增强现实技术与应用研究分析</a><br><a href="http://www.docin.com/p-129257030.html" target="_blank" rel="external">增强现实中标记设计与识别方法研究</a><br><a href="http://www.docin.com/p-1124496600.html" target="_blank" rel="external">户外增强现实gis的应用研究</a><br><a href="http://www.docin.com/p-1701043105.html" target="_blank" rel="external">手持式增强现实神经导航关键技术研究及其系统建立</a><br><a href="http://www.docin.com/p-118637060.html" target="_blank" rel="external">基于ARToolKit平台的增强现实人机交互系统的若干问题研究</a><br><a href="http://www.docin.com/p-427198314.html" target="_blank" rel="external">基于ARToolkit的汉字识别系统的设计与实现</a><br><a href="http://www.docin.com/p-1609057674.html" target="_blank" rel="external">基于ARToolKit的增强现实技术在恐龙博物馆中的应用研究</a></p>
<hr>
<h1 id="AR应用精选"><a href="#AR应用精选" class="headerlink" title="AR应用精选"></a>AR应用精选</h1><p><a href="http://www.anzhi.com/soft_2519240.html" target="_blank" rel="external">视+AR</a>－－搭载独立开发的EasyAR引擎，全新视+2.0强势来袭！包罗丰富ar内容的增强现实浏览器，等你来体验！<br><a href="http://www.anzhi.com/soft_2699705.html" target="_blank" rel="external">AR</a>–这是一款增强现实AR的应用，主要分为三部分：LOL人物展示（带有经典音效），太空大战，手势交互（可以旋转与缩放）。突破现在AR格局，给玩家带来更多的乐趣。你只需一张个人身份证的反面，便会通过AR得到一个精彩的世界！<br><a href="http://neobear.com/index.php/home/product/product/" target="_blank" rel="external">小熊尼奥产品</a><br><a href="http://mec0825.net/blog/?p=107" target="_blank" rel="external">增强现实优秀应用</a>－－大部分是国外的。<br><a href="http://www.arjiang.com/index.php?m=content&amp;c=index&amp;a=show&amp;catid=11&amp;id=298" target="_blank" rel="external">十一用12个案例SoLoMo，AR+LBS</a><br><a href="http://digi.163.com/15/0312/14/AKGVTR86001668IL.html" target="_blank" rel="external">让你脑洞大开的AR技术应用</a><br><a href="http://www.leiphone.com/news/201406/the-best-augmented-reality-apps.html" target="_blank" rel="external">13款最叫绝的增强现实应用</a><br><a href="http://www.arinchina.com/news/show-2573.html" target="_blank" rel="external">9款超赞的AR教育APP</a><br><a href="https://github.com/GeekLiB/AR-Source" target="_blank" rel="external">参考原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结了AR开发的平台汇总，AR视频经典教程，AR主流资讯网站，Vuforia，EasyAR一些实例教程以及AR精选应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;AR-平台&quot;&gt;&lt;a href=&quot;#AR-平台&quot; class=&quot;headerlink&quot; title=&quot;AR 平台&quot;&gt;&lt;/
    
    </summary>
    
      <category term="资源" scheme="https://huos3203.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="AR" scheme="https://huos3203.github.io/tags/AR/"/>
    
      <category term="LBS+AR" scheme="https://huos3203.github.io/tags/LBS-AR/"/>
    
      <category term="QQ红包" scheme="https://huos3203.github.io/tags/QQ%E7%BA%A2%E5%8C%85/"/>
    
  </entry>
  
</feed>
