<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布衣男儿</title>
  <subtitle>不物喜，不己悲，善假物，易参行！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huos3203.github.io/"/>
  <updated>2017-01-12T03:57:41.000Z</updated>
  <id>https://huos3203.github.io/</id>
  
  <author>
    <name>boyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Error Handling for Swift</title>
    <link href="https://huos3203.github.io/2017/01/11/ErrorHandlingForSwift/"/>
    <id>https://huos3203.github.io/2017/01/11/ErrorHandlingForSwift/</id>
    <published>2017-01-11T09:04:21.000Z</published>
    <updated>2017-01-12T03:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime.<br>Some operations aren’t guaranteed to always complete execution or produce a useful output. Optionals are used to represent the absence of a value, but when an operation fails, it’s often useful to understand what caused the failure, so that your code can respond accordingly.<br>As an example, consider the task of reading and processing data from a file on disk. There are a number of ways this task can fail, including the file not existing at the specified path, the file not having read permissions, or the file not being encoded in a compatible format. Distinguishing among these different situations allows a program to resolve some errors and to communicate to the user any errors it can’t resolve.<br>举例，在读取和处理磁盘上的一个文件的数据时，会有有许多方法失败，包括指定的文件路径找不到，没有文件的读取权限，或文件编码格式不兼容。在这些不同情况下，就可以让程序提示用户导致程序无法执行的具体原因。</p>
<h1 id="Representing-and-Throwing-Errors"><a href="#Representing-and-Throwing-Errors" class="headerlink" title="Representing and Throwing Errors"></a>Representing and Throwing Errors</h1><p>In Swift, errors are represented by values of types that conform to the Error protocol. This empty protocol indicates that a type can be used for error handling.<br>在swift中，错误类型是遵循Error 协议。</p>
<p>Swift enumerations are particularly well suited to modeling a group of related error conditions, with associated values allowing for additional information about the nature of an error to be communicated. For example, here’s how you might represent the error conditions of operating a vending machine inside a game:<br>swift枚举类型特别适合为一组错误条件建模，用来关联导致错误的真正原因的相关信息。例如：<br>一个在操作一台游戏机时的会出现的错误枚举类：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">VendingMachineError</span>: <span class="title">Error</span> </span>&#123;</div><div class="line"><span class="keyword">case</span> invalidSelection</div><div class="line"><span class="keyword">case</span> insufficientFunds(coinsNeeded: <span class="type">Int</span>)</div><div class="line"><span class="keyword">case</span> outOfStock</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Throwing an error lets you indicate that something unexpected happened and the normal flow of execution can’t continue. You use a throw statement to throw an error. For example, the following code throws an error to indicate that five additional coins are needed by the vending machine:<br>抛出错误说明游戏出现异常，导致其他操作无法进行。这是需要通过Throw语句来抛出这个错误。例如，以下代码抛出了一个错误表明需要five：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="type">VendingMachineError</span>.insufficientFunds(coinsNeeded: <span class="number">5</span>)</div></pre></td></tr></table></figure></p>
<h1 id="Handling-Errors"><a href="#Handling-Errors" class="headerlink" title="Handling Errors"></a>Handling Errors</h1><p>When an error is thrown, some surrounding piece of code must be responsible for handling the error—for example, by correcting the problem, trying an alternative approach, or informing the user of the failure.<br>当错误抛出后，这段代码必须来处理这个错误。例如：通过纠正问题，尝试其他方式实现，或通知用户的失败。</p>
<p>There are four ways to handle errors in Swift. You can propagate the error from a function to the code that calls that function, handle the error using a do-catch statement, handle the error as an optional value, or assert that the error will not occur. Each approach is described in a section below.<br>在swift中有四种处理错误机制:</p>
<pre><code>1. 向调用方法中传递这个错误
2. 使用do-catch语句处理
3. 把错误设置为可选型
4.断言不会出现异常的情况下，使用try!禁止异常抛出
</code></pre><p>When a function throws an error, it changes the flow of your program, so it’s important that you can quickly identify places in your code that can throw errors. To identify these places in your code, write the try keyword—or the try? or try! variation—before a piece of code that calls a function, method, or initializer that can throw an error. These keywords are described in the sections below.<br>当一个方法抛出错误时，会打断程序正常的工作流，必须快速定位到可能抛出错误的代码。可以使用关键字<code>try</code> 要注意 <code>try?</code>或<code>try!</code>之间的差异。在调用一个函数，方法或者构造器之前，来抛出异常。</p>
<h2 id="Propagating-Errors-Using-Throwing-Functions"><a href="#Propagating-Errors-Using-Throwing-Functions" class="headerlink" title="Propagating Errors Using Throwing Functions"></a>Propagating Errors Using Throwing Functions</h2><p>To indicate that a function, method, or initializer can throw an error, you write the throws keyword in the function’s declaration after its parameters. A function marked with throws is called a throwing function. If the function specifies a return type, you write the throwskeyword before the return arrow (-&gt;).<br>函数，方法或构造器都可以抛出异常，只需要在声明它们时添加关键字：<code>throws</code>即可，这种方法被称为<code>throws</code>函数，<code>throws</code>关键字位置在参数之后，返回值(-&gt;)之前</p>
<p>A throwing function propagates errors that are thrown inside of it to the scope from which it’s called.<br>抛出函数会把错误抛给调用它的函数周期中去。</p>
<a id="more"></a>
<p>Only throwing functions can propagate errors. Any errors thrown inside a nonthrowing function must be handled inside the function.<br>只有抛出函数能传递错误，如果不是抛出函数，它自己必须处理掉任何抛进来的错误。</p>
<p>In the example below, the VendingMachine class has a <code>vend(itemNamed:)</code> method that throws an appropriate VendingMachineError if the requested item is not available, is out of stock, or has a cost that exceeds the current deposited amount:<br>在下面的例子中，对某个请求内容不可用时，自动售货机会通过<code>vend(itemNamed:)</code>方法抛出一个对应的<code>VendingMachineError</code>错误，缺货或超过目前的存款金额成本：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Item</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> price: <span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VendingMachine</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> inventory = [</div><div class="line">        <span class="string">"Candy Bar"</span>: <span class="type">Item</span>(price: <span class="number">12</span>, <span class="built_in">count</span>: <span class="number">7</span>),</div><div class="line">        <span class="string">"Chips"</span>: <span class="type">Item</span>(price: <span class="number">10</span>, <span class="built_in">count</span>: <span class="number">4</span>),</div><div class="line">        <span class="string">"Pretzels"</span>: <span class="type">Item</span>(price: <span class="number">7</span>, <span class="built_in">count</span>: <span class="number">11</span>)</div><div class="line">    ]</div><div class="line">    <span class="keyword">var</span> coinsDeposited = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">vend</span><span class="params">(itemNamed name: String)</span></span> <span class="keyword">throws</span> </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> item = inventory[name] <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.invalidSelection</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> item.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.outOfStock</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> item.price &lt;= coinsDeposited <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.insufficientFunds(coinsNeeded: item.price - coinsDeposited)</div><div class="line">        &#125;</div><div class="line">        coinsDeposited -= item.price</div><div class="line">        <span class="keyword">var</span> newItem = item</div><div class="line">        newItem.<span class="built_in">count</span> -= <span class="number">1</span></div><div class="line">        inventory[name] = newItem</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Dispensing \(name)"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The implementation of the <code>vend(itemNamed:)</code> method uses guard statements to exit the method early and throw appropriate errors if any of the requirements for purchasing a snack aren’t met. Because a throw statement immediately transfers program control, an item will be vended only if all of these requirements are met.<br><code>vend(itemNamed:)</code>方法的实现中使用 <code>guard语句</code>来判断，当在购买操作不符合相应条件会直接抛出相应的错误，来打断该方法的其他操作。因为<code>throw语句</code>会立即转移程序控制权，保证了机器仅出售满足所有条件的物品。</p>
<p>Because the <code>vend(itemNamed:)</code> method propagates any errors it throws, any code that calls this method must either handle the errors—using a <code>do-catch</code> statement, <code>try?</code>, or <code>try!</code>—or continue to propagate them. For example, the <code>buyFavoriteSnack(person:vendingMachine:)</code> in the example below is also a throwing function, and any errors that the <code>vend(itemNamed:)</code> method throws will propagate up to the point where the <code>buyFavoriteSnack(person:vendingMachine:)</code>function is called.<br>因为vend(itemNamed:)的方法抛出所有错误，所以调用该方法的函数必须处理错误（ <code>do-catch, try?, or try!</code>处理，或使用<code>try</code>向上抛出）。</p>
<p>例如，<code>buyFavoriteSnack(person:vendingMachine:)</code>也是一个抛出函数，从<code>vend(itemNamed:)</code>方法接受到的所有错误，都会被会<code>buyFavoriteSnack(person:vendingMachine:)</code>继续抛给调用它的函数中。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> favoriteSnacks = [</div><div class="line">    <span class="string">"Alice"</span>: <span class="string">"Chips"</span>,</div><div class="line">    <span class="string">"Bob"</span>: <span class="string">"Licorice"</span>,</div><div class="line">    <span class="string">"Eve"</span>: <span class="string">"Pretzels"</span>,</div><div class="line">]</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">buyFavoriteSnack</span><span class="params">(person: String, vendingMachine: VendingMachine)</span></span> <span class="keyword">throws</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">let</span> snackName = favoriteSnacks[person] ?? <span class="string">"Candy Bar"</span></div><div class="line">    <span class="keyword">try</span> vendingMachine.vend(itemNamed: snackName)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In this example, the <code>buyFavoriteSnack(person: vendingMachine:)</code> function looks up a given person’s favorite snack and tries to buy it for them by calling the <code>vend(itemNamed:)</code> method. Because the <code>vend(itemNamed:)</code> method can throw an error, it’s called with the trykeyword in front of it.<br><code>buyFavoriteSnack(person: vendingMachine:)</code> 函数查找买家中意的snake，并<code>vend(itemNamed:)</code>调用尝试购买。使用在方法前使用<code>try</code>关键字来抛出异常，并向上传递。</p>
<p>Throwing initializers can propagate errors in the same way as throwing functions. For example, the initializer for the <code>PurchasedSnackstructure</code> in the listing below calls a throwing function as part of the initialization process, and it handles any errors that it encounters by propagating them to its caller.<br>抛出构造器也能向抛出函数一样传递错误，例如：<code>PurchasedSnackstructure</code>的构造器中调用了抛出函数：<code>vend(itemNamed:)</code>，抛出构造器可以通过向上传递来处理这些错误。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PurchasedSnack</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, vendingMachine: <span class="type">VendingMachine</span>) <span class="keyword">throws</span> </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span> vendingMachine.vend(itemNamed: name)</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Handling-Errors-Using-Do-Catch"><a href="#Handling-Errors-Using-Do-Catch" class="headerlink" title="Handling Errors Using Do-Catch"></a>Handling Errors Using Do-Catch</h2><p>You use a do-catch statement to handle errors by running a block of code. If an error is thrown by the code in the <code>do</code> clause, it is matched against the <code>catch</code>clauses to determine which one of them can handle the error.<br>使用<code>do-catch</code>语句通过运行代码块来处理错误。在<code>do</code>分句中如果抛出了一个错误，那么就可以在<code>catch</code>分句中进行处理的匹配到错误<br>Here is the general form of a <code>do-catch</code>statement:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> expression</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">catch</span> pattern <span class="number">1</span> &#123;</div><div class="line">    statements</div><div class="line">&#125; <span class="keyword">catch</span> pattern <span class="number">2</span> <span class="keyword">where</span> condition &#123;</div><div class="line">    statements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>You write a pattern after catch to indicate what errors that clause can handle. If a <code>catch</code> clause doesn’t have a pattern, the clause matches any <code>error</code> and binds the <code>error</code> to a local constant named error. For more information about pattern matching, see Patterns.<br>在关键字catch后边跟随匹配模式，这个<code>catch分句</code>就会处理匹配到的错误，如果关键字<code>catch分句</code>没有任何匹配模式，那么这个分句将会匹配到所有错误，并把这些错误信息赋值给系统常量<code>error</code>。</p>
<p>The <code>catch</code>clauses don’t have to handle every possible error that the code in its <code>do</code> clause can throw. If none of the catch clauses handle the error, the error propagates to the surrounding scope. However, the error must be handled by some surrounding scope—either by an enclosing <code>do-catch</code> clause that handles the error or by being inside a throwing function. For example, the following code handles all three cases of the <code>VendingMachineError</code>enumeration, but all other errors have to be handled by its surrounding scope:<br><code>catch分句</code>不必对<code>do分句</code>中的代码可能抛出每一个的错误，如果某个错误没有被<code>catch分句</code>匹配到处理，这个错误将会传递到调用它的函数周期中，这个错误必须在这个函数周期中处理，或通过<code>do-catch语句</code>来处理，或通过内部的抛出函数处理。</p>
<p>例如，下面的代码处理<code>VendingMachineError</code>枚举类中的三个错误<code>cases</code>，但其他的错误都是由其周边范围处理：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vendingMachine = <span class="type">VendingMachine</span>()</div><div class="line">vendingMachine.coinsDeposited = <span class="number">8</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> buyFavoriteSnack(person: <span class="string">"Alice"</span>, vendingMachine: vendingMachine)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">VendingMachineError</span>.invalidSelection &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Invalid Selection."</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">VendingMachineError</span>.outOfStock &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Out of Stock."</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="type">VendingMachineError</span>.insufficientFunds(<span class="keyword">let</span> coinsNeeded) &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"Insufficient funds. Please insert an additional \(coinsNeeded) coins."</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Prints "Insufficient funds. Please insert an additional 2 coins."</span></div></pre></td></tr></table></figure></p>
<p>In the above example, the <code>buyFavoriteSnack(person:vendingMachine:)</code> function is called in a try expression, because it can throw an error. If an error is thrown, execution immediately transfers to the <code>catch</code> clauses, which decide whether to allow propagation to continue. If no error is thrown, the remaining statements in the do statement are executed.<br>在上述代码中因为<code>buyFavoriteSnack(person:vendingMachine:)</code>函数会抛出错误异常，所以要在try表达式中调用。如果抛出异常就会立马执行是否继续传递的catch分句，如果没有抛出异常，会保持do分句中的代码正常进行。</p>
<h2 id="Converting-Errors-to-Optional-Values"><a href="#Converting-Errors-to-Optional-Values" class="headerlink" title="Converting Errors to Optional Values"></a>Converting Errors to Optional Values</h2><p>You use try? to handle an error by converting it to an optional value. If an error is thrown while evaluating the <code>try?</code> expression, the value of the expression is nil. For example, in the following code x and y have the same value and behavior:<br>使用<code>try?表达式</code>处理错误，是通过把错误转换为<code>可选值(?)类型</code>处理。在<code>try?</code>表达式中出现抛出错误时，这个表达式的值<code>=nil</code>。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">someThrowingFunction</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> x = <span class="keyword">try</span>? someThrowingFunction()</div><div class="line"><span class="keyword">let</span> y: <span class="type">Int</span>?</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    y = <span class="keyword">try</span> someThrowingFunction()</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">    y = <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If someThrowingFunction() throws an error, the value of x and y is nil. Otherwise, the value of x and y is the value that the function returned. Note that x and y are an optional of whatever type someThrowingFunction() returns. Here the function returns an integer, so xand y are optional integers.<br>如果函数<code>someThrowingFunction()</code>抛出异常，<code>x,y = nil</code>，否则:<code>x,y</code>就时函数<code>return</code>的值。</p>
<blockquote>
<p>注意：<code>x,y</code>是一个可选的someThrowingFunction()返回类型。在这里函数返回integer，那么x,y是可选的integer类型。</p>
</blockquote>
<p>Using <code>try?</code> lets you write concise error handling code when you want to handle all errors in the same way. For example, the following code uses several approaches to fetch data, or returns nil if all of the approaches fail.<br>当用这种方式来处理所有错误时，使用<code>try?</code>表达式能写更简洁的错误处理代码，例如：下面的代码使用几种方法来获取数据，如果这些方法失败就会返回nil。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchData</span><span class="params">()</span></span> -&gt; <span class="type">Data</span>? &#123;</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> data = <span class="keyword">try</span>? fetchDataFromDisk() &#123; <span class="keyword">return</span> data &#125;</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> data = <span class="keyword">try</span>? fetchDataFromServer() &#123; <span class="keyword">return</span> data &#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Disabling-Error-Propagation"><a href="#Disabling-Error-Propagation" class="headerlink" title="Disabling Error Propagation"></a>Disabling Error Propagation</h2><p>Sometimes you know a throwing function or method won’t, in fact, throw an error at runtime. On those occasions, you can write <code>try!</code> before the expression to disable error propagation and wrap the call in a runtime assertion that no error will be thrown. If an error actually is thrown, you’ll get a runtime error.<br>有时你认为不会出现异常的抛出函数或方法，但事实上，却在运行时抛出异常了。在其他情况下，可以使用<code>try!</code>表达式来禁止错误传递，并且十分肯定断言在运行时不会有异常抛出。如果有异常抛出，就会得到一个运行时错误。</p>
<p>For example, the following code uses a <code>loadImage(atPath:)</code> function, which loads the image resource at a given path or throws an error if the image can’t be loaded. In this case, because the image is shipped with the application, no error will be thrown at runtime, so it is appropriate to disable error propagation.<br>例如：使用<code>loadImage(atPath:)</code>函数要么通过这个路径加载image，要么image加载失败抛出一个错误。在这种情况下，因为<code>image</code>在app资源目录<code>resources</code>中，所以在运行时肯定不会有异常抛出。因此可以使用<code>try!</code>禁止错误传递。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> photo = <span class="keyword">try</span>! loadImage(atPath: <span class="string">"./Resources/John Appleseed.jpg"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="Specifying-Cleanup-Actions"><a href="#Specifying-Cleanup-Actions" class="headerlink" title="Specifying Cleanup Actions"></a>Specifying Cleanup Actions</h2><p>You use a defer statement to execute a set of statements just before code execution leaves the current block of code. This statement lets you do any necessary cleanup that should be performed regardless of how execution leaves the current block of code—whether it leaves because an error was thrown or because of a statement such as return or break. For example, you can use a defer statement to ensure that file descriptors are closed and manually allocated memory is freed.<br>在代码执行离开当前代码块之前，使用一个“defer语句”来执行一组语句。defer语句让做一些必要的清理操作，在执行如何离开当前代码块：因为抛出异常或者因为<code>return，break语句</code>导致。例如：使用<code>defer语句</code>执行关闭文件和内存的释放操作，来确保清理操作完成。</p>
<p>A defer statement defers execution until the current scope is exited. This statement consists of the defer keyword and the statements to be executed later. The deferred statements may not contain any code that would transfer control out of the statements, such as a break or a return statement, or by throwing an error. Deferred actions are executed in reverse order of how they are specified—that is, the code in the first defer statement executes after code in the second, and so on.<br><code>defer语句</code>推迟在直到当前作用域推出时，再执行。<code>defer语句</code>由<code>defer</code>关键字和一些清理操作语句组成。<code>defer语句</code>不包含transfer control out of the statements例如<code>（return，break，throw）</code>等。</p>
<p><code>defer</code>延迟操作是按照指定的顺序执行的，就是先执行最后一个<code>defer语句</code>中的代码之后，再执行第倒数第二个<code>defer语句</code>的代码，以此类推，倒叙清理退场。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">processFile</span><span class="params">(filename: String)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">if</span> exists(filename) &#123;</div><div class="line">        <span class="keyword">let</span> file = open(filename)</div><div class="line">        <span class="keyword">defer</span> &#123;</div><div class="line">            close(file)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> <span class="keyword">let</span> line = <span class="keyword">try</span> file.readline() </div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Work with the file.</span></div><div class="line">        &#125;</div><div class="line">            <span class="comment">// close(file) is called here, at the end of the scope.</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The above example uses a defer statement to ensure that the <code>open(_:)</code> function has a corresponding call to <code>close(_:)</code>.<br>使用defer语句，确保了在open的同时与之相关的还有close。</p>
<p>You can use a defer statement even when no error handling code is involved.<br>即使在没有涉及错误处理代码的时候，也可以使用“延迟”语句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Error handling is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime.&lt;br&gt;Some operations aren’t guaranteed to always complete execution or produce a useful output. Optionals are used to represent the absence of a value, but when an operation fails, it’s often useful to understand what caused the failure, so that your code can respond accordingly.&lt;br&gt;As an example, consider the task of reading and processing data from a file on disk. There are a number of ways this task can fail, including the file not existing at the specified path, the file not having read permissions, or the file not being encoded in a compatible format. Distinguishing among these different situations allows a program to resolve some errors and to communicate to the user any errors it can’t resolve.&lt;br&gt;举例，在读取和处理磁盘上的一个文件的数据时，会有有许多方法失败，包括指定的文件路径找不到，没有文件的读取权限，或文件编码格式不兼容。在这些不同情况下，就可以让程序提示用户导致程序无法执行的具体原因。&lt;/p&gt;
&lt;h1 id=&quot;Representing-and-Throwing-Errors&quot;&gt;&lt;a href=&quot;#Representing-and-Throwing-Errors&quot; class=&quot;headerlink&quot; title=&quot;Representing and Throwing Errors&quot;&gt;&lt;/a&gt;Representing and Throwing Errors&lt;/h1&gt;&lt;p&gt;In Swift, errors are represented by values of types that conform to the Error protocol. This empty protocol indicates that a type can be used for error handling.&lt;br&gt;在swift中，错误类型是遵循Error 协议。&lt;/p&gt;
&lt;p&gt;Swift enumerations are particularly well suited to modeling a group of related error conditions, with associated values allowing for additional information about the nature of an error to be communicated. For example, here’s how you might represent the error conditions of operating a vending machine inside a game:&lt;br&gt;swift枚举类型特别适合为一组错误条件建模，用来关联导致错误的真正原因的相关信息。例如：&lt;br&gt;一个在操作一台游戏机时的会出现的错误枚举类：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;VendingMachineError&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Error&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; invalidSelection&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; insufficientFunds(coinsNeeded: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; outOfStock&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Throwing an error lets you indicate that something unexpected happened and the normal flow of execution can’t continue. You use a throw statement to throw an error. For example, the following code throws an error to indicate that five additional coins are needed by the vending machine:&lt;br&gt;抛出错误说明游戏出现异常，导致其他操作无法进行。这是需要通过Throw语句来抛出这个错误。例如，以下代码抛出了一个错误表明需要five：&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;VendingMachineError&lt;/span&gt;.insufficientFunds(coinsNeeded: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Handling-Errors&quot;&gt;&lt;a href=&quot;#Handling-Errors&quot; class=&quot;headerlink&quot; title=&quot;Handling Errors&quot;&gt;&lt;/a&gt;Handling Errors&lt;/h1&gt;&lt;p&gt;When an error is thrown, some surrounding piece of code must be responsible for handling the error—for example, by correcting the problem, trying an alternative approach, or informing the user of the failure.&lt;br&gt;当错误抛出后，这段代码必须来处理这个错误。例如：通过纠正问题，尝试其他方式实现，或通知用户的失败。&lt;/p&gt;
&lt;p&gt;There are four ways to handle errors in Swift. You can propagate the error from a function to the code that calls that function, handle the error using a do-catch statement, handle the error as an optional value, or assert that the error will not occur. Each approach is described in a section below.&lt;br&gt;在swift中有四种处理错误机制:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 向调用方法中传递这个错误
2. 使用do-catch语句处理
3. 把错误设置为可选型
4.断言不会出现异常的情况下，使用try!禁止异常抛出
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When a function throws an error, it changes the flow of your program, so it’s important that you can quickly identify places in your code that can throw errors. To identify these places in your code, write the try keyword—or the try? or try! variation—before a piece of code that calls a function, method, or initializer that can throw an error. These keywords are described in the sections below.&lt;br&gt;当一个方法抛出错误时，会打断程序正常的工作流，必须快速定位到可能抛出错误的代码。可以使用关键字&lt;code&gt;try&lt;/code&gt; 要注意 &lt;code&gt;try?&lt;/code&gt;或&lt;code&gt;try!&lt;/code&gt;之间的差异。在调用一个函数，方法或者构造器之前，来抛出异常。&lt;/p&gt;
&lt;h2 id=&quot;Propagating-Errors-Using-Throwing-Functions&quot;&gt;&lt;a href=&quot;#Propagating-Errors-Using-Throwing-Functions&quot; class=&quot;headerlink&quot; title=&quot;Propagating Errors Using Throwing Functions&quot;&gt;&lt;/a&gt;Propagating Errors Using Throwing Functions&lt;/h2&gt;&lt;p&gt;To indicate that a function, method, or initializer can throw an error, you write the throws keyword in the function’s declaration after its parameters. A function marked with throws is called a throwing function. If the function specifies a return type, you write the throwskeyword before the return arrow (-&amp;gt;).&lt;br&gt;函数，方法或构造器都可以抛出异常，只需要在声明它们时添加关键字：&lt;code&gt;throws&lt;/code&gt;即可，这种方法被称为&lt;code&gt;throws&lt;/code&gt;函数，&lt;code&gt;throws&lt;/code&gt;关键字位置在参数之后，返回值(-&amp;gt;)之前&lt;/p&gt;
&lt;p&gt;A throwing function propagates errors that are thrown inside of it to the scope from which it’s called.&lt;br&gt;抛出函数会把错误抛给调用它的函数周期中去。&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="安全" scheme="https://huos3203.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>在OC和swift中区分多个targets</title>
    <link href="https://huos3203.github.io/2017/01/11/%E5%9C%A8OC%E5%92%8Cswift%E4%B8%AD%E5%8C%BA%E5%88%86%E5%A4%9A%E4%B8%AAtargets/"/>
    <id>https://huos3203.github.io/2017/01/11/在OC和swift中区分多个targets/</id>
    <published>2017-01-11T05:49:33.000Z</published>
    <updated>2017-01-12T03:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="build-setting预编译位置"><a href="#build-setting预编译位置" class="headerlink" title="build setting预编译位置"></a>build setting预编译位置</h2><ol>
<li>Preprocessor Macros</li>
<li>Other Swift Flags</li>
</ol>
<p>为生产和开发target配置预处理宏/编译器标识。之后我们就可以使用该标识在我们的代码来检测应用程序正在运行的版本。</p>
<h3 id="Objective-C项目中Preprocessor-Macros"><a href="#Objective-C项目中Preprocessor-Macros" class="headerlink" title="Objective-C项目中Preprocessor Macros"></a>Objective-C项目中Preprocessor Macros</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><hr>
<p>添加位置：选择项目中对应的target名-&gt;在<code>Build Settings</code>下<code>Apple LLVM 7.0 - Preprocessing</code>-&gt;<code>Preprocessor Macros</code>。<br>添加变量：在Rebug和Release区域添加一个变量<code>DEVELOPMENT</code><br>    对应target1: 设<code>DEVELOPMENT=1</code>表示开发版<br>    对应target2: 设<code>DEVELOPMENT=0</code>表示生产版</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><hr>
<p>根据已配置的宏DEV_VERSION，我们可以在代码中利用它动态地编译项目。下面是一个简单的例子：<br>Objective-C中使用<code>＃if</code>检查<code>DEVELOPMENT</code>的环境，并相应的设置URLs/ API密钥。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if DEVELOPMENT</span></div><div class="line">     <span class="meta">#define SERVER_URL @<span class="meta-string">"http://dev.server.com/api/"</span></span></div><div class="line">     <span class="meta">#define API_TOKEN @<span class="meta-string">"DI2023409jf90ew"</span></span></div><div class="line"><span class="meta">#else</span></div><div class="line">     <span class="meta">#define SERVER_URL @<span class="meta-string">"http://prod.server.com/api/"</span></span></div><div class="line">     <span class="meta">#define API_TOKEN @<span class="meta-string">"71a629j0f090232"</span></span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<h3 id="Swift中Other-Swift-Flags"><a href="#Swift中Other-Swift-Flags" class="headerlink" title="Swift中Other Swift Flags"></a>Swift中Other Swift Flags</h3><p>对于swift的项目，编译器不再支持预处理指令。作为替代，它使用编译时的属性和build配置。</p>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><hr>
<p>选中开发target，添加一个标识表示开发版本<br>选中<code>target</code> -&gt; <code>Build Setting</code>-&gt;<code>Swift Compiler - Custom Flags</code>-&gt;将值设为<code>-DDEVELOPMENT</code>表示这个target作为开发版本。</p>
<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><hr>
<p>Swift中你仍然可以使用<code>#if</code>判定build的参数动态编译。然而，除了使用<code>#define</code>定义基本常量，在swift中我们也可以用<code>let</code>定义一个全局常量。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#<span class="keyword">if</span> <span class="type">DEVELOPMENT</span></div><div class="line"><span class="keyword">let</span> <span class="type">SERVER_URL</span> = <span class="string">"http://dev.server.com/api/"</span></div><div class="line"><span class="keyword">let</span> <span class="type">API_TOKEN</span> = <span class="string">"DI2023409jf90ew"</span></div><div class="line">#<span class="keyword">else</span></div><div class="line"><span class="keyword">let</span> <span class="type">SERVER_URL</span> = <span class="string">"http://prod.server.com/api/"</span></div><div class="line"><span class="keyword">let</span> <span class="type">API_TOKEN</span> = <span class="string">"71a629j0f090232"</span></div><div class="line">#endif</div></pre></td></tr></table></figure>
<p><a href="http://www.cocoachina.com/ios/20160331/15832.html" target="_blank" rel="external">参照</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;build-setting预编译位置&quot;&gt;&lt;a href=&quot;#build-setting预编译位置&quot; class=&quot;headerlink&quot; title=&quot;build setting预编译位置&quot;&gt;&lt;/a&gt;build setting预编译位置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="targets" scheme="https://huos3203.github.io/tags/targets/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装使用</title>
    <link href="https://huos3203.github.io/2016/12/21/Docker%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2016/12/21/Docker使用/</id>
    <published>2016-12-21T13:25:29.000Z</published>
    <updated>2017-01-12T08:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Docker-for-Mac"><a href="#安装Docker-for-Mac" class="headerlink" title="安装Docker for Mac"></a>安装<a href="https://www.docker.com/products/docker#/mac" target="_blank" rel="external">Docker for Mac</a></h2><p>在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">echo '下载dmg...'</div><div class="line">curl -o Docker.dmg https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg</div><div class="line">#安装Docker.dmg</div><div class="line">MOUNTDIR=$(echo `hdiutil mount Docker.dmg | tail -1 \</div><div class="line">| awk '&#123;$1=$2=""; print $0&#125;'` | xargs -0 echo) \</div><div class="line">&amp;&amp; cd $&#123;MOUNTDIR&#125; &amp;&amp; cp -R Docker.app /Applications/ \</div><div class="line">&amp;&amp; open /Applications/Docker.app</div></pre></td></tr></table></figure></p>
<h3 id="配置-Docker-加速器镜像源"><a href="#配置-Docker-加速器镜像源" class="headerlink" title="配置 Docker 加速器镜像源"></a>配置 Docker 加速器镜像源</h3><p>右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://142*****.m.daocloud.io</div></pre></td></tr></table></figure></p>
<p>点击 Apply &amp; Restart 按钮使设置生效。</p>
<h3 id="安装主机监控程序加速器"><a href="#安装主机监控程序加速器" class="headerlink" title="安装主机监控程序加速器"></a>安装主机监控程序加速器</h3><hr>
<ol>
<li>登录到 <code>DaoCloud 控制台</code>，点击「我的集群」按钮，在「接入自有主机」界面，点击 Mac 按钮。</li>
<li>安装<a href="https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg" target="_blank" rel="external">DockerToolbox</a>，是一个完整的开发组件，通过安装和配置<code>DaoCloud加速器 v2</code>，提升下载 <code>Docker Hub 镜像</code>的速度。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//下载pkg</div><div class="line">curl -o DockerToolbox.pkg https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg</div><div class="line">//安装pkg</div><div class="line">sudo installer -pkg DockerToolbox.pkg -target /</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li>安装Toolbox好了，下一步：<br><img src="http://docs.daocloud.io/user/pages/03.faq/08.install-docker-daocloud/DashboardDaoCloudInstall.png" alt=""></li>
<li><code>$ docker-machine start default</code>启动 Docker.<br>当执行后提示：<code>Host does not exist: &quot;default&quot;</code><figure class="highlight plain"><figcaption><span>docker-machine create</span><a href="http://stackoverflow.com/a/38602630" target="_blank" rel="external">stackoverflow</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-machine create -d virtualbox default</div></pre></td></tr></table></figure></li>
<li><p>在 <code>Docker 主机</code> DaoCloud 加速器的组件包：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL <span class="symbol">https:</span>/<span class="regexp">/get.daocloud.io/daomonit</span><span class="regexp">/install.sh | sh -s d0312f829e9807ee0bf157******</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动组件包,会在「安装主机监控程序」的 DaoCloud 控制台页面下方显示一台已经接入的主机。<br><img src="/images/daoshell.png" alt=""></p>
</li>
<li>执行<code>Dao Pull</code>命令,高速下载<code>Docker Hub</code>镜像文件<br>这台 Docker 主机已经被接入 DaoCloud 平台，用户可以在 DaoCloud 控制台的「我的集群」页面发现这台主机，可以执行管理和部署应用的操作。</li>
</ol>
<h3 id="从Docker-Hub-仓库中获取一个镜像"><a href="#从Docker-Hub-仓库中获取一个镜像" class="headerlink" title="从Docker Hub 仓库中获取一个镜像"></a>从Docker Hub 仓库中获取一个镜像</h3><hr>
<p>Docker 使用类似 git 的方式管理镜像。通过基本的镜像可以定制创建出来不同种应用的 Docker 镜像。Docker Hub 是 Docker 官方提供的镜像中心。在这里可以很方便地找到各类应用、环境的镜像。由于 Docker 使用联合文件系统，所以镜像就像是夹心饼干一样一层层构成，相同底层的镜像可以共享。所以 Docker 还是相当节约磁盘空间的。要使用一 个镜像，需要先从远程的镜像注册中心拉取，这点非常类似 git。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull ubuntu</div></pre></td></tr></table></figure></p>
<h2 id="Docker-命令创建管理容器"><a href="#Docker-命令创建管理容器" class="headerlink" title="Docker 命令创建管理容器"></a>Docker 命令创建管理容器</h2><hr>
<h3 id="获取镜像的两种方式"><a href="#获取镜像的两种方式" class="headerlink" title="获取镜像的两种方式"></a>获取镜像的两种方式</h3><hr>
<h4 id="1-docker-pull命令"><a href="#1-docker-pull命令" class="headerlink" title="1. docker pull命令"></a>1. <code>docker pull</code>命令</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker search perfectlysoft/ubuntu</div><div class="line">docker pull perfectlysoft/ubuntu</div></pre></td></tr></table></figure>
<h4 id="2-docker-import命令"><a href="#2-docker-import命令" class="headerlink" title="2. docker import命令"></a>2. <code>docker import</code>命令</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker import myubuntu.tar.gz</div></pre></td></tr></table></figure>
<h3 id="通过镜像创建容器"><a href="#通过镜像创建容器" class="headerlink" title="通过镜像创建容器"></a>通过镜像创建容器</h3><hr>
<p>创建一个容器有两种方式：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker create 镜像名</div><div class="line">docker run   镜像名   /<span class="regexp">/立即启动容器 等价于：create + start 命令组合</span></div></pre></td></tr></table></figure></p>
<p>进入容器终端控制台如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ec72dc76502e:/# ls</div><div class="line">app  boot  etc   lib    media  opt   root  sbin  sys  usr</div><div class="line">bin  dev   home  lib64  mnt    proc  run   srv   tmp  var</div></pre></td></tr></table></figure></p>
<h4 id="docker-run-images命令"><a href="#docker-run-images命令" class="headerlink" title="docker run images命令"></a><code>docker run images</code>命令</h4><ol>
<li><p>样例1<br>执行<code>run images</code>，并将 Ubuntu 的 Shell 作为入口，进入Docker容器环境操作</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it <span class="symbol">ubuntu:</span>latest sh -c <span class="string">'/bin/bash'</span></div></pre></td></tr></table></figure>
</li>
<li><p>样例2<br>执行<code>docker start -i 容器</code>命令进入容器环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start -i 容器ID/容器名</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="从KitematicGUI进入容器环境"><a href="#从KitematicGUI进入容器环境" class="headerlink" title="从KitematicGUI进入容器环境"></a>从<code>Kitematic</code>GUI进入容器环境</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -c <span class="string">"clear &amp;&amp; docker exec -it perfectswift sh"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参数<br>-i 表示这是一个交互容器，会把当前标准输入重定向到容器的标准输入中，而不是终止程序运行<br>-t 指为这个容器分配一个终端</p>
</blockquote>
<p>这时候我们成功创建了一个 Ubuntu 的容器，并将当前终端连接为这个 Ubuntu 的 bash shell。这时候就可以愉快地使用 Ubuntu 的相关命令了。</p>
<h3 id="ps-查看容器状态"><a href="#ps-查看容器状态" class="headerlink" title="ps 查看容器状态"></a>ps 查看容器状态</h3><hr>
<p>在容器运行期间，我们可以通过 <code>docker ps</code> 命令看到所有当前正在运行的容器。<br>添加-a参数可以看到所有创建的容器：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure></p>
<h3 id="容器ID标识"><a href="#容器ID标识" class="headerlink" title="容器ID标识"></a>容器ID标识</h3><hr>
<p>每个容器都有一个唯一的 ID 标识，通过 ID 可以对这个容器进行管理和操作。在创建容器时，我们可以通过 –name 参数指定一个容器名称，如果没有指定系统将会分配一个，就像这里的「trusting_morse」。</p>
<h3 id="启动-退出-移除容器"><a href="#启动-退出-移除容器" class="headerlink" title="启动/退出/移除容器"></a>启动/退出/移除容器</h3><hr>
<p>启动：<code>start</code><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start -i trusting_morse</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：每次执行 docker run 命令都会创建新的容器，建议一次创建后，使用 docker start/stop 来启动和停用容器。</p>
</blockquote>
<p>退出：<br>按 <code>Ctrl+D</code> 退出</p>
<p>移除：<code>rm</code>ID/name<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm [CONTAINER ID/NAMES]</div></pre></td></tr></table></figure></p>
<p>重命名：<code>rename</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rename 容器ID newName</div></pre></td></tr></table></figure></p>
<h2 id="创建管理镜像"><a href="#创建管理镜像" class="headerlink" title="创建管理镜像"></a>创建管理镜像</h2><hr>
<p>Docker 强大的威力在于可以把自己开发的应用随同各种依赖环境一起打包、分发、运行。要创建一个新的 Docker 镜像，通常基于一个已有的 Docker 镜像来创建。<br>Docker 提供了两种方式来创建镜像：</p>
<ol>
<li>把容器创建为一个新的镜像</li>
<li>使用 Dockerfile 创建镜像。</li>
</ol>
<h3 id="将容器创建为镜像"><a href="#将容器创建为镜像" class="headerlink" title="将容器创建为镜像"></a>将容器创建为镜像</h3><hr>
<ol>
<li><p>为了创建一个新的镜像，我们先创建一个新的容器作为基底：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it <span class="symbol">ubuntu:</span>latest sh -c <span class="string">'/bin/bash'</span></div></pre></td></tr></table></figure>
</li>
<li><p>定制这个容器，例如我们可以配置 PHP 环境、将我们的项目代码部署在里面等：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install php</div><div class="line"><span class="comment"># some other opreations ...</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>当执行完操作之后，我们按 Ctrl+D 退出容器.</p>
<ol>
<li><p>获取定制后的容器ID</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div><div class="line">[root@localhost ~]# docker ps -a</div><div class="line"></div><div class="line">CONTAINER ID        IMAGE                        COMMAND                    CREATED             STATUS                      PORTS               NAMES</div><div class="line">cb2b06c83a50        ubuntu:latest                &quot;sh -c /bin/bash&quot;          7 minutes ago       Exited (0) 7 seconds ago                       trusting_morse</div></pre></td></tr></table></figure>
</li>
<li><p>执行<code>docker commit</code> 把这个容器变为一个镜像：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit cb2b06c83a50 ubuntu:myubuntu</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这时候 docker 容器会被创建为一个新的 Ubuntu 镜像，版本名称为 myubuntu。以后我们可以随时使用这个镜像来创建容器了，新的容器将自动包含上面对容器的操作。    </p>
<ol>
<li><p>打包/发布镜像</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker save -o myubuntu.tar.gz <span class="symbol">ubuntu:</span>myubuntu</div></pre></td></tr></table></figure>
</li>
<li><p>导入打包镜像</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker import myubuntu.tar.gz</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><hr>
<h4 id="通过Dockerfile创建镜像"><a href="#通过Dockerfile创建镜像" class="headerlink" title="通过Dockerfile创建镜像"></a>通过<code>Dockerfile</code>创建镜像</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build yourDir/Dockerfile</div></pre></td></tr></table></figure>
<blockquote>
<p>确保Dockerfile文件在一个目录中，否则会提示错误</p>
</blockquote>
<p>Docker Hub 提供了类似 GitHub 的镜像存管服务。一个镜像发布到 Docker Hub 不仅可以供更多人使用，而且便于镜像的版本管理。在一个企业内部可以通过自建 Docker Registry 的方式来统一管理和发布镜像。将 Docker Registry 集成到版本管理和上线发布的工作流之中，还有许多工作要做，在我整理出最佳实践后会第一时间分享。<br>使用命令行的方式创建 Docker 镜像通常难以自动化操作。在更多的时候，我们使用 Dockerfile 来创建 Docker 镜像。Dockerfile 是一个纯文本文件，它记载了从一个镜像创建另一个新镜像的步骤。撰写好 Dockerfile 文件之后，我们就可以轻而易举的使用 docker build 命令来创建镜像了。<br>Dockerfile 非常简单，仅有以下命令在 Dockerfile 中常被使用：</p>
<table>
<thead>
<tr>
<th style="text-align:right">命令</th>
<th style="text-align:right">参数</th>
<th style="text-align:right">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">#</td>
<td style="text-align:right">-</td>
<td style="text-align:right">注释说明</td>
</tr>
<tr>
<td style="text-align:right">FROM</td>
<td style="text-align:right"><image>[:<tag>]</tag></image></td>
<td style="text-align:right">从一个已有镜像创建，例如ubuntu:latest</td>
</tr>
<tr>
<td style="text-align:right">MAINTAINER</td>
<td style="text-align:right">Author <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x73;&#x6f;&#x6d;&#101;&#x2d;&#111;&#x6e;&#x65;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#109;">&#x73;&#x6f;&#x6d;&#101;&#x2d;&#111;&#x6e;&#x65;&#64;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#109;</a></td>
<td style="text-align:right">镜像作者名字，如Max Liu <a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#58;&#115;&#111;&#109;&#x65;&#x2d;&#x6f;&#110;&#101;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#109;">&#115;&#111;&#109;&#x65;&#x2d;&#x6f;&#110;&#101;&#64;&#101;&#120;&#97;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#109;</a></td>
</tr>
<tr>
<td style="text-align:right">RUN</td>
<td style="text-align:right"><cmd>或者[‘cmd1’, ‘cmd2’…]</cmd></td>
<td style="text-align:right">在镜像创建用的临时容器里执行单行命令</td>
</tr>
<tr>
<td style="text-align:right">ADD</td>
<td style="text-align:right"><src> <dest></dest></src></td>
<td style="text-align:right">将本地的<src>添加到镜像容器中的<dest>位置</dest></src></td>
</tr>
<tr>
<td style="text-align:right">VOLUME</td>
<td style="text-align:right"><path></path>或者[‘/var’, ‘home’]</td>
<td style="text-align:right">将指定的路径挂载为数据卷</td>
</tr>
<tr>
<td style="text-align:right">EXPOSE</td>
<td style="text-align:right"><port> [<port>…]</port></port></td>
<td style="text-align:right">将指定的端口暴露给主机</td>
</tr>
<tr>
<td style="text-align:right">ENV</td>
<td style="text-align:right"><key> <value> 或者 <key> = <value></value></key></value></key></td>
<td style="text-align:right">指定环境变量值</td>
</tr>
<tr>
<td style="text-align:right">CMD</td>
<td style="text-align:right">[“executable”,”param1”,”param2”]</td>
<td style="text-align:right">容器启动时默认执行的命令。注意一个Dockerfile中只有最后一个CMD生效。</td>
</tr>
<tr>
<td style="text-align:right">ENTRYPOINT</td>
<td style="text-align:right">[“executable”, “param1”, “param2”]</td>
<td style="text-align:right">容器的进入点</td>
</tr>
</tbody>
</table>
<h4 id="配置Dockerfile"><a href="#配置Dockerfile" class="headerlink" title="配置Dockerfile"></a>配置Dockerfile</h4><hr>
<p>下面是一个 Dockerfile 的例子：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is a comment</span></div><div class="line">FROM <span class="symbol">ubuntu:</span><span class="number">14.04</span></div><div class="line">MAINTAINER Kate Smith &lt;ksmith@example.com&gt;</div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y ruby ruby-dev</div><div class="line">RUN gem install sinatra</div></pre></td></tr></table></figure></p>
<h5 id="CMD命令"><a href="#CMD命令" class="headerlink" title="CMD命令"></a><code>CMD</code>命令</h5><hr>
<p><code>CMD</code>: 命令可用指定 Docker 容器启动时默认的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it ubuntu:latest sh -c &apos;/bin/bash&apos;</div></pre></td></tr></table></figure></p>
<p>其中 <code>sh -c &#39;/bin/bash&#39;</code> 就是手工指定的<code>CMD</code>,否则容器将会使用默认 <code>CMD</code> 指定的命令启动。</p>
<h5 id="ENTRYPOINT命令"><a href="#ENTRYPOINT命令" class="headerlink" title="ENTRYPOINT命令"></a><code>ENTRYPOINT</code>命令</h5><hr>
<p>用来指定可执行文件、Shell 脚本，同时会并把启动参数或 CMD 指定的默认值，当作附加参数传递给 执行文件、Shell 脚本。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ENTRYPOINT [<span class="string">'/usr/bin/mysql'</span>]</div><div class="line">CMD [<span class="string">'-h 192.168.100.128'</span>, <span class="string">'-p'</span>]</div></pre></td></tr></table></figure></p>
<p>执行mysql启动程序，连接<code>192.168.100.128</code> 主机,也可以通过指定参数，来连接别的主机。</p>
<p>因此，我们在使用 Dockerfile 创建文件的时候，可以创建一个 entrypoint.sh 脚本，作为系统入口。在这个文件里面，我们可以进行一些基础性的自举操作，比如检查环境变量，根据需要初始化数据库等等。下面两个文件是我在日常工作的项目中添加的 Dockerfile 和 entrypoint.sh，仅供参考：<br><a href="https://github.com/starlight36/SimpleOA/blob/master/Dockerfile" target="_blank" rel="external">https://github.com/starlight36/SimpleOA/blob/master/Dockerfile</a><br><a href="https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh" target="_blank" rel="external">https://github.com/starlight36/SimpleOA/blob/master/docker-entrypoint.sh</a><br>在准备好 Dockerfile 之后，我们就可以创建镜像了：</p>
<h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t starlight36/simpleoa .</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Docker-for-Mac&quot;&gt;&lt;a href=&quot;#安装Docker-for-Mac&quot; class=&quot;headerlink&quot; title=&quot;安装Docker for Mac&quot;&gt;&lt;/a&gt;安装&lt;a href=&quot;https://www.docker.com/products/docker#/mac&quot;&gt;Docker for Mac&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Mac上运行Docker。系统要求，OS X 10.10.3 或者更高版本，至少4G内存，4.3.30版本以前的VirtualBox会与Docker for Mac产生冲突，所以请卸载旧版本的VitrualBox。&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;echo &#39;下载dmg...&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;curl -o Docker.dmg https://dn-dao-github-mirror.qbox.me/docker/install/mac/Docker.dmg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#安装Docker.dmg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;MOUNTDIR=$(echo `hdiutil mount Docker.dmg | tail -1 \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| awk &#39;&amp;#123;$1=$2=&quot;&quot;; print $0&amp;#125;&#39;` | xargs -0 echo) \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;&amp;amp; cd $&amp;#123;MOUNTDIR&amp;#125; &amp;amp;&amp;amp; cp -R Docker.app /Applications/ \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;amp;&amp;amp; open /Applications/Docker.app&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置-Docker-加速器镜像源&quot;&gt;&lt;a href=&quot;#配置-Docker-加速器镜像源&quot; class=&quot;headerlink&quot; title=&quot;配置 Docker 加速器镜像源&quot;&gt;&lt;/a&gt;配置 Docker 加速器镜像源&lt;/h3&gt;&lt;p&gt;右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入下面的镜像地址:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://142*****.m.daocloud.io&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击 Apply &amp;amp; Restart 按钮使设置生效。&lt;/p&gt;
&lt;h3 id=&quot;安装主机监控程序加速器&quot;&gt;&lt;a href=&quot;#安装主机监控程序加速器&quot; class=&quot;headerlink&quot; title=&quot;安装主机监控程序加速器&quot;&gt;&lt;/a&gt;安装主机监控程序加速器&lt;/h3&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;登录到 &lt;code&gt;DaoCloud 控制台&lt;/code&gt;，点击「我的集群」按钮，在「接入自有主机」界面，点击 Mac 按钮。&lt;/li&gt;
&lt;li&gt;安装&lt;a href=&quot;https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg&quot;&gt;DockerToolbox&lt;/a&gt;，是一个完整的开发组件，通过安装和配置&lt;code&gt;DaoCloud加速器 v2&lt;/code&gt;，提升下载 &lt;code&gt;Docker Hub 镜像&lt;/code&gt;的速度。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//下载pkg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;curl -o DockerToolbox.pkg https://github.com/docker/toolbox/releases/download/v1.12.5/DockerToolbox-1.12.5.pkg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//安装pkg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo installer -pkg DockerToolbox.pkg -target /&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="dockerer" scheme="https://huos3203.github.io/categories/dockerer/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="搭建" scheme="https://huos3203.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hackmd使用</title>
    <link href="https://huos3203.github.io/2016/12/21/hackmd%E4%BD%BF%E7%94%A8/"/>
    <id>https://huos3203.github.io/2016/12/21/hackmd使用/</id>
    <published>2016-12-21T02:49:32.000Z</published>
    <updated>2017-01-12T08:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="編輯"><a href="#編輯" class="headerlink" title="編輯"></a>編輯</h1><h2 id="快速鍵"><a href="#快速鍵" class="headerlink" title="快速鍵"></a>快速鍵</h2><p>跟又快又方便的Sublime text很像</p>
<blockquote>
<p>更多訊息請至 <a href="https://codemirror.net/demo/sublime.html" target="_blank" rel="external">這裡</a></p>
</blockquote>
<h2 id="自動完成"><a href="#自動完成" class="headerlink" title="自動完成"></a>自動完成</h2><p>提供完整的 Markdown 自動完成與提示</p>
<ul>
<li>表情符號：輸入 <code>:</code> 顯示提示</li>
<li>程式碼區塊：輸入 <code>3个</code> ` 加上一個字元 顯示提示 </li>
<li>標頭：輸入 <code>#</code> 顯示提示</li>
<li>參考：輸入 <code>[]</code> 顯示提示</li>
<li>外部：輸入 <code>{}</code> 顯示提示</li>
<li>圖片：輸入 <code>!</code> 顯示提示</li>
</ul>
<h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><p>會使用 <strong>第一個第一級標頭</strong> 作為筆記標題</p>
<h2 id="標籤"><a href="#標籤" class="headerlink" title="標籤"></a>標籤</h2><p>如同以下方式來使用標籤，它們會顯示在您的 <strong>歷史紀錄</strong></p>
<h6 id="tags-功能-酷-更新"><a href="#tags-功能-酷-更新" class="headerlink" title="tags: 功能 酷 更新"></a>tags: <code>功能</code> <code>酷</code> <code>更新</code></h6><h2 id="YAML-metadata"><a href="#YAML-metadata" class="headerlink" title="YAML metadata"></a><a href="./yaml-metadata">YAML metadata</a></h2><p>提供描述筆記的資訊，以進階設定瀏覽行為，詳細請至上連結</p>
<ul>
<li>robots: 設定網路機器人 meta</li>
<li>lang: 設定瀏覽器顯示語言</li>
<li>dir: 設定文字方向</li>
<li>breaks: 設定是否使用分行</li>
<li>mathjax: 設定是否使用 mathjax</li>
</ul>
<h2 id="表情符號"><a href="#表情符號" class="headerlink" title="表情符號"></a>表情符號</h2><p>您可以像是這樣使用表情符號 :smile: :smiley: :cry: :wink:</p>
<blockquote>
<p>完整的表情符號列表 <a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="external">在這裡</a></p>
</blockquote>
<h2 id="待辦清單"><a href="#待辦清單" class="headerlink" title="待辦清單"></a>待辦清單</h2><ul>
<li>[ ] 待辦<ul>
<li>[x] 買些沙拉</li>
<li>[x] 刷牙</li>
<li>[ ] 喝水<a id="more"></a>
<h2 id="程式碼區塊"><a href="#程式碼區塊" class="headerlink" title="程式碼區塊"></a>程式碼區塊</h2>我們支援非常多程式語言，使用自動完成來看看有些什麼<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var s = &quot;JavaScript syntax highlighting&quot;;</div><div class="line">alert(s);</div><div class="line">function $initHighlight(block, cls) &#123;</div><div class="line">  try &#123;</div><div class="line">    if (cls.search(/\bno\-highlight\b/) != -1)</div><div class="line">      return process(block, true, 0x0F) + </div><div class="line">             &apos; class=&quot;&quot;&apos;;</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    /* handle exception */</div><div class="line">  &#125;</div><div class="line">  for (var i = 0 / 2; i &lt; classes.length; i++) &#123;</div><div class="line">    if (checkCondition(classes[i]) === undefined)</div><div class="line">      return /\d+[\s/]/g;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>如果想要 <strong>行號</strong>，在表明程式語言之後輸入 <code>=</code><br>您也可以指定開始行號，如下所示，行號從101開始</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var s = &quot;JavaScript syntax highlighting&quot;;</div><div class="line">alert(s);</div><div class="line">function $initHighlight(block, cls) &#123;</div><div class="line">  try &#123;</div><div class="line">    if (cls.search(/\bno\-highlight\b/) != -1)</div><div class="line">      return process(block, true, 0x0F) + </div><div class="line">             &apos; class=&quot;&quot;&apos;;</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    /* handle exception */</div><div class="line">  &#125;</div><div class="line">  for (var i = 0 / 2; i &lt; classes.length; i++) &#123;</div><div class="line">    if (checkCondition(classes[i]) === undefined)</div><div class="line">      return /\d+[\s/]/g;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>或是可以接續上一個程式碼區塊的行號，使用 <code>=+</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s = &quot;JavaScript syntax highlighting&quot;;</div><div class="line">alert(s);</div></pre></td></tr></table></figure>
<h2 id="引用區塊標籤"><a href="#引用區塊標籤" class="headerlink" title="引用區塊標籤"></a>引用區塊標籤</h2><blockquote>
<p>您可以使用以下語法，表明自己的 <strong>姓名、時間與顏色</strong> 並與其他的引用區塊做區別<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 9:59 PM] [color=#907bf7]</p>
<blockquote>
<p>也支援巢狀引用區塊喔！<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 10:00 PM] [color=red]</p>
</blockquote>
</blockquote>
<h2 id="外部"><a href="#外部" class="headerlink" title="外部"></a>外部</h2><h3 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h3><div class="video-container"><iframe src="//www.youtube.com/embed/1G4isv_Fylg" frameborder="0" allowfullscreen></iframe></div>
<h3 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h3><div class="video-container"><iframe src="//player.vimeo.com/video/124148255" frameborder="0" allowfullscreen></iframe></div>
<h3 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h3><script src="//gist.github.com/schacon/4277.js"></script>
<h3 id="SlideShare"><a href="#SlideShare" class="headerlink" title="SlideShare"></a>SlideShare</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;%slideshare briansolis/<span class="number">26</span>-disruptive-technology-trends<span class="number">-2016</span><span class="number">-2018</span><span class="number">-56796196</span> %&#125;</div></pre></td></tr></table></figure>
<h3 id="Speakerdeck"><a href="#Speakerdeck" class="headerlink" title="Speakerdeck"></a>Speakerdeck</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;%speakerdeck sugarenia/xxlcss-how-to-scale-css-and-keep-your-sanity %&#125;</div></pre></td></tr></table></figure>
<h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p><strong>注意：請使用 https 的網址，否則可能會被您的瀏覽器阻擋載入</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;%pdf https:<span class="comment">//papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf %&#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>您可以使用 <strong>MathJax</strong> 語法 來產生 <em>LaTeX</em> 數學表達式，如同 <a href="http://math.stackexchange.com/" target="_blank" rel="external">math.stackexchange.com</a>：</p>
<p>The <em>Gamma function</em> satisfying $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$ is via the Euler integral</p>
<p>$$<br>x = {-b \pm \sqrt{b^2-4ac} \over 2a}.<br>$$</p>
<p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.<br>$$</p>
<blockquote>
<p>更多關於 <strong>LaTeX</strong> 數學表達式 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">請至這裡</a></p>
</blockquote>
<h2 id="UML-圖表"><a href="#UML-圖表" class="headerlink" title="UML 圖表"></a>UML 圖表</h2><h3 id="循序圖"><a href="#循序圖" class="headerlink" title="循序圖"></a>循序圖</h3><p>您可以像是以下使用循序圖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">艾莉絲-&gt;包柏: 哈摟，你好嗎？</div><div class="line">Note right of 包柏: 包柏思考中</div><div class="line">包柏--&gt;艾莉絲: 我很好，謝謝！</div><div class="line">Note left of 艾莉絲: 艾莉絲回應</div><div class="line">艾莉絲-&gt;包柏: 最近過得怎樣？</div></pre></td></tr></table></figure>
<h3 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h3><p>您可以像是以下使用流程圖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 開始</div><div class="line">e=&gt;end: 結束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">op2=&gt;operation: 啦啦啦</div><div class="line">cond=&gt;condition: 是或否？</div><div class="line"></div><div class="line">st-&gt;op-&gt;op2-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op2</div></pre></td></tr></table></figure></p>
<h3 id="Graphviz"><a href="#Graphviz" class="headerlink" title="Graphviz"></a>Graphviz</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">digraph hierarchy &#123;</div><div class="line"></div><div class="line">                nodesep=1.0 // increases the separation between nodes</div><div class="line">                </div><div class="line">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</div><div class="line">                edge [color=Blue, style=dashed] //All the lines look like this</div><div class="line"></div><div class="line">                Headteacher-&gt;&#123;Deputy1 Deputy2 BusinessManager&#125;</div><div class="line">                Deputy1-&gt;&#123;Teacher1 Teacher2&#125;</div><div class="line">                BusinessManager-&gt;ITManager</div><div class="line">                &#123;rank=same;ITManager Teacher1 Teacher2&#125;  // Put them on the same level</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gantt</div><div class="line">    title A Gantt Diagram</div><div class="line"></div><div class="line">    section Section</div><div class="line">    A task           :a1, 2014-01-01, 30d</div><div class="line">    Another task     :after a1  , 20d</div><div class="line">    section Another</div><div class="line">    Task in sec      :2014-01-12  , 12d</div><div class="line">    anther task      : 24d</div></pre></td></tr></table></figure>
<blockquote>
<p>更多關於 <strong>循序圖</strong> 語法 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">在這裡</a>.<br>更多關於 <strong>流程圖</strong> 語法 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">在這裡</a>.<br>更多關於 <strong>Graphviz</strong> 語法 <a href="http://www.tonyballantyne.com/graphs.html" target="_blank" rel="external">在這裡</a><br>更多關於 <strong>Mermaid</strong> 語法 <a href="http://knsv.github.io/mermaid" target="_blank" rel="external">在這裡</a></p>
</blockquote>
<h2 id="警告區塊"><a href="#警告區塊" class="headerlink" title="警告區塊"></a>警告區塊</h2><p>:::success<br>耶 :tada:<br>:::</p>
<p>:::info<br>這是訊息 :mega:<br>:::</p>
<p>:::warning<br>注意 :zap:<br>:::</p>
<p>:::danger<br>喔不 :fire:<br>:::</p>
<h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h3 id="標頭"><a href="#標頭" class="headerlink" title="標頭"></a>標頭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># h1 標頭</div><div class="line">## h2 標頭</div><div class="line">### h3 標頭</div><div class="line">#### h4 標頭</div><div class="line">##### h5 標頭</div><div class="line">###### h6 標頭</div></pre></td></tr></table></figure>
<h3 id="水平分隔線"><a href="#水平分隔線" class="headerlink" title="水平分隔線"></a>水平分隔線</h3><hr>
<hr>
<hr>
<h3 id="字形替換"><a href="#字形替換" class="headerlink" title="字形替換"></a>字形替換</h3><p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p>
<p>測試.. 測試… 測試….. 測試?….. 測試!….</p>
<p>!!!!!! ???? ,,</p>
<p>Remarkable – awesome</p>
<p>“Smartypants, 雙引號”</p>
<p>‘Smartypants, 單引號’</p>
<h3 id="強調"><a href="#強調" class="headerlink" title="強調"></a>強調</h3><p><strong>這是粗體文字</strong></p>
<p><strong>這是粗體文字</strong></p>
<p><em>這是斜體文字</em></p>
<p><em>這是斜體文字</em></p>
<p><del>這是刪除文字</del></p>
<p>上標： 19^th^</p>
<p>下標： H~2~O</p>
<p>++這是底線文字++</p>
<p>==這是標記文字==</p>
<h3 id="引用區塊"><a href="#引用區塊" class="headerlink" title="引用區塊"></a>引用區塊</h3><blockquote>
<p>引用區塊也可以是巢狀的喔…</p>
<blockquote>
<p>…可以多層次的使用…</p>
<blockquote>
<p>…或是用空白隔開 </p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h3><h4 id="項目"><a href="#項目" class="headerlink" title="項目"></a>項目</h4><ul>
<li>在行開頭使用 <code>+</code> <code>-</code> 或是 <code>*</code> 來建立清單</li>
<li>空兩個空白就可以產生子清單<ul>
<li>當清單標記使用的字元不同，會強制建立新的清單<ul>
<li>Ac tristique libero volutpat at</li>
</ul>
<ul>
<li>Facilisis in pretium nisl aliquet</li>
</ul>
<ul>
<li>Nulla volutpat aliquam velit</li>
</ul>
</li>
</ul>
</li>
<li>非常簡單！</li>
</ul>
<h4 id="編號"><a href="#編號" class="headerlink" title="編號"></a>編號</h4><ol>
<li>Lorem ipsum dolor sit amet</li>
<li>Consectetur adipiscing elit</li>
<li>Integer molestie lorem at massa</li>
</ol>
<ol>
<li>您可以逐次增加項目數字…</li>
<li>…或是全部都使用 <code>1.</code></li>
<li>feafw</li>
<li>332</li>
<li>242</li>
<li>2552</li>
<li>e2</li>
</ol>
<p>從其他範圍開始編號清單</p>
<ol>
<li>foo</li>
<li>bar</li>
</ol>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>行內 <code>程式碼</code></p>
<p>縮排程式碼</p>
<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre><p>程式碼區塊</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sample text here...</div></pre></td></tr></table></figure>
<p>語法標色</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">bar</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> bar++;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">5</span>));</div></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th>選項</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>向右對齊</p>
<table>
<thead>
<tr>
<th style="text-align:right">選項</th>
<th style="text-align:right">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">data</td>
<td style="text-align:right">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:right">engine</td>
<td style="text-align:right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:right">ext</td>
<td style="text-align:right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>向左對齊</p>
<table>
<thead>
<tr>
<th style="text-align:left">選項</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">data</td>
<td style="text-align:left">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:left">engine</td>
<td style="text-align:left">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:left">ext</td>
<td style="text-align:left">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>置中對齊</p>
<table>
<thead>
<tr>
<th style="text-align:center">選項</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">data</td>
<td style="text-align:center">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:center">engine</td>
<td style="text-align:center">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:center">ext</td>
<td style="text-align:center">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h3 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h3><p><a href="http://dev.nodeca.com" target="_blank" rel="external">連結文字</a><br><a href="http://nodeca.github.io/pica/demo/" title="標題文字！" target="_blank" rel="external">加上標題的連結文字</a><br>自動轉換連結 <a href="https://github.com/nodeca/pica" target="_blank" rel="external">https://github.com/nodeca/pica</a></p>
<h3 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h3><p><img src="https://octodex.github.com/images/minion.png" alt="Minion"><br><img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat"><br>如同連結一般，圖片也可以用註腳語法<br><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat"><br>使用參考，可以在稍後的文件中再定義圖片網址</p>
<p><img src="https://octodex.github.com/images/minion.png =200x200" alt="Minion"><br>使用指定的大小顯示圖片</p>
<h3 id="註腳"><a href="#註腳" class="headerlink" title="註腳"></a>註腳</h3><p>註腳 1 連結[^first].<br>註腳 2 連結[^second].<br>行內註腳^[行內註腳的文字] 定義<br>重複的註腳參考[^second].</p>
<p>[^first]: 註腳 <strong>也可以標記</strong><br>    還可以有很多段落<br>[^second]: 註腳 文字</p>
<h3 id="定義清單"><a href="#定義清單" class="headerlink" title="定義清單"></a>定義清單</h3><p>名詞 1</p>
<p>:   定義 1 快速連續項目</p>
<p>名詞 2 加上 <em>行內標記</em></p>
<p>:   定義 2</p>
<pre><code>    { 這些程式碼屬於 定義 2 的一部分 }

定義 2 的第三段落
</code></pre><p><em>緊密樣式：</em></p>
<p>名詞 1<br>  ~ 定義 1</p>
<p>名詞 2<br>  ~ 定義 2a<br>  ~ 定義 2b</p>
<h3 id="縮寫"><a href="#縮寫" class="headerlink" title="縮寫"></a>縮寫</h3><p>這是 HTML 的縮寫範例<br>它會轉換 “HTML”，但是縮寫旁邊其他的部分，例如：”xxxHTMLyyy”，不受影響</p>
<p>*[HTML]: Hyper Text Markup Language</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;編輯&quot;&gt;&lt;a href=&quot;#編輯&quot; class=&quot;headerlink&quot; title=&quot;編輯&quot;&gt;&lt;/a&gt;編輯&lt;/h1&gt;&lt;h2 id=&quot;快速鍵&quot;&gt;&lt;a href=&quot;#快速鍵&quot; class=&quot;headerlink&quot; title=&quot;快速鍵&quot;&gt;&lt;/a&gt;快速鍵&lt;/h2&gt;&lt;p&gt;跟又快又方便的Sublime text很像&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更多訊息請至 &lt;a href=&quot;https://codemirror.net/demo/sublime.html&quot;&gt;這裡&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;自動完成&quot;&gt;&lt;a href=&quot;#自動完成&quot; class=&quot;headerlink&quot; title=&quot;自動完成&quot;&gt;&lt;/a&gt;自動完成&lt;/h2&gt;&lt;p&gt;提供完整的 Markdown 自動完成與提示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表情符號：輸入 &lt;code&gt;:&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;li&gt;程式碼區塊：輸入 &lt;code&gt;3个&lt;/code&gt; ` 加上一個字元 顯示提示 &lt;/li&gt;
&lt;li&gt;標頭：輸入 &lt;code&gt;#&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;li&gt;參考：輸入 &lt;code&gt;[]&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;li&gt;外部：輸入 &lt;code&gt;{}&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;li&gt;圖片：輸入 &lt;code&gt;!&lt;/code&gt; 顯示提示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;標題&quot;&gt;&lt;a href=&quot;#標題&quot; class=&quot;headerlink&quot; title=&quot;標題&quot;&gt;&lt;/a&gt;標題&lt;/h2&gt;&lt;p&gt;會使用 &lt;strong&gt;第一個第一級標頭&lt;/strong&gt; 作為筆記標題&lt;/p&gt;
&lt;h2 id=&quot;標籤&quot;&gt;&lt;a href=&quot;#標籤&quot; class=&quot;headerlink&quot; title=&quot;標籤&quot;&gt;&lt;/a&gt;標籤&lt;/h2&gt;&lt;p&gt;如同以下方式來使用標籤，它們會顯示在您的 &lt;strong&gt;歷史紀錄&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&quot;tags-功能-酷-更新&quot;&gt;&lt;a href=&quot;#tags-功能-酷-更新&quot; class=&quot;headerlink&quot; title=&quot;tags: 功能 酷 更新&quot;&gt;&lt;/a&gt;tags: &lt;code&gt;功能&lt;/code&gt; &lt;code&gt;酷&lt;/code&gt; &lt;code&gt;更新&lt;/code&gt;&lt;/h6&gt;&lt;h2 id=&quot;YAML-metadata&quot;&gt;&lt;a href=&quot;#YAML-metadata&quot; class=&quot;headerlink&quot; title=&quot;YAML metadata&quot;&gt;&lt;/a&gt;&lt;a href=&quot;./yaml-metadata&quot;&gt;YAML metadata&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;提供描述筆記的資訊，以進階設定瀏覽行為，詳細請至上連結&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;robots: 設定網路機器人 meta&lt;/li&gt;
&lt;li&gt;lang: 設定瀏覽器顯示語言&lt;/li&gt;
&lt;li&gt;dir: 設定文字方向&lt;/li&gt;
&lt;li&gt;breaks: 設定是否使用分行&lt;/li&gt;
&lt;li&gt;mathjax: 設定是否使用 mathjax&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;表情符號&quot;&gt;&lt;a href=&quot;#表情符號&quot; class=&quot;headerlink&quot; title=&quot;表情符號&quot;&gt;&lt;/a&gt;表情符號&lt;/h2&gt;&lt;p&gt;您可以像是這樣使用表情符號 :smile: :smiley: :cry: :wink:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完整的表情符號列表 &lt;a href=&quot;http://www.emoji-cheat-sheet.com/&quot;&gt;在這裡&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;待辦清單&quot;&gt;&lt;a href=&quot;#待辦清單&quot; class=&quot;headerlink&quot; title=&quot;待辦清單&quot;&gt;&lt;/a&gt;待辦清單&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;[ ] 待辦&lt;ul&gt;
&lt;li&gt;[x] 買些沙拉&lt;/li&gt;
&lt;li&gt;[x] 刷牙&lt;/li&gt;
&lt;li&gt;[ ] 喝水
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Hello World</title>
    <link href="https://huos3203.github.io/2016/12/20/Hexo-hello-world/"/>
    <id>https://huos3203.github.io/2016/12/20/Hexo-hello-world/</id>
    <published>2016-12-20T10:02:13.000Z</published>
    <updated>2017-01-13T08:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft <span class="string">"草稿名"</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish <span class="string">"草稿名"</span>  <span class="comment">#Moves a draft post from _drafts to _posts folder.</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>在我们开始之前,你必须在 <code>_config.yml</code> 修改设置。一个有效的部署设置必须有 <code>type</code> 字段。例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    <span class="built_in">type</span>: git</div></pre></td></tr></table></figure></p>
<p>你可用同时部署到多个type，Hexo将依次执行每个部署。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    - <span class="built_in">type</span>: git</div><div class="line">      repo:</div><div class="line">    - <span class="built_in">type</span>: heroku</div><div class="line">      repo:</div></pre></td></tr></table></figure></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><h4 id="安装同步到git-插件"><a href="#安装同步到git-插件" class="headerlink" title="安装同步到git 插件"></a>安装同步到git 插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>编辑<code>_config.yml</code>设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    <span class="built_in">type</span>: git</div><div class="line">    repo: &lt;repository url&gt;</div><div class="line">    branch: [branch]</div><div class="line">    message: [message]</div></pre></td></tr></table></figure></p>
<h4 id="安装生成RSS支持插件"><a href="#安装生成RSS支持插件" class="headerlink" title="安装生成RSS支持插件"></a>安装生成RSS支持插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install  hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>编辑<code>_config.yml</code>设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">    <span class="built_in">type</span>: atom</div><div class="line">    path: atom.xml</div><div class="line">    <span class="built_in">limit</span>: 20</div><div class="line">    hub:</div></pre></td></tr></table></figure></p>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo标签插件</title>
    <link href="https://huos3203.github.io/2016/12/20/Hexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/"/>
    <id>https://huos3203.github.io/2016/12/20/Hexo标签插件/</id>
    <published>2016-12-20T10:01:13.000Z</published>
    <updated>2017-01-12T08:45:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>
<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><hr>
<p>在文章中插入引言，可包含作者、来源和标题。</p>
<h3 id="别号：-quote"><a href="#别号：-quote" class="headerlink" title="别号： quote"></a>别号： quote</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class="line">content</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><hr>
<h5 id="无参普通blockquote"><a href="#无参普通blockquote" class="headerlink" title="无参普通blockquote"></a>无参普通blockquote</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote %&#125;</div><div class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<a id="more"></a>
<h5 id="引用书上的句子"><a href="#引用书上的句子" class="headerlink" title="引用书上的句子"></a>引用书上的句子</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</div><div class="line">Do not just seek happiness <span class="keyword">for</span> yourself. Seek happiness <span class="keyword">for</span> all. Through kindness. Through mercy.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>boyer huo </strong><cite>Wide Awake</cite></footer></blockquote>
<h5 id="引用-Twitter"><a href="#引用-Twitter" class="headerlink" title="引用 Twitter"></a>引用 Twitter</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote @DevDocs https:<span class="comment">//twitter.com/devdocs/status/356095192085962752 %&#125;</span></div><div class="line">NEW: DevDocs now comes <span class="keyword">with</span> syntax highlighting. http:<span class="comment">//devdocs.io</span></div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="external">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<h5 id="引用网络上的文章"><a href="#引用网络上的文章" class="headerlink" title="引用网络上的文章"></a>引用网络上的文章</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote Seth Godin http:<span class="comment">//sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span></div><div class="line">Every interaction is both precious and an opportunity to delight.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><hr>
<p>在文章中插入代码。</p>
<h3 id="别名-code"><a href="#别名-code" class="headerlink" title="别名:code"></a>别名:code</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><hr>
<h5 id="普通的代码块"><a href="#普通的代码块" class="headerlink" title="普通的代码块"></a>普通的代码块</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock %&#125;</div><div class="line">alert(<span class="string">'Hello World!'</span>);</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure>
<h5 id="指定语言"><a href="#指定语言" class="headerlink" title="指定语言"></a>指定语言</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock lang:objc %&#125;</div><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div></pre></td></tr></table></figure>
<h5 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock <span class="built_in">Array</span>.map %&#125;</div><div class="line">array.map(callback[, thisArg])</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Array.map</div><div class="line">array.map(callback[, thisArg])</div></pre></td></tr></table></figure>
<h5 id="附加说明和网址"><a href="#附加说明和网址" class="headerlink" title="附加说明和网址"></a>附加说明和网址</h5><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock _.compact http:<span class="comment">//underscorejs.org/#compact Underscore.js %&#125;</span></div><div class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);</div><div class="line">=&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="external">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_.compactUnderscore.js</div><div class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class="line">=&gt; [1, 2, 3]</div></pre></td></tr></table></figure>
<h2 id="反引号代码块-MD语法"><a href="#反引号代码块-MD语法" class="headerlink" title="反引号代码块 (MD语法)"></a>反引号代码块 (MD语法)</h2><hr>
<h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="行内代码块"><a href="#行内代码块" class="headerlink" title="行内代码块"></a>行内代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">行内 <span class="code">`code 块 `</span></div></pre></td></tr></table></figure>
<h4 id="缩进代码块"><a href="#缩进代码块" class="headerlink" title="缩进代码块"></a>缩进代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Some comments</div><div class="line">line 1 of code</div><div class="line">line 2 of code</div><div class="line">line 3 of code</div></pre></td></tr></table></figure>
<h4 id="多行代码块"><a href="#多行代码块" class="headerlink" title="多行代码块"></a>多行代码块</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="code">``` [language] [title] [url] [link text] </span></div><div class="line"></div><div class="line">    代码块</div><div class="line"></div><div class="line"> `` `</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><hr>
<h3 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="默认左对齐"><a href="#默认左对齐" class="headerlink" title="默认左对齐"></a>默认左对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|-------|-------|----------|</div><div class="line">|文本内容 |文本内容| 文本内容  |</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>layout</td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td>comments</td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td>tags</td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>categories</td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网址</td>
</tr>
</tbody>
</table>
<h4 id="向右对齐"><a href="#向右对齐" class="headerlink" title="向右对齐"></a>向右对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|-------:|-------:|-------:|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:right">三种布局</th>
<th style="text-align:right">路径:(储存到路径文件夹)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">post</td>
<td style="text-align:right">source/_posts</td>
</tr>
<tr>
<td style="text-align:right">page</td>
<td style="text-align:right">source</td>
</tr>
<tr>
<td style="text-align:right">draft</td>
<td style="text-align:right">source/_drafts</td>
</tr>
</tbody>
</table>
<h4 id="向左对齐"><a href="#向左对齐" class="headerlink" title="向左对齐"></a>向左对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|:------|:------|:------|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">日期变量</th>
<th style="text-align:left">描述:（可以通过日期来管理文章）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">:title</td>
<td style="text-align:left">标题（小写，空格将会被替换为短杠）</td>
</tr>
<tr>
<td style="text-align:left">:year</td>
<td style="text-align:left">建立的年份，比如， 2015</td>
</tr>
<tr>
<td style="text-align:left">:month</td>
<td style="text-align:left">建立的月份（有前导零），比如， 04</td>
</tr>
<tr>
<td style="text-align:left">:i_month</td>
<td style="text-align:left">建立的月份（无前导零），比如， 4</td>
</tr>
<tr>
<td style="text-align:left">:day</td>
<td style="text-align:left">建立的日期（有前导零），比如， 07</td>
</tr>
<tr>
<td style="text-align:left">:i_day</td>
<td style="text-align:left">建立的日期（无前导零），比如， 7</td>
</tr>
</tbody>
</table>
<h4 id="居中对齐"><a href="#居中对齐" class="headerlink" title="居中对齐"></a>居中对齐</h4><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">|参数|描述|默认值|</div><div class="line">|:------:|:------:|:------:|</div><div class="line">| 文本内容 | 文本内容 | 文本内容|</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout</td>
<td style="text-align:center">布局</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">文件建立日期</td>
</tr>
</tbody>
</table>
<h2 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h2><hr>
<p>在文章中插入 Pull quote。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% pullquote [class] %&#125;</div><div class="line">content</div><div class="line">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><hr>
<p>在文章中嵌入 jsFiddle。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><hr>
<p>在文章中嵌入 Gist。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% gist gist_id [filename] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><hr>
<p>在文章中插入 iframe。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe url [width] [height] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><hr>
<h3 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="Hexo语法"><a href="#Hexo语法" class="headerlink" title="Hexo语法"></a>Hexo语法</h4><hr>
<p>在文章中插入指定大小的图片。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="MD语法"><a href="#MD语法" class="headerlink" title="MD语法"></a>MD语法</h4><hr>
<h5 id="原图-toolTip"><a href="#原图-toolTip" class="headerlink" title="原图+toolTip"></a>原图+toolTip</h5><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![boyer logo](http://boyers.coding.me/img/logo.png &quot;这是我的logo图片&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://boyers.coding.me/img/logo.png" alt="boyer logo" title="这是我的logo图片"></p>
<h5 id="注脚语法"><a href="#注脚语法" class="headerlink" title="注脚语法"></a>注脚语法</h5><hr>
<p>可以在稍後的文件中再定义图片地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![boyer logo][logo]</div><div class="line">[logo]: http://boyers.coding.me/img/logo.png  &quot;这是我的logo图片&quot;</div></pre></td></tr></table></figure></p>
<p><img src="http://boyers.coding.me/img/logo.png" alt="boyer logo" title="这是我的logo图片"></p>
<h5 id="指定图片大小"><a href="#指定图片大小" class="headerlink" title="指定图片大小"></a>指定图片大小</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![boyer logo](http://boyers.coding.me/img/logo.png [200] [200] &quot;这是我的logo图片&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://boyers.coding.me/img/logo.png [200] [200]" alt="boyer logo" title="这是我的logo图片"></p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><hr>
<h3 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h3><hr>
<h4 id="Hexo语法-1"><a href="#Hexo语法-1" class="headerlink" title="Hexo语法"></a>Hexo语法</h4><hr>
<p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% link text url [external] [title] %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="MD语法-1"><a href="#MD语法-1" class="headerlink" title="MD语法"></a>MD语法</h4><hr>
<h5 id="智能识别超链接"><a href="#智能识别超链接" class="headerlink" title="智能识别超链接"></a>智能识别超链接</h5><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://boyers.coding.me</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" target="_blank" rel="external">http://boyers.coding.me</a></p>
<h5 id="文本式"><a href="#文本式" class="headerlink" title="文本式"></a>文本式</h5><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">boyer Blog</span>](<span class="link">http://boyers.coding.me</span>)</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" target="_blank" rel="external">boyer Blog</a></p>
<h5 id="toolTip式"><a href="#toolTip式" class="headerlink" title="toolTip式"></a>toolTip式</h5><hr>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">boyer Blog</span>](<span class="link">http://boyers.coding.me "这是我的博客首页"</span>)</div></pre></td></tr></table></figure>
<p><a href="http://boyers.coding.me" title="这是我的博客首页" target="_blank" rel="external">boyer Blog</a></p>
<h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><hr>
<p>插入 source 文件夹内的代码文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><hr>
<p>在文章中插入 Youtube 视频。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% youtube video_id %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><hr>
<p>在文章中插入 Vimeo 视频。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% vimeo video_id %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><hr>
<p>引用其他文章的链接。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% post_path slug %&#125;</div><div class="line">&#123;% post_link slug [title] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><hr>
<p>引用文章的资源。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_path slug %&#125;</div><div class="line">&#123;% asset_img slug [title] %&#125;</div><div class="line">&#123;% asset_link slug [title] %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><hr>
<p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">content</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。&lt;/p&gt;
&lt;h2 id=&quot;引用块&quot;&gt;&lt;a href=&quot;#引用块&quot; class=&quot;headerlink&quot; title=&quot;引用块&quot;&gt;&lt;/a&gt;引用块&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在文章中插入引言，可包含作者、来源和标题。&lt;/p&gt;
&lt;h3 id=&quot;别号：-quote&quot;&gt;&lt;a href=&quot;#别号：-quote&quot; class=&quot;headerlink&quot; title=&quot;别号： quote&quot;&gt;&lt;/a&gt;别号： quote&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% blockquote [author[, source]] [link] [source_link_title] %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblockquote %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;样例&quot;&gt;&lt;a href=&quot;#样例&quot; class=&quot;headerlink&quot; title=&quot;样例&quot;&gt;&lt;/a&gt;样例&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id=&quot;无参普通blockquote&quot;&gt;&lt;a href=&quot;#无参普通blockquote&quot; class=&quot;headerlink&quot; title=&quot;无参普通blockquote&quot;&gt;&lt;/a&gt;无参普通blockquote&lt;/h5&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% blockquote %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblockquote %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发(一)</title>
    <link href="https://huos3203.github.io/2016/12/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91-%E4%B8%80/"/>
    <id>https://huos3203.github.io/2016/12/19/微信小程序开发-一/</id>
    <published>2016-12-19T14:59:10.000Z</published>
    <updated>2017-01-12T03:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>我们需要通过<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=20161122" target="_blank" rel="external">开发者工具</a>，来完成小程序创建和代码编辑。</p>
<p>开发者工具安装完成后，打开并使用微信扫码登录。选择创建“项目”，填入上文获取到的 AppID ，设置一个本地项目的名称（非小程序名称），比如“我的第一个项目”，并选择一个本地的文件夹作为代码存储的目录，点击“新建项目”就可以了。</p>
<p>为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择“是”，开发者工具会帮助我们在开发目录里生成一个简单的 demo。</p>
<p>项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在“编辑”里可以查看和编辑我们的代码，在“调试”里可以测试代码并模拟小程序在微信客户端效果，在“项目”里可以发送到手机里预览实际效果。</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>点击开发者工具左侧导航的“编辑”，看到这个项目文件结构。</p>
<p>三个必不可少的<code>app.js、app.json、app.wxss</code>:</p>
<ul>
<li><code>.js</code>后缀的是脚本文件</li>
<li><code>.json</code>后缀的文件是配置文件</li>
<li><code>.wxss</code>后缀的是样式表文件</li>
</ul>
<p>微信小程序会读取这些文件，并生成小程序实例。<br><a id="more"></a></p>
<h4 id="app-js脚本代码"><a href="#app-js脚本代码" class="headerlink" title="app.js脚本代码"></a>app.js脚本代码</h4><p>app.json 是对整个小程序的全局配置。 可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。</p>
<blockquote>
<p>调用框架提供的丰富的 API，如本例的同步存储及同步读取本地数据。想了解更多可用 API，可参考 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/?t=20161122" target="_blank" rel="external">API 文档</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.js</span></div><div class="line">App(&#123;</div><div class="line">  <span class="attr">onLaunch</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//调用API从本地缓存中获取数据</span></div><div class="line">    <span class="keyword">var</span> logs = wx.getStorageSync(<span class="string">'logs'</span>) || []</div><div class="line">    logs.unshift(<span class="built_in">Date</span>.now())</div><div class="line">    wx.setStorageSync(<span class="string">'logs'</span>, logs)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">getUserInfo</span>:<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.globalData.userInfo)&#123;</div><div class="line">      <span class="keyword">typeof</span> cb == <span class="string">"function"</span> &amp;&amp; cb(<span class="keyword">this</span>.globalData.userInfo)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="comment">//调用登录接口</span></div><div class="line">      wx.login(&#123;</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          wx.getUserInfo(&#123;</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">              that.globalData.userInfo = res.userInfo;</div><div class="line">              <span class="keyword">typeof</span> cb == <span class="string">"function"</span> &amp;&amp; cb(that.globalData.userInfo)</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">globalData</span>:&#123;</div><div class="line">    <span class="attr">userInfo</span>:<span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="app-json-全局配置"><a href="#app-json-全局配置" class="headerlink" title="app.json 全局配置"></a>app.json 全局配置</h4><p>可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"pages"</span>:[</div><div class="line">    <span class="string">"pages/index/index"</span>,</div><div class="line">    <span class="string">"pages/logs/logs"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"window"</span>:&#123;</div><div class="line">    <span class="string">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</div><div class="line">    <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</div><div class="line">    <span class="string">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</div><div class="line">    <span class="string">"navigationBarTextStyle"</span>:<span class="string">"black"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意该文件不可添加任何注释。更多配置可参考<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html?t=20161122" target="_blank" rel="external">配置详解</a></p>
</blockquote>
<h4 id="app-wxss-公共样式表"><a href="#app-wxss-公共样式表" class="headerlink" title="app.wxss 公共样式表"></a>app.wxss 公共样式表</h4><p>我们可以在页面组件的 class 属性上直接使用 app.wxss 中声明的样式规则<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**app.wxss**/</span></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">200</span>rpx <span class="number">0</span>;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><p>在这个教程里，我们有两个页面，index 欢迎页和 logs 小程序启动日志的展示页，他们都在 pages 目录下。</p>
<p>微信小程序中的每一个页面的【路径+页面名】都需要写在 app.json 的 pages 中，且 pages 中的第一个页面是小程序的首页。</p>
<p>每一个小程序页面是由同路径下同名的四个不同后缀文件的组成:</p>
<ul>
<li>.js后缀的文件是脚本文件</li>
<li>.json后缀的文件是配置文件（非必须）</li>
<li>.wxss后缀的是样式表文件（非必须）</li>
<li>.wxml后缀的文件是页面结构文件  </li>
</ul>
<h4 id="index-wxml页面结构："><a href="#index-wxml页面结构：" class="headerlink" title="index.wxml页面结构："></a>index.wxml页面结构：</h4><p>使用了<code>&lt;view/&gt;、&lt;image/&gt;、&lt;text/&gt;</code>来搭建页面结构(container)，绑定数据(userInfo)和交互处理函数(bindViewTap)。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!--index.wxml--&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">view</span>  <span class="attr">bindtap</span>=<span class="string">"bindViewTap"</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span></div><div class="line"><span class="code">    &lt;image class="userinfo-avatar" src="&#123;&#123;userInfo.avatarUrl&#125;&#125;" background-size="cover"&gt;&lt;/image&gt;</span></div><div class="line"><span class="code">    &lt;text class="userinfo-nickname"&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;/text&gt;</span></div><div class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span>&gt;</span></span></div><div class="line"><span class="code">    &lt;text class="user-motto"&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt;</span></div><div class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h4 id="index-js脚本文件"><a href="#index-js脚本文件" class="headerlink" title="index.js脚本文件"></a>index.js脚本文件</h4><p>在这个文件中我们可以监听并处理页面的生命周期函数、获取小程序实例，声明并处理数据，响应页面交互事件等。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="comment">//获取应用实例</span></div><div class="line"><span class="keyword">var</span> app = getApp()</div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">motto</span>: <span class="string">'Hello World'</span>,</div><div class="line">    <span class="attr">userInfo</span>: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//事件处理函数</span></div><div class="line">  bindViewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    wx.navigateTo(&#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">'../logs/logs'</span></div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'onLoad'</span>)</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">    <span class="comment">//调用应用实例的方法获取全局数据</span></div><div class="line">    app.getUserInfo(<span class="function"><span class="keyword">function</span>(<span class="params">userInfo</span>)</span>&#123;</div><div class="line">      <span class="comment">//更新数据</span></div><div class="line">      that.setData(&#123;</div><div class="line">        <span class="attr">userInfo</span>:userInfo</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="index-wxss样式表"><a href="#index-wxss样式表" class="headerlink" title="index.wxss样式表"></a>index.wxss样式表</h4><ol>
<li>页面的样式表是非必要的,该样式表中的样式规则会层叠覆盖 app.wxss 中的样式规则。</li>
<li>页面的结构文件中可以直接使用 app.wxss 中指定的样式规则。</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**index.wxss**/</span></div><div class="line"><span class="selector-class">.userinfo</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.userinfo-avatar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">128</span>rpx;</div><div class="line">  <span class="attribute">height</span>: <span class="number">128</span>rpx;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">20</span>rpx;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.userinfo-nickname</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#aaa</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.usermotto</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="index-json配置文件"><a href="#index-json配置文件" class="headerlink" title="index.json配置文件"></a>index.json配置文件</h4><p>页面的配置文件是非必要的。当有页面的配置文件时，配置项在该页面会覆盖 app.json 的 window 中相同的配置项。如果没有指定的页面配置文件，则在该页面直接使用 app.json 中的默认配置。</p>
<h3 id="logs-的页面"><a href="#logs-的页面" class="headerlink" title="logs 的页面"></a>logs 的页面</h3><h4 id="logs-wxml页面结构"><a href="#logs-wxml页面结构" class="headerlink" title="logs.wxml页面结构"></a>logs.wxml页面结构</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!--logs.wxml--&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container log-list"</span>&gt;</span></span></div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;logs&#125;&#125;"</span> <span class="attr">wx:for-item</span>=<span class="string">"log"</span>&gt;</span></span></div><div class="line"><span class="code">    &lt;text class="log-item"&gt;&#123;&#123;index + 1&#125;&#125;. &#123;&#123;log&#125;&#125;&lt;/text&gt;</span></div><div class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h4 id="logs-js脚本文件"><a href="#logs-js脚本文件" class="headerlink" title="logs.js脚本文件"></a>logs.js脚本文件</h4><p>logs 页面使用 <code>&lt;block/&gt;</code> 控制标签来组织代码，在 <code>&lt;block/&gt;</code> 上使用 <code>wx:for</code> 绑定 logs 数据，并将 logs 数据循环展开节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//logs.js</span></div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'../../utils/util.js'</span>)</div><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">logs</span>: []</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      <span class="attr">logs</span>: (wx.getStorageSync(<span class="string">'logs'</span>) || []).map(<span class="function"><span class="keyword">function</span> (<span class="params">log</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> util.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>(log))</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">运行结果如下：</div></pre></td></tr></table></figure></p>
<h3 id="运行结果如下："><a href="#运行结果如下：" class="headerlink" title="运行结果如下："></a>运行结果如下：</h3><p><img src="https://mp.weixin.qq.com/debug/wxadoc/dev/image/start_result.png?t=20161122" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h3&gt;&lt;p&gt;我们需要通过&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html?t=20161122&quot;&gt;开发者工具&lt;/a&gt;，来完成小程序创建和代码编辑。&lt;/p&gt;
&lt;p&gt;开发者工具安装完成后，打开并使用微信扫码登录。选择创建“项目”，填入上文获取到的 AppID ，设置一个本地项目的名称（非小程序名称），比如“我的第一个项目”，并选择一个本地的文件夹作为代码存储的目录，点击“新建项目”就可以了。&lt;/p&gt;
&lt;p&gt;为方便初学者了解微信小程序的基本代码结构，在创建过程中，如果选择的本地文件夹是个空文件夹，开发者工具会提示，是否需要创建一个 quick start 项目。选择“是”，开发者工具会帮助我们在开发目录里生成一个简单的 demo。&lt;/p&gt;
&lt;p&gt;项目创建成功后，我们就可以点击该项目，进入并看到完整的开发者工具界面，点击左侧导航，在“编辑”里可以查看和编辑我们的代码，在“调试”里可以测试代码并模拟小程序在微信客户端效果，在“项目”里可以发送到手机里预览实际效果。&lt;/p&gt;
&lt;h3 id=&quot;编写代码&quot;&gt;&lt;a href=&quot;#编写代码&quot; class=&quot;headerlink&quot; title=&quot;编写代码&quot;&gt;&lt;/a&gt;编写代码&lt;/h3&gt;&lt;p&gt;点击开发者工具左侧导航的“编辑”，看到这个项目文件结构。&lt;/p&gt;
&lt;p&gt;三个必不可少的&lt;code&gt;app.js、app.json、app.wxss&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.js&lt;/code&gt;后缀的是脚本文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.json&lt;/code&gt;后缀的文件是配置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.wxss&lt;/code&gt;后缀的是样式表文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微信小程序会读取这些文件，并生成小程序实例。&lt;br&gt;
    
    </summary>
    
      <category term="微信" scheme="https://huos3203.github.io/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="小程序" scheme="https://huos3203.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>gitbook+Hexo命令行</title>
    <link href="https://huos3203.github.io/2016/12/19/gitbook+Hexo/"/>
    <id>https://huos3203.github.io/2016/12/19/gitbook+Hexo/</id>
    <published>2016-12-19T07:35:20.000Z</published>
    <updated>2017-01-12T08:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>集成：</p>
<ol>
<li>在hexo 的source目录下gitbook init</li>
<li>使用gitbook editor 工具 选择open 方式打开source 目录</li>
<li>在boyers目录中： hexo new postName</li>
<li>在gitbook editor中：手动配置summary.md关联 postName</li>
</ol>
<p>发布：<br>hexo：hexo g  ，hexo d<br>gitbook：直接点击同步，把source资源同步到github中，在通知gitbook编译出书本格式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在hexo 的source目录下gitbook init&lt;/li&gt;
&lt;li&gt;使用gitbook editor 工具 选择open 方式打开source 目录&lt;/li&gt;
&lt;li&gt;在boyers目录中： hexo new postName&lt;/l
    
    </summary>
    
      <category term="hexo" scheme="https://huos3203.github.io/categories/hexo/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>GTD入门</title>
    <link href="https://huos3203.github.io/2016/01/07/2016-01-07-gtdru-men/"/>
    <id>https://huos3203.github.io/2016/01/07/2016-01-07-gtdru-men/</id>
    <published>2016-01-07T08:00:53.000Z</published>
    <updated>2017-01-12T02:45:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>####什么是GTD？<br>GTD 的基本理论是把一个人所要要完成的任务和事件全部从大脑中移出来，记录到纸上。这样，大脑便会不被多余的事情打搅而集中于现在所需完成的事情上面。<br>GTD 的创始人：David Allen，提倡建立一个详细的To-Do列表，比如说：列出要打的电话，去市区要完成的任务。他还提出一个“二分钟法则”：如果任何一件可以在二分钟内完成的事情，那么就必须得现在马上完成。</p>
<p>####GTD守则：<br>        收集任务  设置每天最重要的任务<br>        （把所有你需要做的和需要完成的事情全部记录下来，放在一个“收集箱”里）<br>        ↓<br>        过程<br>        （每次按照顺序，一次只做一件事）<br>        ↓<br>        管理任务<br>        （列出有详细内容的to-do列表）<br>        ↓<br>        复习任务<br>        （复习你所有完成的任务，计划方案和等待完成的事情。确保每一件新进入的任务都有很好的安排）<br>        ↓<br>        开始行动！  </p>
<p>####建立有强行动性的任务清单<br>任务清单（To-do List）的重要性毋庸置疑，建立有强行动性的任务清单可以让你更清楚地明白自己需要完成的任务，同时还保持了你去完成任务的激情和动力。</p>
<ol>
<li>分解任务：就像走远路时，以每一段路程为目标，让人更有动力去追求一样。如果你要阅读一本书，便可以将任务分成“读完第一章”，“读完第二章”等等。</li>
<li>使用有力的动词：比如说联系某个人，就要写上“给某某打电话”或者“发邮件给某某”而不是写“联系某某”。</li>
<li>有限的清单：谁都不希望有一张写满几大页的任务清单，你需要找出那些有强动力的行动。</li>
<li>清理已完成的任务：已完成的任务要及时清理，否者会阻碍你的下一步行动任务。</li>
</ol>
<p>####工具类：<br><img src="/images/IFTTT.jpg" alt=""></p>
<p>####微信推出应用号的处境：</p>
<p><img src="/images/QQ20160114-1.png" alt=""></p>
<p>####写文章：把想到的先列出来，慢慢整理调整，梳理出写作思路。<br>演变过程：<br><img src="/images/QbMJNrM.png!web.png" alt=""></p>
<p><img src="/images/vIfAjiY.png!web.png" alt=""></p>
<p>####学习时间技巧图：<br><img src="/images/QQ20160114-0.png" alt=""></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NjA3OTM0MA==&amp;mid=403475231&amp;idx=1&amp;sn=bbf21f2e37e91fc10d1a48285e8abefd&amp;scene=23&amp;srcid=0115194ziliaGGBscdYC3N0d#rd" target="_blank" rel="external"><img src="/images/IMG_0028.JPG =400x400" alt="用更短的时间达到更佳效果和更好成绩" title="用更短的时间达到更佳效果和更好成绩"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####什么是GTD？&lt;br&gt;GTD 的基本理论是把一个人所要要完成的任务和事件全部从大脑中移出来，记录到纸上。这样，大脑便会不被多余的事情打搅而集中于现在所需完成的事情上面。&lt;br&gt;GTD 的创始人：David Allen，提倡建立一个详细的To-Do列表，比如说：列出要
    
    </summary>
    
      <category term="CI" scheme="https://huos3203.github.io/categories/CI/"/>
    
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>git svn桥接命令的基础</title>
    <link href="https://huos3203.github.io/2016/01/05/2016-01-05-git-svnqiao-jie-ming-ling-de-ji-chu/"/>
    <id>https://huos3203.github.io/2016/01/05/2016-01-05-git-svnqiao-jie-ming-ling-de-ji-chu/</id>
    <published>2016-01-05T06:18:00.000Z</published>
    <updated>2017-01-12T08:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/book/zh/v1/Git-与其他系统-Git-与-Subversion#git-svn" target="_blank" rel="external">git svn</a></p>
<p>通过几个简单的工作流程了解到<code>git svn</code>常见命令：<br>值得警戒的是，在使用 git svn 的时候，你实际是在与 Subversion 交互，Git 比它要高级复杂的多。尽管可以在本地随意的进行分支和合并，最好还是通过衍合保持线性的提交历史，</p>
<ol>
<li>尽量避免类似与远程 Git 仓库动态交互这样的操作。</li>
<li>避免修改历史再重新推送的做法，也不要同时推送到并行的 Git 仓库来试图与其他 Git 用户合作。</li>
<li>Subersion 只能保存单一的线性提交历史，一不小心就会被搞糊涂。</li>
<li>合作团队中同时有人用 SVN 和 Git，一定要确保所有人都使用 SVN 服务来协作——这会让生活轻松很多。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://git-scm.com/book/zh/v1/Git-与其他系统-Git-与-Subversion#git-svn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git svn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通过几个简单的工作流程了
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
      <category term="命令" scheme="https://huos3203.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Realm数据库引擎-swift</title>
    <link href="https://huos3203.github.io/2015/12/16/2015-12-16-realmshu-ju-ku-yin-qing-swift/"/>
    <id>https://huos3203.github.io/2015/12/16/2015-12-16-realmshu-ju-ku-yin-qing-swift/</id>
    <published>2015-12-15T21:56:15.000Z</published>
    <updated>2017-01-12T02:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>中心思想：<br>继承RLMObject新建数据模型，添加相应属性，即可使用realm数据库引擎，对用户数据创建持久化，更新，删除等操作。</p>
<p>####简介：<br><a href="http://realm.io/" target="_blank" rel="external">Realm</a> 是一个跨平台的移动数据库引擎，于 2014 年 7 月发布，准确来说，它是专门为移动应用所设计的数据持久化解决方案之一。</p>
<ul>
<li>特点：它拥有自己的数据库存储引擎<br>  Realm 并不是对 Core Data 的简单封装，相反地， Realm 并不是基于 Core Data ，也不是基于 SQLite 所构建的。它拥有自己的数据库存储引擎，可以高效且快速地完成数据库的构建操作。</li>
<li>Realm 支持 Swift 、 Objective-C 以及 Java 语言来编写（ Android 平台和 iOS 平台使用不同的 SDK ）。</li>
<li>Realm 比使用 SQLite 以及 Core Data 要快很多。</li>
<li>可视化工具<a href="https://itunes.apple.com/cn/app/realm-browser/id1007457278?mt=12" target="_blank" rel="external">Realm Browser</a> ：可以让您轻松地读写 Realm 数据库的逻辑结构以及其中的数据（以 .realm 结尾），虽然 Realm Browser 的功能还十分简陋，真的只能读写而已。</li>
<li>RealmPlugin：是 Xcode 建模插件，通过 <a href="http://alcatraz.io/" target="_blank" rel="external">Alcatraz</a>安装“RealmPlugin”<br>####目的：<br>学习如何导入 Realm 框架、创建数据模型，实现 Swift 执行查询以及插入、更新和删除记录，以及使用既有的数据库。<br>####实例学习：<br>测试APP<a href="https://github.com/SemperIdem/SISpeciesNotes/tree/master" target="_blank" rel="external">物种监测</a><br>用于记录这个 “ 动植物王国 ” 当中所发现物种的相关信息，包括种群数量、发现区域、年龄结构等等。</li>
</ul>
<p>在 Xcode 当中打开我们的起始项目。此时， <a href="http://www.raywenderlich.com/81615/www.raywenderlich.com/21365/introduction-to-mapkit-in-ios-6-tutorial" target="_blank" rel="external">MapKit</a><br>已经在项目当中建立好了，而且项目已经拥有了一些简单的创建、更新和删除物种信息的功能.</p>
<p>####cocoapods安装（Swift 2.1）：<br>在项目中创建Podfile配置文件，添加RealmSwift支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use_frameworks!   //</div><div class="line">pod &apos;RealmSwift&apos;</div></pre></td></tr></table></figure></p>
<p>执行 <code>pod install</code>下载realmSwift框架，生成<strong>.xcworkspace</strong>文件，自动重启原始项目。<br>设置Xcode项目在git版本控制中的忽略配置：详见<a href="http://stackoverflow.com/questions/49478/git-ignore-file-for-xcode-projects" target="_blank" rel="external">.gitignore</a></p>
<p><a href="http://blog.csdn.net/remote_roamer/article/details/47835347" target="_blank" rel="external">use_frameworks!</a>   </p>
<pre><code>如果在cocoapods 里面不使用 use_frameworks!,则是通过static libraries 这个方式来管理pod的代码。这样就需要在app-Bridging-Header.h 文件里面去import相应的.h 文件。而如果使用了use_frameworks!,则cocoapods 使用了frameworks 来取代static libraries 方式。 
</code></pre><p>####开始使用：<br>编译并运行这个应用，然后尝试定位到某个您感兴趣的位置（使用模拟器的位置模拟），然后点击右上角的 “+” 按钮创建一个新的标记点。点选地图上的这个标记点，然后点击其弹出来的气泡，接下来会弹出这个标记点的详细信息。随后，点击类别文本框，就可以看到如下图所示的类别列表了:<br><img src="http://cc.cocimg.com/api/uploads/20150505/1430807925718367.jpg" alt=""></p>
<ol>
<li><p>使用Realm数据库将类别列表持久化</p>
<ul>
<li><p>打开<strong>CategoriesTableViewController.swift </strong>文件添加方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">populateDefaultCategories</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">self</span>.results = <span class="type">CategoryModel</span>.allObjects() <span class="comment">// 1 查询数据返回包含类别对象的RLMResults数组</span></div><div class="line"><span class="keyword">if</span> results.<span class="built_in">count</span> == <span class="number">0</span> &#123; <span class="comment">// 2   通过返回结果的个数，初始化本地realm数据库</span></div><div class="line"><span class="keyword">let</span> realm = <span class="type">RLMRealm</span>.defaultRealm() <span class="comment">// 3 访问默认的 realm 单例对象</span></div><div class="line">realm.beginWriteTransaction() <span class="comment">// 4   在默认 realm 数据库中启动一个事务</span></div><div class="line"><span class="keyword">let</span> defaultCategories = <span class="type">Categories</span>.allValues <span class="comment">// 5 使用Categories 枚举来创建一个含有全部默认类别的数组</span></div><div class="line"><span class="keyword">for</span> category <span class="keyword">in</span> defaultCategories &#123;</div><div class="line"><span class="comment">// 6 初始化类别实例对象，设置其 name 属性，加入realm中</span></div><div class="line"><span class="keyword">let</span> newCategory = <span class="type">CategoryModel</span>()</div><div class="line">newCategory.name = category</div><div class="line">realm.addObject(newCategory)</div><div class="line">&#125;</div><div class="line">realm.commitWriteTransaction() <span class="comment">// 7    调用 commitWriteTransaction() 方法来关闭事务，并且向数据库提交数据</span></div><div class="line"><span class="keyword">self</span>.results = <span class="type">CategoryModel</span>.allObjects()</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 viewDidLoad() 方法的底部加入以下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">populateDefaultCategories()</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中心思想：&lt;br&gt;继承RLMObject新建数据模型，添加相应属性，即可使用realm数据库引擎，对用户数据创建持久化，更新，删除等操作。&lt;/p&gt;
&lt;p&gt;####简介：&lt;br&gt;&lt;a href=&quot;http://realm.io/&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="数据库" scheme="https://huos3203.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="realm" scheme="https://huos3203.github.io/tags/realm/"/>
    
  </entry>
  
  <entry>
    <title>OC与swift相互调用</title>
    <link href="https://huos3203.github.io/2015/12/01/2015-12-01-ocyu-swiftxiang-hu-diao-yong/"/>
    <id>https://huos3203.github.io/2015/12/01/2015-12-01-ocyu-swiftxiang-hu-diao-yong/</id>
    <published>2015-12-01T03:42:18.000Z</published>
    <updated>2017-01-12T03:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>####Swift中使用OC的类声明  – 实现配置 桥接的头文件</p>
<p>######方式一：自动添加桥接头文件</p>
<ol>
<li>在一个全新的Swift，利用第一次新建提示的方式自动添加桥接头文件。</li>
<li>点确定这后就会生成一个以<producename-bridging-header.h>的头文件。</producename-bridging-header.h></li>
<li>在targets-&gt;build settings -&gt;Object-C Bridging Header 设为生成的个桥接的头文件即可。</li>
<li>把想要在swift类中调用的OC头文件放使用import “” 写到这个桥接文件中：<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  Use this file to import your target's public headers that you would like to expose to Swift.  </span></div><div class="line"><span class="comment">//MixDemo/MixDemo-Bridging-Header.h    </span></div><div class="line"><span class="meta">#import <span class="meta-string">"OCChannel.h"</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>######方式二：手动添加桥接头文件<br>同样的，当你知道这个swift搜索头文件的关系后，就不需要再理会这个-Bridging-Header.h的文件了。<br>完全可以手工建一个并取自己喜欢的名字：</p>
<ol>
<li>新建一个头文件，名为:OCContainerHeader.h</li>
<li>在targets-&gt;build settings -&gt;Object-C Bridging Header 设为生成的个桥接的头文件即可。</li>
<li>把想要在swift类中调用的OC头文件放使用import “” 写到这个桥接文件中：<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  Use this file to import your target's public headers that you would like to expose to Swift.  	</span></div><div class="line"><span class="comment">//MixDemo/MixDemo-Bridging-Header.h    </span></div><div class="line"><span class="meta">#import <span class="meta-string">"OCChannel.h"</span></span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>####OC如何调用Swift写的类  –     为了在 Objective-C 中可用， Swift 类必须是 Objective-C 类的子类，或者用 @Objective-C 标记；</p>
<ol>
<li>选中targets-&gt;build settings -&gt;packing-&gt;Product Module Name 中设置模块名（可以自定义），这个名称很重要 swift 的头文件就是根据这个来命名的，例如：SwiftModule。</li>
<li>在OC头文件类中，添加import “SwiftModule-swift.h”但你在整个工程中是找不到这个文件的，但可以使用CMD+ 鼠标点击可看这个头文件中的内容。  </li>
</ol>
<p>####总结：<br>这样，工程中如查Swift要使用OC,则把需要使用的OC类的头文件，全写在MixDemo-Bridging-Header.h里。同样如果OC中所使用的swift类，只需要Clean一把，再编就可以了，但不要忘了导入SwiftModule-swift.h哦（名称自取，但-swift.h是固定的），另外还有一个需要读者注意的。</p>
<p>注：<br>    凡是用Swift写的类，如果不继成自NSObject或NSObject 的派生类，哪么编译后将不会生成对应的转换类。从而使得OC 中找不到相应的声明。<br>如我的例子中 class Act 这样不会被编译到SwiftModule-swift.h中，但写为 class Act : NSObject，就可以编译出相应的声明。另外可以使用@objc加以声明，但这个还是一样，类最好继承NSObject下来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####Swift中使用OC的类声明  – 实现配置 桥接的头文件&lt;/p&gt;
&lt;p&gt;######方式一：自动添加桥接头文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在一个全新的Swift，利用第一次新建提示的方式自动添加桥接头文件。&lt;/li&gt;
&lt;li&gt;点确定这后就会生成一个以&lt;produc
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="混编" scheme="https://huos3203.github.io/tags/%E6%B7%B7%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>Swift入门</title>
    <link href="https://huos3203.github.io/2015/11/27/2015-11-27-swiftru-men/"/>
    <id>https://huos3203.github.io/2015/11/27/2015-11-27-swiftru-men/</id>
    <published>2015-11-27T09:18:21.000Z</published>
    <updated>2017-01-12T02:39:01.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_1" target="_blank" rel="external">苹果官方</a>  </li>
<li><a href="http://wiki.jikexueyuan.com/project/swift/" target="_blank" rel="external">中文版</a><br>####背景<br>Apple基于已有的编译器、调试器、框架作为其基础架构。通过ARC(Automatic Reference Counting，自动引用计数)来简化内存管理。我们的框架栈则一直基于Cocoa，且Objective-C进化支持了块、collection literal和模块，允许现代语言的框架无需深入即可使用。<br>(by gashero)感谢这些基础工作，才使得可以在Apple软件开发中引入新的编程语言Swift。</li>
</ul>
<p>####swift有点</p>
<p>编译器是按照性能优化的，而语言是为开发优化的</p>
<p>Swift采用了Objective-C的命名参数和动态对象模型。提供了对Cocoa框架和mix-and-match的互操作性。基于这些基础，Swift引入了很多新功能和结合面向过程和面向对象的功能。<br>Swift对新的程序员也是友好的：</p>
<ol>
<li>它是工业级品质的系统编程语言，却又像脚本语言一样的友好。</li>
<li>它支持playground，允许程序员实验一段Swift代码功能并立即看到结果，而无需麻烦的构建和运行一个应用。<br>Swift集成了现代编程语言思想，以及Apple工程文化的智慧，编译器是按照性能优化的，而语言是为开发优化的，无需互相折中。</li>
</ol>
<p>####swift语法<br>Playground允许你编辑代码并立即看到结果,可以从”Hello, world”开始学起并过渡到整个系统。<br>在Xcode的playground中打开:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"Hello, world"</span>)</div></pre></td></tr></table></figure></p>
<p>在Swift，这就是完整的程序:</p>
<ol>
<li>无需导入(import)输入输出和字符串处理的系统库。</li>
<li>全局范围的代码就是用于程序的入口，所以你无需编写一个 main() 函数。也无需在每个语句后写分号。</li>
</ol>
<p>所有这些使得Swift成为Apple软件开发者创新的源泉。</p>
<p>####简单值  – 使用 let 来定义常量， var 定义变量<br>提供一个值就可以创建常量或变量，并让编译器推断其类型,一个常量或变量必须与赋值时拥有相同的类型。因此你不用严格定义类型。<br>常量定义类似于函数式编程语言中的变量,常量的值无需在编译时指定，但是至少要赋值一次,赋值后就无法修改。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myVariable = <span class="number">42</span></div><div class="line">myVariable = <span class="number">50</span></div><div class="line"><span class="keyword">let</span> myConstant = <span class="number">42</span></div></pre></td></tr></table></figure></p>
<p>在上面例子中，编译其会推断myVariable是一个整数类型，因为其初始化值就是个整数。</p>
<p>######1. 显示/隐式 初始化数据类型 —   类型与变量名绑定，属于静态类型语言<br>类型与变量名绑定，属于静态类型语言。有助于静态优化。与Python、JavaScript等有所区别。<br>例如：初始化值没有提供足够的信息(或没有初始化值)，可以在变量名后写类型，以冒号分隔。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> imlicitInteger = <span class="number">70</span></div><div class="line"><span class="keyword">let</span> imlicitDouble = <span class="number">70.0</span></div><div class="line"><span class="keyword">let</span> explicitDouble: <span class="type">Double</span> = <span class="number">70</span></div></pre></td></tr></table></figure></p>
<p>######2. 变量  拼接到字符串  – 变量值永远不会隐含转换到其他类型</p>
<ul>
<li><p>String(变量名)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="string">"The width is "</span></div><div class="line"><span class="keyword">let</span> width = <span class="number">94</span></div><div class="line"><span class="keyword">let</span> widthLabel = label + <span class="type">String</span>(width)</div></pre></td></tr></table></figure>
</li>
<li><p>以小括号来写值，并用反斜线(“”)放在小括号之前</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> apples = <span class="number">3</span></div><div class="line"><span class="keyword">let</span> oranges = <span class="number">5</span>     <span class="comment">//by gashero</span></div><div class="line"><span class="keyword">let</span> appleSummary = <span class="string">"I have \(apples) apples."</span></div><div class="line"><span class="keyword">let</span> fruitSummary = <span class="string">"I have \(apples + oranges) pieces of fruit."</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>####数组和字典的用法</p>
<ol>
<li>声明并初始化<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> emptyArray = <span class="type">String</span>[]()</div><div class="line"><span class="keyword">let</span> emptyDictionary = <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Float</span>&gt;()</div><div class="line">shoppingList = [] <span class="comment">//去购物并买些东西</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果数组类型无法推断，你可以写空的数组为 “[]” 和空的字典为 “[:]“。</p>
<ol>
<li>访问<br>创建一个数组和字典使用方括号 “[]”，访问其元素则是通过方括号中的索引或键。                      <figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shoppingList = [<span class="string">"catfish"</span>, <span class="string">"water"</span>, <span class="string">"tulips"</span>, <span class="string">"blue paint"</span>]</div><div class="line">shoppingList[<span class="number">1</span>] = <span class="string">"bottle of water"</span></div><div class="line"><span class="keyword">var</span> occupations = [</div><div class="line">   <span class="string">"Malcolm"</span>: <span class="string">"Captain"</span>,</div><div class="line">   <span class="string">"Kaylee"</span>: <span class="string">"Mechanic"</span>,</div><div class="line">]</div><div class="line">occupations[<span class="string">"Jayne"</span>] = <span class="string">"Public Relations"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>####控制流  –  条件控制，循环控制</p>
<p>######1. 条件控制</p>
<ul>
<li><p>if  条件必须是布尔表达式<br>在 if 语句中，条件必须是布尔表达式，这意味着 if score { … } 是错误的，不能隐含的与0比较。<br>你可以一起使用 if 和 let 来防止值的丢失。这些值是可选的。<br>可选值可以包含一个值或包含一个 nil 来指定值还不存在。写一个问号 “?” 在类型后表示值是可选的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> optionalString: <span class="type">String</span>? = <span class="string">"Hello"</span></div><div class="line">optionalString == <span class="literal">nil</span></div><div class="line"><span class="keyword">var</span> optionalName: <span class="type">String</span>? = <span class="string">"John Appleseed"</span></div><div class="line"><span class="keyword">var</span> greeting = <span class="string">"Hello!"</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = optionalName &#123;</div><div class="line">    greeting = <span class="string">"Hello, \(name)"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>switch 支持多种数据以及多种比较，不限制必须是整数和测试相等  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> vegetable = <span class="string">"red pepper"</span></div><div class="line"><span class="keyword">switch</span> vegetable &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"celery"</span>:</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Add some raisins and make ants on a log."</span></div><div class="line"><span class="keyword">case</span> <span class="string">"cucumber"</span>, <span class="string">"watercress"</span>:</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"That would make a good tea sandwich."</span></div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x.hasSuffix(<span class="string">"pepper"</span>):</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Is it a spicy \(x)?"</span></div><div class="line"><span class="keyword">default</span>:    <span class="comment">//by gashero</span></div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Everything tastes good in soup."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在执行匹配的情况后，程序会从 switch 跳出，而不是继续执行下一个情况。所以不再需要 break 跳出 switch 。</p>
<p>######2. 循环控制</p>
<ul>
<li>for-in 来迭代字典中的每个元素<br>可使用 for-in 来迭代字典中的每个元素，提供一对名字来使用每个键值对。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> interestingNumbers = [</div><div class="line">    <span class="string">"Prime"</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>],</div><div class="line">    <span class="string">"Fibonacci"</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>],</div><div class="line">    <span class="string">"Square"</span>: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>],</div><div class="line">]</div><div class="line"><span class="keyword">var</span> largest = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> (kind, numbers) <span class="keyword">in</span> interestingNumbers &#123;</div><div class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</div><div class="line">        <span class="keyword">if</span> number &gt; largest &#123;</div><div class="line">            largest = number</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line">你可以在循环中保持一个索引，通过“..”来表示索引范围或明确声明一个初始值、条件、增量。   </div><div class="line">这两个循环做相同的事情:  </div><div class="line">```swift</div><div class="line"><span class="keyword">var</span> firstForLoop = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</div><div class="line">    firstForLoop += i</div><div class="line">&#125;</div><div class="line">firstForLoop</div><div class="line"><span class="keyword">var</span> secondForLoop = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i &#123;</div><div class="line">    secondForLoop += <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用 .. 构造范围忽略最高值，而用 … 构造的范围则包含两个值。</p>
<ul>
<li>while 来重复执行代码块直到条件改变<br>使用 while 来重复执行代码块直到条件改变。循环的条件可以放在末尾来确保循环至少执行一次。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">2</span></div><div class="line"><span class="keyword">while</span> n &lt; <span class="number">100</span> &#123;</div><div class="line">    n = n * <span class="number">2</span></div><div class="line">&#125;</div><div class="line">n</div><div class="line"><span class="keyword">var</span> m = <span class="number">2</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    m = m * <span class="number">2</span></div><div class="line">&#125; <span class="keyword">while</span> m &lt; <span class="number">100</span></div><div class="line">m</div></pre></td></tr></table></figure>
</li>
</ul>
<p>####函数与闭包  – 函数是闭包的特殊情况</p>
<p>######1. 闭包 无需名字，只需要放在大括号中即可<br>编写闭包时有多种选项:</p>
<ol>
<li><p>使用 in 到特定参数和主体的返回值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">numbers.<span class="built_in">map</span>(&#123;</div><div class="line">    (number: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">let</span> result = <span class="number">3</span> * number</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>单一语句的闭包可以直接返回值<br>例如：当一个闭包的类型是已知时，例如代表回调，你可以忽略其参数和返回值，或两者</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numbers.<span class="built_in">map</span>(&#123;number <span class="keyword">in</span> <span class="number">3</span> * number&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>通过数字而不是名字来引用一个参数，这对于很短的闭包很有用。<br>例如：一个闭包传递其最后一个参数到函数作为返回值。  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">sort</span>([<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">2</span>]) &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>######2. 函数</p>
<ul>
<li><p>函数的声明   –  使用func 声明一个函数  使用 -&gt;分隔参数的名字和返回值类型,<br>调用函数使用他的名字加上小括号中的参数列表</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(name: String, day: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello \(name), today is \(day)."</span></div><div class="line">&#125;</div><div class="line">greet(<span class="string">"Bob"</span>, <span class="string">"Tuesday"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>函数的嵌套<br>内嵌函数可以访问其定义所在函数的变量。<br>你可以使用内嵌函数来组织代码，避免过长和过于复杂：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnFifteen</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> y = <span class="number">10</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</div><div class="line">        y += <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">    add()</div><div class="line">    <span class="keyword">return</span> y</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数接收的参数</p>
<ol>
<li><p>可变参数的个数  sumOf(numbers: Int…) -&gt; Int{}<br>函数可以接受可变参数个数，收集到一个数组中</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumOf</span><span class="params">(numbers: Int...)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</div><div class="line">        sum += number</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">&#125;</div><div class="line"><span class="comment">//例子</span></div><div class="line">sumOf(<span class="number">42</span>, <span class="number">597</span>, <span class="number">12</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>其他函数作为参数  func hasAnyMatches(list: Int[], condition: Int -&gt; Bool) -&gt; Bool{}</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">hasAnyMatches</span><span class="params">(list: Int[], condition: Int -&gt; Bool)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list &#123;</div><div class="line">        <span class="keyword">if</span> condition(item) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">lessThanTen</span><span class="params">(number: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> number &lt; <span class="number">10</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> numbers = [<span class="number">20</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">12</span>]</div><div class="line">hasAnyMatches(numbers, lessThanTen)</div></pre></td></tr></table></figure>
<p>函数实际是闭包的特殊情况。你可以写一个闭包而无需名字，只需要放在大括号中即可。使用 in 到特定参数和主体的返回值。</p>
</li>
</ol>
</li>
<li><p>函数的返回值</p>
<ol>
<li><p>返回多个值 ： getGasPrices() -&gt; (Double, Double, Double)<br>使用元组(tuple)来返回多个值                           </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getGasPrices</span><span class="params">()</span></span> -&gt; (<span class="type">Double</span>, <span class="type">Double</span>, <span class="type">Double</span>) &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="number">3.59</span>, <span class="number">3.69</span>, <span class="number">3.79</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>返回另一个函数  ： makeIncrementer() -&gt; (Int -&gt; Int)<br>函数是第一类型的</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeIncrementer</span><span class="params">()</span></span> -&gt; (<span class="type">Int</span> -&gt; <span class="type">Int</span>) &#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addOne</span><span class="params">(number: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> + number</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> addOne</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> increment = makeIncrementer()</div><div class="line">increment(<span class="number">7</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>####对象与类</p>
<p>######1. 类的创建  ：class 类名 {}</p>
<ol>
<li><p>使用 class 可以创建一个类。<br>一个属性的声明则是在类里作为常量或变量声明的，除了是在类的上下文中。方法和函数也是这么写的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> numberOfSides = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"A shape with \(numberOfSides) sides."</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>类的构造器  ： 构造器来在创建实例时设置类，使用 init 来创建</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamedShape</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> numberOfSides: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;   <span class="comment">//by gashero</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"A Shape with \(numberOfSides) sides."</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>self 用来区分 name 属性和 name 参数。<br>构造器的声明跟函数一样，除了会创建类的实例。每个属性都需要赋值，无论在声明里还是在构造器里。</p>
<ol>
<li>类的析构器，来执行对象销毁时的清理工作，使用 deinit 来创建<br>使用 deinit 来创建一个析构器，来执行对象销毁时的清理工作。</li>
<li>超类的继承    <ul>
<li>子类包括其超类的名字，以冒号分隔。在继承标准根类时无需声明，所以你可以忽略超类。  </li>
<li>子类的方法可以通过标记 override 重载超类中的实现，而没有 override 的会被编译器看作是错误,编译器也会检查那些没有被重载的方法。<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span>: <span class="title">NamedShape</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> sideLength: <span class="type">Double</span></div><div class="line"></div><div class="line">    <span class="keyword">init</span>(sideLength: <span class="type">Double</span>, name: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.sideLength = sideLength</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</div><div class="line">        numberOfSides = <span class="number">4</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">area</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</div><div class="line">        <span class="keyword">return</span> sideLength * sideLength</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">simpleDescription</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"A square with sides of length \(sideLength)."</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> test = <span class="type">Square</span>(sideLength: <span class="number">5.2</span>, name: <span class="string">"my test square"</span>)</div><div class="line">test.area()</div><div class="line">test.simpleDescription()</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>######2. 类的实例创建   :  类名()  ,点语法来访问实例的属性和方法<br>通过在类名后加小括号来创建类的实例。使用点语法来访问实例的属性和方法。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shape = <span class="type">Shape</span>()</div><div class="line">shape.numberOfSides = <span class="number">7</span></div><div class="line"><span class="keyword">var</span> shapeDescription = shape.simpleDescription()</div></pre></td></tr></table></figure></p>
<p>可选类型 Int?<br>可选绑定 if while</p>
<p>强制取值表达式 expression!<br>可选链表达式   expression?</p>
<p>类型转换运算符 is , as, is?, as!</p>
<p>标示符模式<br>值绑定模式<br>可选模式<br>类型转换模式</p>
<p>实例方法  func<br>类型方法 class func</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.ht
    
    </summary>
    
      <category term="Swift" scheme="https://huos3203.github.io/categories/Swift/"/>
    
    
      <category term="语法" scheme="https://huos3203.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>产品领导者的五种特质</title>
    <link href="https://huos3203.github.io/2015/11/27/2015-11-27-chan-pin-ling-dao-zhe-de-wu-chong-te-zhi/"/>
    <id>https://huos3203.github.io/2015/11/27/2015-11-27-chan-pin-ling-dao-zhe-de-wu-chong-te-zhi/</id>
    <published>2015-11-27T02:24:44.000Z</published>
    <updated>2017-01-12T03:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>####1.善于观察<br>他们一直在观察用户，不仅仅是借助指标和仪表盘。他们对每件小事情感到好奇：</p>
<ul>
<li>用户正尝试完成什么？  </li>
<li>为什么用户选择这款产品而非其它产品？  </li>
<li>他们在和这款产品交互之前、之中和之后，做了什么。  </li>
</ul>
<p>他们查看收到的每一条反馈，对每个客户问题做出响应。他们创建让人愉悦的调查，知道该问什么，什么时候该倾听或无视。他们在 Facebook 上和用户交朋友——他们能叫得出用户名字。他们深知，核心用户会成为产品本身的一部分。</p>
<p>他们痴迷于研究。他们知道市场的运作方式、未来走向以及竞争要做什么。他们密切注视着一切，除了没有创建一个显而易见的版本。</p>
<a id="more"></a>
<p>####2.技术<br>他们或许没有计算机科学学位，但是凭借其悟性，足以解释事物运作的方式。他们理解软件开发的过程（和复杂度），打造增量改变的文化，还能借助可用的数据点清晰明了地交流。他们对优先级毫不留情。</p>
<p>他们是脚本瘾君子——他们能够不依赖工程师而自动化很多工作。为了检查产品，他们创造工具，最终成为每个人手头最重要的工具。</p>
<p>他们在工程师圈子里保持良好联系——知道从哪儿得到某些工程师的快速帮助、或雇佣到全职的明星工程师。</p>
<p>他们明白，写代码除了开发产品——还能节约大量时间。</p>
<p>####3.分析<br>他们或许不是正式的数据科学家，但他们是数据狂热者。他们理解大数据和不良数据的差异。他们对各种分析工具一点儿也不陌生，为了捕捉到有意义的数据，他们知道该增加什么或何时增加。</p>
<p>他们熟悉足够多的数据工具和框架，能够快速分析，并找到见解。他们总是寻找盲点。他们做出数据启迪、而非数据驱动的决定。</p>
<p>他们和数据科学社区保持良好联系——他们知道从哪儿能得到快速的数据科学方面的帮助，以及雇佣到明星数据科学家。</p>
<p>他们明白，大量的数据分析只用 web 浏览器就能快速搞定。</p>
<p>####4.聚焦设计<br>他们可能不是视觉设计师，但是理解设计的真谛及其重要性。他们知道，好的设计不单单取决于优秀的设计师，而要在团队内部打造一种强烈的设计文化。他们理解，好的设计花费时间，也知道良好、完美与完成之间的区别。</p>
<p>他们熟悉快速设计的工具，除了编写产品说明，还能够清晰地为振奋人心的想法和概念添加插图。他们不断地寻找设计灵感，他们激发着设计师。</p>
<p>他们和设计社区保持良好联系——他们知道从哪儿能得到快速的兼职设计方面的帮助，以及雇佣到优秀的全职设计师。</p>
<p>他们明白，设计不单单是设计师的工作——它是团队每个人的心态和文化。</p>
<p>####5.企业家精神<br>他们或许还没有打造过十亿美元的业务，但是已经上线了、并使得至少一款产品取得了增长（他们自己出钱），并以此为荣，即使没有上线亦如此。他们乐于介绍过程——为什么世界需要他们的产品、他们怎样获取用户、效果不佳的问题在哪儿。</p>
<p>他们相信，世界真的是平的，渴望成功。他们以之前的作品为荣，但是在内心深处藏着更大的欲望，那就是为十亿用户开发产品，让世界变得更美好。</p>
<p>他们明白，在拥有的全部技能中，勇气和坚持不懈才是最重要的两个特点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####1.善于观察&lt;br&gt;他们一直在观察用户，不仅仅是借助指标和仪表盘。他们对每件小事情感到好奇：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户正尝试完成什么？  &lt;/li&gt;
&lt;li&gt;为什么用户选择这款产品而非其它产品？  &lt;/li&gt;
&lt;li&gt;他们在和这款产品交互之前、之中和之后，做了什么。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们查看收到的每一条反馈，对每个客户问题做出响应。他们创建让人愉悦的调查，知道该问什么，什么时候该倾听或无视。他们在 Facebook 上和用户交朋友——他们能叫得出用户名字。他们深知，核心用户会成为产品本身的一部分。&lt;/p&gt;
&lt;p&gt;他们痴迷于研究。他们知道市场的运作方式、未来走向以及竞争要做什么。他们密切注视着一切，除了没有创建一个显而易见的版本。&lt;/p&gt;
    
    </summary>
    
      <category term="管理" scheme="https://huos3203.github.io/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理" scheme="https://huos3203.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>UIImage的渲染模式</title>
    <link href="https://huos3203.github.io/2015/11/26/2015-11-26-uiimagede-xuan-ran-mo-shi/"/>
    <id>https://huos3203.github.io/2015/11/26/2015-11-26-uiimagede-xuan-ran-mo-shi/</id>
    <published>2015-11-26T08:15:11.000Z</published>
    <updated>2017-01-12T03:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>设置UIImage的渲染模式：UIImage.renderingMode<br>在 iOS 7 中 UIImage 添加了一个 <code>renderingMode</code> 属性。我们可以使用 <code>imageWithRenderingMode:</code>并传入一个合适的<code>UIImageRenderingMode</code> 来指定这个 image 要不要以 Template 的方式进行渲染。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImageRenderingModeAutomatic</span> <span class="comment">// 根据图片的使用环境和所处的绘图上下文自动调整渲染模式。</span></div><div class="line"><span class="built_in">UIImageRenderingModeAlwaysOriginal</span> <span class="comment">// 始终绘制图片原始状态，不使用Tint Color。</span></div><div class="line"><span class="built_in">UIImageRenderingModeAlwaysTemplate</span> <span class="comment">// 始终根据Tint Color绘制图片，忽略图片的颜色信息。</span></div><div class="line"></div><div class="line"><span class="built_in">UIImage</span> *img = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"myimage"</span>];</div><div class="line">img = [img imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysTemplate</span>];</div><div class="line"><span class="comment">//实际效果，效果依旧显示为baritem的Tint Color</span></div><div class="line"><span class="built_in">UIBarButtonItem</span> *barButtonItem = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithImage:setImage</div><div class="line">                                                   style:<span class="built_in">UIBarButtonItemStylePlain</span></div><div class="line">                                                  target:<span class="keyword">self</span></div><div class="line">                                                  action:<span class="keyword">@selector</span>(setAction:)];</div><div class="line">```    </div><div class="line">在新的 Xcode 中，我们可以直接在 Image Asset 里的 Render As 选项来指定是不是需要作为 template 使用。相应的，在`<span class="built_in">UIApperance</span>`中，Apple 也为我们对于 `Size Classes` 添加了相应的方法。使用 `+appearanceForTraitCollection:` 方法，我们就可以针对不同 trait 下的应用的 apperance 进行很简单的设定。</div><div class="line"></div><div class="line">```objc</div><div class="line"><span class="built_in">UIView</span>.appearanceForTraitCollection(<span class="built_in">UITraitCollection</span>(verticalSizeClass:.Compact)).tintColor = <span class="built_in">UIColor</span>.redColor()  </div><div class="line"><span class="built_in">UIView</span>.appearanceForTraitCollection(<span class="built_in">UITraitCollection</span>(verticalSizeClass:.Regular)).tintColor = <span class="built_in">UIColor</span>.greenColor()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设置UIImage的渲染模式：UIImage.renderingMode&lt;br&gt;在 iOS 7 中 UIImage 添加了一个 &lt;code&gt;renderingMode&lt;/code&gt; 属性。我们可以使用 &lt;code&gt;imageWithRenderingMode:&lt;/code&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://huos3203.github.io/categories/iOS/"/>
    
    
      <category term="坑" scheme="https://huos3203.github.io/tags/%E5%9D%91/"/>
    
      <category term="UI" scheme="https://huos3203.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>敏捷开发总结</title>
    <link href="https://huos3203.github.io/2015/11/20/2015-11-20-min-jie-kai-fa-zong-jie/"/>
    <id>https://huos3203.github.io/2015/11/20/2015-11-20-min-jie-kai-fa-zong-jie/</id>
    <published>2015-11-20T02:06:38.000Z</published>
    <updated>2017-01-12T03:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>传统开发模型的局限性<br>什么是敏捷软件开发<br>Scrum概述<br>Scrum角色<br>Scrum活动<br>Scrum实践<br>Scrum工具和模板<br>Scrum常见问题<br>推荐书籍<br>敏捷方法强调以人为本，专注于交付对客户有价值的软件。在高度协作的开发环境中，使用迭代式的方式进行增量开发，经常使用反馈进行思考、反省和总结，不停的进行自我调整和完善。</p>
<p>Scrum Team中的三种角色</p>
<p>Product Owner- 产品所有者<br>个人：代表所有的干系人</p>
<p>Scrum Master:<br>个人：负责指导过程的执行</p>
<p>Scrum Team – Scrum团队:<br>承诺完成工作，向干系人交付产品价值</p>
<p>Product Owner- 产品所有者：</p>
<p>1 利益相关方的代表,重点是产品方面，与Scrum Master和Team合作</p>
<p>2 从业务角度出发对需求进行排序</p>
<p>3 合理的调整产品功能和迭代顺序</p>
<p>4 侧重于投资回报</p>
<p>Scrum Master职责:<br>1 为Scrum Team服务,确保每个成员都认同Scrum价值观和游戏规则</p>
<p>2 帮助Scrum Team规划Sprit计划</p>
<p>3 组织每天的Daily Scrum会议</p>
<p>4 负责保证Scrum Team 高效持续运转</p>
<p>5 决策和免除障碍，保证团队不受外来无端的影响</p>
<p>Scrum Team – Scrum团队:  </p>
<p>1 尽一切可能去完成任务-发布产品</p>
<p>2 充分理解产品负责人的产品愿景</p>
<p>3 合作完成冲刺(Sprint)中每一个目标</p>
<p>4 更好的支持可能需要进一步开发的产品发布</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传统开发模型的局限性&lt;br&gt;什么是敏捷软件开发&lt;br&gt;Scrum概述&lt;br&gt;Scrum角色&lt;br&gt;Scrum活动&lt;br&gt;Scrum实践&lt;br&gt;Scrum工具和模板&lt;br&gt;Scrum常见问题&lt;br&gt;推荐书籍&lt;br&gt;敏捷方法强调以人为本，专注于交付对客户有价值的软件。在高度协作
    
    </summary>
    
      <category term="管理" scheme="https://huos3203.github.io/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Scrum" scheme="https://huos3203.github.io/tags/Scrum/"/>
    
  </entry>
  
  <entry>
    <title>清除git历史记录大文件bfg</title>
    <link href="https://huos3203.github.io/2015/10/20/2015-10-20-qing-chu-gitli-shi-ji-lu-da-wen-jian-bfg/"/>
    <id>https://huos3203.github.io/2015/10/20/2015-10-20-qing-chu-gitli-shi-ji-lu-da-wen-jian-bfg/</id>
    <published>2015-10-20T03:17:27.000Z</published>
    <updated>2017-01-12T08:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><a href="https://search.maven.org/remote_content?g=com.madgag&amp;a=bfg&amp;v=LATEST" target="_blank" rel="external">下载bfg</a> 到本地soft/bfg目录下。</li>
<li>sudo vi ~/.bash_profile  添加如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias bfg=&quot;java -jar ~/Downloads/soft/bfg/bfg.jar&quot;</div></pre></td></tr></table></figure>
<ol>
<li>cd 到库目录，执行bfg命令： <a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="external">bfg官网</a> </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd PBB_SSH所属目录下</div><div class="line">$ bfg --delete-folders universal --no-blob-protection  PBB_SSH</div><div class="line">$ cd PBB_SSH</div><div class="line">$ git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</div><div class="line">$ git push</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remote_content?g=com.madgag&amp;amp;a=bfg&amp;amp;v=LATEST&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载bfg&lt;/a&gt; 到本地s
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
      <category term="坑" scheme="https://huos3203.github.io/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>[转]敏捷杂谈之TDD与BDD</title>
    <link href="https://huos3203.github.io/2015/10/06/2015-10-06-zhuan-min-jie-za-tan-zhi-tddyu-bdd/"/>
    <id>https://huos3203.github.io/2015/10/06/2015-10-06-zhuan-min-jie-za-tan-zhi-tddyu-bdd/</id>
    <published>2015-10-06T02:18:02.000Z</published>
    <updated>2017-01-12T02:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>敏捷开发有许多种方法，但不管采用任何一种，测试都是实施敏捷的基础，及时的验证代码的正确性，系统功能的健全与否，及时的反馈，及时的叫停……都是保证敏捷的基础。所以大量的快速的自动化测试，才能保证敏捷开发在快速迭代中仍然不怎么丢失软件的质量。</p>
<p>所以，在敏捷开发里一直都有一种说法叫“代码即文档”，而且测试代码也成了功能代码的使用文档。敏捷里强调的TDD(Test-driven developmenet, 测试驱动开发)，就主要体现了这种思想：根据设计编写测试-&gt; 实现设计的功能 -&gt; 用测试代码验证 -&gt; 重构实现代码 -&gt; 改善设计 -&gt; 再次回到根据改善的设计编写测试。反复循环下去，就是TDD所倡导的流程。<br><a id="more"></a><br>TDD的好处：1. 能驱使系统最终的实现代码，都可以被测试代码所覆盖到，也即“每一行代码都可测”。2. 测试代码作为实现代码的正确导向，最终演变为正确系统的行为，能让整个开发过程更加高效。TDD的不足之处或者说还不够完善的地方，是对设计和测试的编写没有一个明确的方针。作为整个循环中的向导部分，如何保证根据设计编写的测试就是最终用户所期望的系统行为？如果这一部分模糊了，那么后续所有环节几乎都要受到影响。所以，再次基础上，敏捷社区又有人提出了BDD的概念，即“行为驱动开发”。</p>
<p>BDD(Behavior-driven development)把TDD中模糊的那一部分给明确了，强调开发、测试、BA、客户等所有项目相关人员都用自然语言来描述系统的行为。大家看到的描述一致，读到的内容一致，于是最终测试驱动开发产出的结果也应该是最符合用户期望的。所以在BDD的倡导下，介绍了一种简洁的类似自然语言叫Gherkin Language。下面看一个用Gherkin Language描述系统行为的例子：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[plain] view plaincopyprint?</div><div class="line">As a xxx [Role]  </div><div class="line">I want to xxx [Feature]  </div><div class="line">So that I can xxx[Benefit]  </div><div class="line"></div><div class="line">Scenario <span class="number">1</span>: create user  </div><div class="line">Given a admin log into the system  </div><div class="line"><span class="keyword">when</span> he create a user with name <span class="string">'mike'</span>  </div><div class="line"><span class="keyword">then</span> mike should be able to log into the system</div></pre></td></tr></table></figure></p>
<p>随着BDD的出现和发展，使用大家都能轻易理解和认知的语言来描述系统的行为并创建User Story，TDD的反复循环的流程也就能更顺利的进行下去了。BDD的核心价值是体现在正确的对系统行为进行设计，所以它并非一种行之有效的测试方法。它强调的是系统最终的实现与用户期望的行为是一致的、验证代码实现是否符合设计目标。但是它本身并不强调对系统功能、性能以及边界值等的健全性做保证，无法像完整的测试一样发现系统的各种问题。</p>
<p>有种说法是BDD是TDD的进化，其实笔者看来，没有孰优孰劣，它们的本质和目标都是一致的。只是在实施方法上，进行了不同的探讨来完善整个敏捷开发的体系。如果BDD书写的User Story或者叫测试用例，不能作为开发、测试和客户等人共同参与和看到的一致性内容的话，那么它的价值也几乎得不到体现。另外一点，由于BDD不能代替完整的测试，旨在描述系统的行为，所以就像Gherkin Language的例子所体现的那样，关键是“简洁”，切忌啰嗦的想把每一步操作和任何情况都说得很清楚。</p>
<p>最后总结：TDD的迭代反复验证是敏捷开发的保障，但没有明确如何根据设计产生测试，并保障测试用例的质量，而BDD倡导大家都用简洁的自然语言描述系统行为的理念，恰好弥补了测试用例（即系统行为）的准确性。（不管以上理念是否先进，切忌盲从和滥用）</p>
<p>更多：<br><a href="http://www.cnblogs.com/wangshenhe/archive/2013/02/16/2913431.html" target="_blank" rel="external">关于TDD、BDD和DDD的一些看法</a><br><a href="http://cache.baiducontent.com/c?m=9f65cb4a8c8507ed4fece763105392230e54f73860838d5668d4e419ce3b46101b7bb0fb6179415a848461235aef0f1bb9ae2172414173ebcc969f4aabfdc47e38885164264a92044f934fa09b1073d621e04d99db0e94c9e74296b9a1d3c85523dd22036df3f19c2b7303ba19&amp;p=c4769a46d6951ff41cf6c4710e10d70a&amp;newp=9c64d70d85cc42af08e297780d52bb705c5bc4387ebad0157f&amp;user=baidu&amp;fm=sc&amp;query=BDD%BF%AA%B7%A2%C4%A3%CA%BD&amp;qid=a08e02971812c57c&amp;p1=13" target="_blank" rel="external">虚拟座谈会：代码测试比率、测试驱动开发及行为驱动开发</a><br><a href="http://yangzb.iteye.com/blog/309354" target="_blank" rel="external">亲身体验行为驱动开发</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;敏捷开发有许多种方法，但不管采用任何一种，测试都是实施敏捷的基础，及时的验证代码的正确性，系统功能的健全与否，及时的反馈，及时的叫停……都是保证敏捷的基础。所以大量的快速的自动化测试，才能保证敏捷开发在快速迭代中仍然不怎么丢失软件的质量。&lt;/p&gt;
&lt;p&gt;所以，在敏捷开发里一直都有一种说法叫“代码即文档”，而且测试代码也成了功能代码的使用文档。敏捷里强调的TDD(Test-driven developmenet, 测试驱动开发)，就主要体现了这种思想：根据设计编写测试-&amp;gt; 实现设计的功能 -&amp;gt; 用测试代码验证 -&amp;gt; 重构实现代码 -&amp;gt; 改善设计 -&amp;gt; 再次回到根据改善的设计编写测试。反复循环下去，就是TDD所倡导的流程。&lt;br&gt;
    
    </summary>
    
      <category term="CI" scheme="https://huos3203.github.io/categories/CI/"/>
    
    
      <category term="TDD" scheme="https://huos3203.github.io/tags/TDD/"/>
    
      <category term="BDD" scheme="https://huos3203.github.io/tags/BDD/"/>
    
  </entry>
  
  <entry>
    <title>calabash一款跨平台UI测试工具初探</title>
    <link href="https://huos3203.github.io/2015/10/06/2015-10-06-calabash%5B?%5D-kuan-kua-ping-tai-uice-shi-gong-ju-chu-tan/"/>
    <id>https://huos3203.github.io/2015/10/06/2015-10-06-calabash[?]-kuan-kua-ping-tai-uice-shi-gong-ju-chu-tan/</id>
    <published>2015-10-06T00:32:41.000Z</published>
    <updated>2017-01-12T02:34:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="http://blog.csdn.net/zangcw/article/details/25299243" target="_blank" rel="external">使用jenkins+calabash+cocoapods搭建ios持续集成环境</a></p>
<ol>
<li>calabash  是一款开源的跨平台UI测试工具，目前支持iOS和Android。它使用Cucumber作为测试核心，Cucumber是一个在敏捷团队十分流行的自动化的功能测试工具，它使用接近于自然语言的特性文档进行用例的书写和测试，支持多语言和多平台。</li>
<li><p>安装Calabash  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install calabash-cucumber</div></pre></td></tr></table></figure>
</li>
<li><p>安装Calabash中文支持包  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install calabash-cucumber-cn</div></pre></td></tr></table></figure>
</li>
</ol>
<p>####For automatic setup:      </p>
<ol>
<li><p>In a terminal, go to your iOS project  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	cd path-to-my-ios-project (i.e. directory containing .xcodeproj file)</div><div class="line">	```  </div><div class="line">2. Install calabash-cucumber gem (this make take some time because of dependencies)</div></pre></td></tr></table></figure>
<p> gem install calabash-cucumber</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. Setup your project for Calabash-iOS.</div></pre></td></tr></table></figure>
<p> calabash-ios setup  //Answer the questions and read the output :)</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4. Generate a skeleton features folder for your tests</div></pre></td></tr></table></figure>
<p> calabash-ios gen</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">5. In Xcode, build your project using the -cal scheme</div><div class="line"></div><div class="line">6. Run the generated test!</div></pre></td></tr></table></figure>
<p> cucumber</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">If all goes well, you are now ready to write your first test. Start by editing the file features/my_first.feature.</div><div class="line">&lt;!--more--&gt;</div><div class="line">####[cucumber官网](https://cukes.info/)   </div><div class="line"></div><div class="line">		* Feature（功能）  </div><div class="line">		* Scenario（情景）  </div><div class="line">		*  Given（给定）  </div><div class="line">		*  When（当）  </div><div class="line">		*  Then（则） </div><div class="line">#####[运行原理](http://www.educity.cn/se/619226.html)  </div><div class="line">![image](http://img.educity.cn/img_7/262/2013122000/125005907.jpg)  </div><div class="line">cucumber是一种BDD测试框架，核心为cucumber的calabash的脚本在运行测试的时候会在虚拟机/真机上预装一个web服务器，这个web服务器就是解释calabash的脚本，将其解释为robotium的脚本，然后这个web服务器会想测试app发送robotium的脚本，测试app拿到robotium脚本后，将其解释为instumentation命令向被测试的app发送这些命令，被测试的app执行这些命令，然后将结果返回给测试app，然后一级一级返得到最后的测试结果。    </div><div class="line">#####结构框架</div><div class="line">calabash完全采用了cucumber的结构模式，calabash是脚本与TC分离设计，在业务变化的情况下，只要功能存在基本只需要修改TC逻辑，在业务不变，功能变化的情况下，基本只需要修改脚本。   </div><div class="line">![image](http://img.educity.cn/img_7/262/2013122000/126005907.jpg)  </div><div class="line">feature为主件夹，step_definitions目录内是你封装的脚本，my_first.feature文件就是你的TC逻辑。  </div><div class="line">再看一下其中的内容：</div><div class="line"></div><div class="line">	　　my_first.feature</div><div class="line">	</div><div class="line">	　　Feature： 登陆</div><div class="line">	</div><div class="line">	　　Scenario： 输入正确的用户名密码能够正常登陆</div><div class="line">	</div><div class="line">	　　When 打开登陆页面</div><div class="line">	</div><div class="line">	　　And    输入用户名XXX输入密码XXX</div><div class="line">	</div><div class="line">	　　And   点击登陆</div><div class="line">	</div><div class="line">	　　Then  验证登陆成功</div><div class="line"></div><div class="line">　　看起来很简单吧，想要验证其他功能也是类似的语言描述即可。  </div><div class="line">如果你没有用过cucumber或者calabash那么你肯定现在有一个疑问，计算机怎么能识别汉字来进行测试的呢，  </div><div class="line">那么看一下step_definition，以 输入用户名XXX输入密码XXX为例：</div><div class="line"></div><div class="line">		When /^ 输入用户名\&quot;([^\\\&quot;]*)\&quot; 输入密码\&quot;([^\\\&quot;]*)\&quot;  $/ do |username，password|</div><div class="line">		performAction(&apos;enter_text_into_numbered_field&apos;，username，1)</div><div class="line">		performAction(&apos;enter_text_into_numbered_field&apos;，password，2)</div><div class="line">		end</div><div class="line">现在应该能明白为什么你需要写汉字的脚本就可以了吧。  </div><div class="line">在这里解释一下为什么如果业务存在功能修改这种情况，自动化脚本的修改量会小。  </div><div class="line">还是以这个登录脚本为例：</div><div class="line"></div><div class="line">	假如现在输入用户名和密码的输入框顺序变了，在你的页面显示上，可能是从左下角移到中间了，这种变化，那么feature文件你不用改，只需要改step_definition脚本就好了</div><div class="line">#####运行报告</div><div class="line">alabash-android支持很多报告生成模式，支持html，json，junit等等报告模式，只需要你在run的时候添加-f参数-o参数就可以了。</div><div class="line"></div><div class="line">　　例如 calabash-android run xxxx.apk -f html -o l，上图展示一下强大html报告  </div><div class="line">　　![image](http://img.educity.cn/img_7/262/2013122000/127005907.jpg)</div><div class="line"></div><div class="line">[【cucumber解析features文件】](http://blog.csdn.net/qs_csu/article/details/9000262) 		</div><div class="line">1. my_first.feature: 描述在这个条件下需要做什么事情；</div><div class="line"></div><div class="line">		Feature: Running a test  </div><div class="line">		  As an iOS developer  </div><div class="line">		  I want to have a sample feature file  </div><div class="line">		  So I can begin testing quickly  </div><div class="line">		  </div><div class="line">		Scenario: Example steps1  </div><div class="line">		  Given I am on the Welcome Screen  </div><div class="line">		  Then I swipe left  </div><div class="line">		  And I wait until I don&apos;t see &quot;Please swipe left&quot;  </div><div class="line">		  And take picture  </div><div class="line">		  </div><div class="line">		Scenario: Example steps2  </div><div class="line">		  Given I am on the Welcome Screen  </div><div class="line">		 #ASSERTION  </div><div class="line">		  Then I should see a &quot;login&quot; button  </div><div class="line">		 #INPUT TEXT  </div><div class="line">		  Then I enter &quot;my_username&quot; into text field number 1  </div><div class="line">		#  Then I touch &quot;Return&quot;  </div><div class="line">		  </div><div class="line">		 #TOGGLE SWITCH  </div><div class="line">		  Then I toggle the switch  </div><div class="line">		  Then I touch &quot;Login&quot;  </div><div class="line">		  And I touch &quot;Second&quot;  </div><div class="line">		  And take picture  </div><div class="line">	该文件描述了在“on the Welcome Screen”这个Step中需要做的事情，两个场景:steps1 和 steps2. </div><div class="line"></div><div class="line">2. my_first_step.rb: 解释了Given的具体条件</div><div class="line"></div><div class="line">		Given /^I am on the Welcome Screen$/ do  </div><div class="line">		  element_exists(&quot;view&quot;)  </div><div class="line">		  check_element_exists(&quot;label text:&apos;First View&apos;&quot;)  </div><div class="line">		  sleep(STEP_PSEAU)  </div><div class="line">		end</div><div class="line">	这个语句，判定了当前条件&quot;on the Welcome Screen&quot;是否满足，如果element存在，则就在&quot;Welcome Screen&quot;</div><div class="line">	</div><div class="line">[更多的测试框架](http://www.infoq.com/cn/articles/build-ios-continuous-integration-platform-part2)</div><div class="line"></div><div class="line">UIAutomation</div><div class="line"></div><div class="line">UIAutomation是随着iOS SDK 4.0引入，帮助开发者在真实设备和模拟器上执行自动化的UI测试。其本质上是一个Javascript的类库，通过 界面上的标签和值的访问性来获得UI元素，完成相应的交互操作，从而达到测试的目的，类似于Web世界的Selenium。</div><div class="line"></div><div class="line">通过上面的描述，可以得知，使用UIAutomation做测试时，开发者必须掌握两件事：</div><div class="line"></div><div class="line">- 如何找到界面上的一个UI元素</div><div class="line">- 如何指定针对一个UI元素的操作</div><div class="line"></div><div class="line">在UIAutomation中，界面就是由一堆UI元素构建的层级结构，所有UI元素都继承对象UIAElement ，该对象提供了每个UI元素必须具备的一些属性：</div><div class="line"></div><div class="line">- name</div><div class="line">- value</div><div class="line">- elements</div><div class="line">- parent</div><div class="line">- …</div><div class="line"></div><div class="line">而整个界面的层级结构如下：</div><div class="line"></div><div class="line">	arget（设备级别的UI，用于支持晃动，屏幕方向变动等操作）</div><div class="line">	    Application（设备上的应用，比方说Status Bar，keyboard等）</div><div class="line">	      Main window（应用的界面，比方说导航条）</div><div class="line">	        View（界面下的View，比方说UITableView）</div><div class="line">	           Element（View下的一个元素）</div><div class="line">	              Child element(元素下的一个子元素)</div><div class="line">下面是一个访问到Child element的例子：</div><div class="line"></div><div class="line">	UIATarget.localTarget().HamcrestDemo().tableViews()[0].cells()[0].elements()</div><div class="line">开发者还可以通过“UIATarget.localTarget().logElementTree()”在控制台打印出该target下所有的的elements。</div><div class="line"></div><div class="line">找到UI元素之后，开发者可以基于该UI元素做期望的操作，UIAutomation作为原生的UI测试框架，基本上支持iOS上的所有UI元素和操作，比方说：</div><div class="line"></div><div class="line">- 点击按钮，例: ***.buttons[“add”].tap()</div><div class="line">- 输入文本, 例:***.textfields[0].setValue(“new”)</div><div class="line">- 滚动屏幕，例:***.scrollToElementWithPredicate(“name begin with ’test’”)</div><div class="line">- ……</div><div class="line">关于使用UIAutomation做UI测试，推荐大家一定要看一下2010的WWDC的Session 306：[Automating User Interface Testing with Instruments](https://developer.apple.com/videos/wwdc/2010/?id=306)。 另外，这儿还有一篇很好的博客，详细的讲解了[如何使用UIAutomation做UI自动化测试](http://blog.manbolo.com/2012/04/08/ios-automated-tests-with-uiautomation)  </div><div class="line">Apple通过Instruments为UIAutomation测试用例的命令行运行提供了支持，这样就为UIAutomation和CI服务器的集成提供了便利。开发者可以通过如下的步骤在命令行中运行UIAutomation测试脚本:</div><div class="line">1. 指定目标设备，构建被测应用，该应用会被安装到指定的DSTROOT目录下</div><div class="line">```ruby</div><div class="line">xcodebuild</div><div class="line">-project &quot;/Users/twer/Documents/xcodeworkspace/AudioDemo/AudioDemo.xcodeproj&quot; </div><div class="line">-schemeAudioDemo</div><div class="line">-sdk iphonesimulator6.1 </div><div class="line">-configuration Release SYMROOT=&quot;/Users/twer/Documents/xcodeworkspace/</div><div class="line">AudioDemo/build&quot; DSTROOT=&quot;/Users/twer/Documents/xcodeworkspace/AudioDemo/</div><div class="line">build&quot; TARGETED_DEVICE_FAMILY=&quot;1&quot; </div><div class="line">install</div></pre></td></tr></table></figure>
</li>
<li><p>启动Instruments，基于第一步生成的应用运行UIAutomation测试</p>
<pre><code class="ruby">instruments
-t  <span class="string">"/Applications/Xcode.app/Contents/Applications/Instruments.app/
Contents/PlugIns/AutomationInstrument.bundle/Contents/Resources/
Automation.tracetemplate"</span> <span class="string">"/Users/twer/Documents/xcodeworkspace/AudioDemo
/build/Applications/TestExample.app"</span>
-e UIASCRIPT &lt;absolute_path_to_the_test_file&gt;
</code></pre>
<p>为了更好的展示测试效果以及与CI服务器集成，活跃的社区开发者们还尝试把UIAutomation和Jasmine集成: <a href="https://github.com/shaune/jasmine-ios-acceptance-tests" target="_blank" rel="external">https://github.com/shaune/jasmine-ios-acceptance-tests</a></p>
</li>
</ol>
<p>UIAutomation因其原生支持，并且通过和Instruments的绝佳配合，开发者可以非常方便的使用录制操作自动生成测试脚本，赢得了很多开发者的支持，但是因苹果公司的基因，其系统非常封闭，导致开发者难以扩展，于是活跃的社区开发者们开始制造自己的轮子，<a href="https://gorillalogic.com/fonemonkey-0-7-1-released/" target="_blank" rel="external">Fone Monkey,最新版本更新于2010年，估计过时</a>就是其中的一个优秀成果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;http://blog.csdn.net/zangcw/article/details/25299243&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用jenkins+calabash+cocoapods搭建ios持续集成环境&lt;
    
    </summary>
    
      <category term="CI" scheme="https://huos3203.github.io/categories/CI/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="UI" scheme="https://huos3203.github.io/tags/UI/"/>
    
      <category term="测试" scheme="https://huos3203.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>使用SmartSVN创建版本库</title>
    <link href="https://huos3203.github.io/2015/10/05/2015-10-05-shi-yong-smartsvnchuang-jian-ban-ben-ku/"/>
    <id>https://huos3203.github.io/2015/10/05/2015-10-05-shi-yong-smartsvnchuang-jian-ban-ben-ku/</id>
    <published>2015-10-05T11:16:47.000Z</published>
    <updated>2017-01-12T08:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>SmartSVN有以下版本：</p>
<ol>
<li>SmartSVN enterprise 9 企业版</li>
<li>SmartSVN foundation 8 基础版</li>
</ol>
<p>由于企业版只能建立本地的版本库，无法创建&amp;使用svn://localhost方式。</p>
<p>####用基础版来说明创建版本库。<br>参考：<a href="http://hammadk.com/how-to-create-repository-in-smartsvn-tutorial/" target="_blank" rel="external">Create Repository in SmartSVN – Tutorial</a>  </p>
<ol>
<li>启动SmartSVN SmartSVN foundation 8 基础版  </li>
<li>菜单栏Project-&gt; set up Local Repository…<br>需要设置如下两个参数：  <ol>
<li>svnadmin 在终端执行： whereis svnadmin  </li>
<li>svnserve 在终端执行： whereis svnserve<br>￼<img src="https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/adeb039a-b429-481a-ac25-2044b871e45e/screenshot.png?resizeSmall&amp;width=832" alt="image">  </li>
</ol>
</li>
<li>指定版本库的目录位置：<br><img src="https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/a3f00903-101c-4848-a10a-3479643baea7/screenshot.png?resizeSmall&amp;width=832" alt="image">  </li>
<li>初始化账户密码：<br><img src="https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/140f257e-e452-47ea-8317-34a5ed8d6c7f/screenshot.png?resizeSmall&amp;width=832" alt="image">  </li>
<li>完成。<br><img src="https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/ed975623-72bb-4132-8d04-ac9a7b1d2fc9/screenshot.png?resizeSmall&amp;width=832" alt="image"><br><img src="https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/53306789-9d97-485c-a54d-a143e7b078f1/screenshot.png?resizeSmall&amp;width=832" alt="image"><a id="more"></a>    
#####开始导入项目源码，来跟踪版本变化，实现版本控制。  </li>
<li>新建SmartSVNRepos目录，存放APP源码，用于导入版本库的原始目录。导入后，该目录源码就被版本跟踪了，在开发时，不用再从版本库导出，可以用该目录的代码直接在版本上开发了。<br><img src="https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/ee02bf65-27e3-435a-8300-8189bc087eb8/screenshot.png?resizeSmall&amp;width=832" alt="image"></li>
<li>菜单栏Project -&gt; Import Into Repository…<br><img src="https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/eccc10f0-4c5a-435c-8397-062028d0d4f4.png?resizeSmall&amp;width=832" alt="image"></li>
<li>选择以上新建的SmartSVN版本库：svn://localhost<br><img src="https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/ecfe16b4-17ac-4fc1-a64f-1ce259d77b3b/screenshot.png?resizeSmall&amp;width=832" alt="image"> </li>
</ol>
<p>查看是否安装SVN服务：</p>
<pre><code>svnserve —version
</code></pre><p>SVN随系统一起启动：</p>
<pre><code>vi /etc/rc.local   //(此文件Mac系统中默认是不存在的，需手动创建)

添加启动SVN服务： 
svnserve -d -r /data/svn/repos  
</code></pre><p>关闭svn服务:</p>
<pre><code>直接ps aux | grep svn，然后kill -9 进程号
</code></pre><ol>
<li><p>创建库:<br> 打印应用目录命令：</p>
<pre><code>whereis svn
</code></pre><p> 新建版本库目录：</p>
<pre><code>sudo mkdir -p /data/svn/repos/local    
chmod u+w 文件名
</code></pre><p> 创建：</p>
<pre><code>sudo svnadmin create /data/svn/repos/local
查看文件权限： ls -l
</code></pre></li>
<li><p>配置版本库的访问权限</p>
<pre><code>cd conf/ 
</code></pre><ol>
<li><p>开启密码权限，普通用户/匿名用户</p>
<pre><code>sudo vi svnserve.conf
</code></pre></li>
<li><p>设置用户：密码</p>
<pre><code>sudo vi passwd
</code></pre></li>
<li><p>分组设置，组权限</p>
<pre><code>sudo vi authz
</code></pre></li>
</ol>
</li>
<li><p>启动svnserve服务  </p>
<pre><code>sudo svnserve -d -r /data/svn/repos —log-file=/var/log/svn.log
</code></pre></li>
<li><p>测试端口：</p>
<pre><code>telnet localhost 3690
</code></pre></li>
<li><p>重启必先kill ：</p>
<pre><code>sudo kill PID
</code></pre></li>
<li><p>版本库路径：</p>
<pre><code>svn://localhost/local
</code></pre><p>其他：</p>
<pre><code>svn ls svn://svnpath 可以查询snv仓库内容  
lsof -i :3690 查看svn是否启动  
ps aux | grep ‘svn’ 查找所有svn启动的进程id  
kill -9 pid 将pid替换为上面查到的进程id可以杀掉svn进程  
</code></pre></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SmartSVN有以下版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SmartSVN enterprise 9 企业版&lt;/li&gt;
&lt;li&gt;SmartSVN foundation 8 基础版&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于企业版只能建立本地的版本库，无法创建&amp;amp;使用svn://localhost方式。&lt;/p&gt;
&lt;p&gt;####用基础版来说明创建版本库。&lt;br&gt;参考：&lt;a href=&quot;http://hammadk.com/how-to-create-repository-in-smartsvn-tutorial/&quot;&gt;Create Repository in SmartSVN – Tutorial&lt;/a&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动SmartSVN SmartSVN foundation 8 基础版  &lt;/li&gt;
&lt;li&gt;菜单栏Project-&amp;gt; set up Local Repository…&lt;br&gt;需要设置如下两个参数：  &lt;ol&gt;
&lt;li&gt;svnadmin 在终端执行： whereis svnadmin  &lt;/li&gt;
&lt;li&gt;svnserve 在终端执行： whereis svnserve&lt;br&gt;￼&lt;img src=&quot;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/adeb039a-b429-481a-ac25-2044b871e45e/screenshot.png?resizeSmall&amp;amp;width=832&quot; alt=&quot;image&quot;&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;指定版本库的目录位置：&lt;br&gt;&lt;img src=&quot;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/a3f00903-101c-4848-a10a-3479643baea7/screenshot.png?resizeSmall&amp;amp;width=832&quot; alt=&quot;image&quot;&gt;  &lt;/li&gt;
&lt;li&gt;初始化账户密码：&lt;br&gt;&lt;img src=&quot;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/140f257e-e452-47ea-8317-34a5ed8d6c7f/screenshot.png?resizeSmall&amp;amp;width=832&quot; alt=&quot;image&quot;&gt;  &lt;/li&gt;
&lt;li&gt;完成。&lt;br&gt;&lt;img src=&quot;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/ed975623-72bb-4132-8d04-ac9a7b1d2fc9/screenshot.png?resizeSmall&amp;amp;width=832&quot; alt=&quot;image&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://app.yinxiang.com/shard/s33/nl/2147483647/59a78b5d-81de-48f1-afe9-2fb2bde72da2//res/53306789-9d97-485c-a54d-a143e7b078f1/screenshot.png?resizeSmall&amp;amp;width=832&quot; alt=&quot;image&quot;&gt;
    
    </summary>
    
      <category term="git" scheme="https://huos3203.github.io/categories/git/"/>
    
    
      <category term="工具" scheme="https://huos3203.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="搭建" scheme="https://huos3203.github.io/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="svn" scheme="https://huos3203.github.io/tags/svn/"/>
    
  </entry>
  
</feed>
